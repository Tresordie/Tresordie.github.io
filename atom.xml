<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>时光渐渐逝去</title>
  
  <subtitle>simon&#39;s blog</subtitle>
  <link href="https://tresordie.github.io/atom.xml" rel="self"/>
  
  <link href="https://tresordie.github.io/"/>
  <updated>2023-05-30T06:45:13.626Z</updated>
  <id>https://tresordie.github.io/</id>
  
  <author>
    <name>simon yuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pandas简介</title>
    <link href="https://tresordie.github.io/2023/05/30/Pandas%E7%AE%80%E4%BB%8B/"/>
    <id>https://tresordie.github.io/2023/05/30/Pandas%E7%AE%80%E4%BB%8B/</id>
    <published>2023-05-30T02:00:00.000Z</published>
    <updated>2023-05-30T06:45:13.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pythonpandas简介">[Python]Pandas简介</h1><h2 id="pandas">1. Pandas</h2><blockquote><ol type="1"><li>Python的第三方库</li><li>用于数据分析</li></ol></blockquote><h2 id="环境搭建">2. 环境搭建</h2><blockquote><ol type="1"><li><p>解释器：python</p></li><li><p>编辑器：Jupyter notebook / Jupyter lab / VScode</p></li><li><p>Pandas：</p><p>pip install pandas</p></li></ol></blockquote><h2 id="读写excel">3. 读写excel</h2><h3 id="读取excel">3.1 读取excel</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)   <span class="comment">#读取excel文件到dataframe</span></span><br><span class="line">df  <span class="comment">#打印dataframe</span></span><br></pre></td></tr></table></figure><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20230530120846449.png"alt="image-20230530120846449" /></p><h3 id="打印前20行">3.2 打印前20行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)   <span class="comment">#读取excel文件到df</span></span><br><span class="line">df.head(<span class="number">20</span>)  <span class="comment">#打印前20行</span></span><br></pre></td></tr></table></figure><h3 id="打印最后-xx-行默认5行">3.3 打印最后 xx 行(默认5行)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)   <span class="comment">#读取excel文件到df</span></span><br><span class="line">df.tail()<span class="comment">#打印倒数5行</span></span><br></pre></td></tr></table></figure><h3 id="随机打印-xx-行默认5行">3.4 随机打印 xx 行(默认5行)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)   <span class="comment">#读取excel文件到df</span></span><br><span class="line">df.sample(<span class="number">10</span>)         <span class="comment">#random 10 rows</span></span><br></pre></td></tr></table></figure><h3 id="打印行列数">3.5 打印行列数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)   <span class="comment">#读取excel文件到df</span></span><br><span class="line">df.shape  </span><br></pre></td></tr></table></figure><h3 id="打印data-frame所有的数据类型索引情况行列数等信息">3.6 打印dataframe所有的数据类型，索引情况，行列数等信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)   <span class="comment">#读取excel文件到df</span></span><br><span class="line">df.info()</span><br></pre></td></tr></table></figure><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20230530121620586.png"alt="image-20230530121620586" /></p><h3 id="查看数值型列的汇总统计">3.7 查看数值型列的汇总统计</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)   <span class="comment">#读取excel文件到df</span></span><br><span class="line">df.describe()</span><br></pre></td></tr></table></figure><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20230530121800299.png"alt="image-20230530121800299" /></p><h3 id="查看各字段类型">3.8 查看各字段类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)   <span class="comment">#读取excel文件到df</span></span><br><span class="line">df.dtypes</span><br></pre></td></tr></table></figure><p><imgsrc="C:\Users\simon\AppData\Roaming\Typora\typora-user-images\image-20230530121955029.png"alt="image-20230530121955029" /></p><h3 id="查看数据列名">3.9 查看数据列名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)   <span class="comment">#读取excel文件到df</span></span><br><span class="line">df.axes<span class="comment">#行名</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)   <span class="comment">#读取excel文件到df</span></span><br><span class="line">df.columns<span class="comment">#列名</span></span><br></pre></td></tr></table></figure><h3 id="建立索引">3.10 建立索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)</span><br><span class="line">df.set_index(<span class="string">&#x27;name&#x27;</span>, inplace=<span class="literal">True</span>)   <span class="comment"># inplace=True表示立即生效</span></span><br></pre></td></tr></table></figure><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20230530131723448.png"alt="image-20230530131723448" /></p><h3 id="查看指定列">3.11 查看指定列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)</span><br><span class="line">df.set_index(<span class="string">&#x27;name&#x27;</span>, inplace=<span class="literal">True</span>)   <span class="comment"># inplace=True表示立即生效</span></span><br><span class="line">df[<span class="string">&#x27;Q1&#x27;</span>]<span class="comment"># 只看Q1列</span></span><br><span class="line">df[[<span class="string">&#x27;team&#x27;</span>, <span class="string">&#x27;Q2&#x27;</span>]]<span class="comment"># 看 team 和 Q2两列</span></span><br></pre></td></tr></table></figure><h3 id="选择多列">3.12 选择多列</h3><blockquote><ol type="1"><li>如果使用名称来选择多行的话，可以使用 df.loc[row, column]</li><li>如果使用数字来选择多行的话，可以使用 df.iloc[row_num,column_num]</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)</span><br><span class="line">df.set_index(<span class="string">&#x27;name&#x27;</span>, inplace=<span class="literal">True</span>)   <span class="comment"># inplace=True表示立即生效</span></span><br><span class="line">df[[<span class="string">&#x27;team&#x27;</span>, <span class="string">&#x27;Q2&#x27;</span>]]<span class="comment"># 看 team 和 Q2两列</span></span><br><span class="line">df.loc[:, [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;team&#x27;</span>]]<span class="comment"># 看 team 和 Q2两列</span></span><br></pre></td></tr></table></figure><h3 id="数据选择">3.13 数据选择</h3><blockquote><ol type="1"><li><p>选择列</p><p>df['Q1'] 或 df.Q1</p></li><li><p>选择行</p><p>df[df.index == "Liver"]</p><p>df[0:3] # 0到3行</p></li><li><p>选择行和列</p><p>df.iloc[0:10, 0:4] # 0到310行，0到4列</p><p>df.loc['Ben', 'Q1':'Q4']</p><p>df.loc['Ben'：'Alex', 'Q1':'Q4'] # 指定多行，多列</p></li><li><p>条件选择</p><p>df[df.Q1 &gt; 90] # Q1列中大于90的成员</p></li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)</span><br><span class="line">df.set_index(<span class="string">&#x27;name&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df[df.Q1 &gt; <span class="number">90</span>]</span><br></pre></td></tr></table></figure><h3 id="排序">3.14 排序</h3><blockquote><ol type="1"><li><p>指定列数据按照升序或者降序排列</p><p>df.sort_values(by='Q1') # Q1列按照数据升序排列</p><p>df.sort_values(by='Q1', ascending=False) # Q1列按照数据降序排列</p><p>df.sort_values(['team', 'Q1'], ascending=[True, False]) #team升序，Q1降序</p></li></ol></blockquote><h3 id="分组聚合">3.15 分组聚合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)</span><br><span class="line">df.set_index(<span class="string">&#x27;name&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.groupby(<span class="string">&#x27;team&#x27;</span>).<span class="built_in">sum</span>()<span class="comment"># team分组，然后组内求和</span></span><br><span class="line">df.groupby(<span class="string">&#x27;team&#x27;</span>).mean()</span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">&#x27;team&#x27;</span>).agg(&#123;<span class="string">&#x27;Q1&#x27;</span>:<span class="built_in">sum</span>, <span class="string">&#x27;Q2&#x27;</span>: <span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;Q3&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>, <span class="string">&#x27;Q4&#x27;</span>: <span class="string">&#x27;max&#x27;</span>&#125;)<span class="comment"># 不同列，不同的计算方法</span></span><br></pre></td></tr></table></figure><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20230530143145034.png"alt="image-20230530143145034" /></p><h3 id="数据转换">3.16 数据转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)</span><br><span class="line">df.set_index(<span class="string">&#x27;name&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># df.groupby(&#x27;team&#x27;).agg(&#123;&#x27;Q1&#x27;:sum, &#x27;Q2&#x27;: &#x27;count&#x27;, &#x27;Q3&#x27;: &#x27;mean&#x27;, &#x27;Q4&#x27;: &#x27;max&#x27;&#125;)# 不同列，不同的计算方法</span></span><br><span class="line">df.groupby(<span class="string">&#x27;team&#x27;</span>).agg(&#123;<span class="string">&#x27;Q1&#x27;</span>:<span class="built_in">sum</span>, <span class="string">&#x27;Q2&#x27;</span>: <span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;Q3&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>, <span class="string">&#x27;Q4&#x27;</span>: <span class="string">&#x27;max&#x27;</span>&#125;).T<span class="comment"># T 意思为对矩阵进行转置</span></span><br></pre></td></tr></table></figure><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20230530143223579.png"alt="image-20230530143223579" /></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)</span><br><span class="line">df.set_index(<span class="string">&#x27;name&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">&#x27;team&#x27;</span>).<span class="built_in">sum</span>().stack()</span><br></pre></td></tr></table></figure><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20230530143332100.png"alt="image-20230530143332100" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)</span><br><span class="line">df.set_index(<span class="string">&#x27;name&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">&#x27;team&#x27;</span>).<span class="built_in">sum</span>().unstack()</span><br></pre></td></tr></table></figure><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20230530143411021.png"alt="image-20230530143411021" /></p><h3 id="统计分析">3.17 统计分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)</span><br><span class="line">df.set_index(<span class="string">&#x27;name&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># df.mean()# 所有行的平均值</span></span><br><span class="line"><span class="comment"># df.mean(1)# 所有列的平均值</span></span><br><span class="line"><span class="comment"># df.corr()# 列与列之间的相关关系</span></span><br><span class="line"><span class="comment"># df.count()# 每一列的非空值的个数</span></span><br><span class="line"><span class="comment"># df.max()# 每一列的最大值</span></span><br><span class="line"><span class="comment"># df.min()# 每一列的最小值</span></span><br><span class="line"><span class="comment"># df.median()# 每一列的中位数</span></span><br><span class="line"><span class="comment"># df.std()# 每一列的标准差</span></span><br><span class="line"><span class="comment"># df.var()# 方差</span></span><br><span class="line">df.mode()<span class="comment"># 众数</span></span><br></pre></td></tr></table></figure><h3 id="绘图">3.18 绘图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;team.xlsx&#x27;</span>)</span><br><span class="line">df.set_index(<span class="string">&#x27;name&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.Q1.plot()</span><br><span class="line"><span class="comment"># df.loc[&#x27;Ben&#x27;, &#x27;Q1&#x27;:&#x27;Q4&#x27;].plot()# 变化图</span></span><br><span class="line"><span class="comment"># df.loc[&#x27;Ben&#x27;, &#x27;Q1&#x27;:&#x27;Q4&#x27;].plot.bar()# 纵向柱状图</span></span><br><span class="line"><span class="comment"># df.loc[&#x27;Ben&#x27;, &#x27;Q1&#x27;:&#x27;Q4&#x27;].plot.barh()# 横向柱状图</span></span><br><span class="line"><span class="comment"># df.groupby(&#x27;team&#x27;).sum().T.plot()# 转置折线图</span></span><br><span class="line"><span class="comment"># df.groupby(&#x27;team&#x27;).sum().plot()# 折线图</span></span><br><span class="line"><span class="comment"># df.groupby(&#x27;team&#x27;).count().Q1.plot.pie()# 饼图</span></span><br></pre></td></tr></table></figure><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20230530144110880.png"alt="image-20230530144110880" /></p><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20230530144051464.png"alt="image-20230530144051464" /></p><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20230530144224563.png"alt="image-20230530144224563" /></p><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20230530144438367.png"alt="image-20230530144438367" /></p><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20230530144504476.png"alt="image-20230530144504476" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pythonpandas简介&quot;&gt;[Python]Pandas简介&lt;/h1&gt;
&lt;h2 id=&quot;pandas&quot;&gt;1. Pandas&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Python的第三方库&lt;/li&gt;
&lt;li&gt;用于数据分析</summary>
      
    
    
    
    <category term="Python" scheme="https://tresordie.github.io/categories/Python/"/>
    
    
    <category term="Pandas" scheme="https://tresordie.github.io/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Python基本语法</title>
    <link href="https://tresordie.github.io/2022/11/12/[Python]python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://tresordie.github.io/2022/11/12/[Python]python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2022-11-12T12:00:00.000Z</published>
    <updated>2022-11-13T16:54:19.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pythonpython基本语法">[Python]Python基本语法</h1><h2 id="数据类型">1. 数据类型</h2><blockquote><ol type="1"><li>数字 Number (python有复数类型：-6+4j)</li><li>字符串 String</li><li>列表 List</li><li>元组 Tuple</li><li>字典 Dictionary</li></ol></blockquote><h2 id="数字类型">2. 数字类型</h2><h3 id="类型">2.1 类型</h3><blockquote><p>int: 有符号整形</p><p>long: 长整型(可以代表八进制或十六进制)</p><p>float: 浮点数</p><p>complex: 复数</p></blockquote><h3 id="运算">2.2 运算</h3><blockquote><p>加 +</p><p>减 -</p><p>乘 *</p><p>除 /</p><p>整除 //</p><p>取模 %</p><p>乘方 **</p></blockquote><h2 id="字符串">3. 字符串</h2><h3 id="字符串内容选取">3.1 字符串内容选取</h3><ol type="1"><li>字符串的小标从 0 开始</li><li>对字符串选取[头下标：尾下标]，选取从头下标到尾下标的内容(不包含尾下标)</li><li>当下标为负数时，表示从后到前的顺序</li></ol><ul><li><p>a[1:] 表示从下标 1 到字符串最后</p></li><li><p>a[1:3] 表示从下标 1 到下标 3，但是不包含下标 3</p></li><li><p>a[:3] 表示从下标 0 开始到下标 3，但不包含下标 3</p></li><li><p>a[-1] 表示下标从后到前的第一个字符</p></li><li><p>a[1:-2] 表示从下标 1 到下标倒数第2个，但不包含倒数第2个</p></li></ul><h3 id="字符串接续">3.2 字符串接续</h3><ol type="1"><li>字符串乘法：相当于字符串复制多次</li><li>字符串加法：将相加的字符串接续起来</li></ol><h3 id="字符串替换">3.3 字符串替换</h3><h4 id="strip">3.3.1 strip()</h4><blockquote><ol type="1"><li>strip('a'): 移除字符串头尾指定的字符序列</li><li>strip(): 不指定字符即移除字符串头尾的空格</li><li>strip('ab'): 移除字符串头尾指定的字符ab, 不管顺序ab还是ba,移除头尾所有的a和b</li></ol></blockquote><h4 id="lstrip">3.3.2 lstrip()</h4><blockquote><ol type="1"><li>lstrip('a'): 移除字符串左边指定的字符序列</li><li>lstrip(): 不指定字符即移除字符串左边的空格</li><li>lstrip('ab'): 移除字符串左边指定的字符ab, 不管顺序ab还是ba,移除左边所有的a和b</li></ol></blockquote><h4 id="rstrip">3.3.3 rstrip()</h4><blockquote><ol type="1"><li>rstrip('a'): 移除字符串右边指定的字符序列</li><li>rstrip(): 不指定字符即移除字符串右边的空格</li><li>rstrip('ab'): 移除字符串右边指定的字符ab, 不管顺序ab还是ba,移除右边所有的a和b</li></ol></blockquote><h3 id="字符串的连接">3.4 字符串的连接</h3><h4 id="加法方式连接字符串">3.4.1 加法方式连接字符串</h4><blockquote><p>a = 's'</p><p>b = 'o'</p><p>c = a + b</p></blockquote><h4 id="join">3.4.2 join()</h4><blockquote><ol type="1"><li><p>join(): 将序列中的元素以指定的字符连接成一个新的字符串</p><p>str.join(sequence) --用字符串str将sequence中的各个元素连接起来</p></li></ol></blockquote><h3 id="字符查找-find">3.5 字符查找 find()</h3><blockquote><ol type="1"><li>str.find(str1, beg=0, end=len(string))<ul><li>从str中从index=0开始，到index=end结束，查找是否包含str1,并返回查找到的第一个str1的index</li><li>如果没有找到，则返回 -1</li></ul></li></ol></blockquote><h3 id="字符串比较">3.6 字符串比较</h3><blockquote><ol type="1"><li>比较符号： &gt;, ==, &lt;</li><li>逐个字符比较，返回 True/False</li></ol></blockquote><h3 id="字符串长度-len">3.7 字符串长度 len()</h3><blockquote><ol type="1"><li>len(str): 返回字符串长度</li></ol></blockquote><h3 id="字符大小写转换">3.8 字符大小写转换</h3><blockquote><ol type="1"><li>str.upper(): 将字符串全部转为大写</li><li>str.lower(): 将字符串全部转为小写</li><li>str.swapcase(): 将字符串大小写互换</li><li>str.capitalize(): 字符串首字母大写</li></ol></blockquote><h2 id="列表">4. 列表</h2><h3 id="列表的基本操作">4.1 列表的基本操作</h3><blockquote><ol type="1"><li>cmp(list1, list2): python2支持，python3开始去掉了此函数</li><li>len(list1): list的长度(元素个数)</li><li>max(list1)：list1中最大值元素</li><li>min(list1)：list1中最小值元素</li><li>list(tuple):将元组转换为列表，原来的元组不变，转换后结果返回的是列表</li></ol></blockquote><h3 id="列表常见方法">4.2 列表常见方法</h3><blockquote><ol type="1"><li>list.append(obj): 在列表末尾添加新的对象</li><li>list.count(obj): 统计某个元素在列表中出现的次数</li><li>list.extend(seq):在列表的末尾一次性追加另一个序列中的多个值(用新列表扩展原来的列表)</li><li>list.index(obj): 从列表中找出某个值第一个匹配项的索引位置</li><li>list.insert(index, obj): 将obj对象插入到列表的index位置</li><li>list.pop(obj=list[-1]):移除列表中的一个元素(默认是最后一个元素)，并且返回该元素的值</li><li>list.remove(obj): 移除列表中某个值的第一个匹配项</li><li>list.reverse(): 反向列表中元素</li><li>list.sort([func]): 对原列表进行排序<ul><li>sort()方法：list.sort(cmp = None, key = None, reverse = False)</li><li>cmp -- 可选参数, 如果指定了该参数会使用该参数的方法进行排序</li><li>key --参数key用来指定一个函数，此函数在每次元素比较时被调用，此函数代表排序的规则，也就是你按照什么规则对你的序列进行排序</li><li>key是指在每次排序前都需要按照指定的key操作一遍</li><li>reverse = False表示默认是升序排列；reverse = True表示降序排列</li></ul></li></ol></blockquote><h2 id="元组">5. 元组</h2><blockquote><ol type="1"><li>元组相当于只读列表，a=('abc', 'dc')</li><li>通过list(seq)可以将seq元组转换为列表</li></ol></blockquote><h2 id="字典">6. 字典</h2><h3 id="字典数据类型">6.1 字典数据类型</h3><blockquote><ol type="1"><li>字典数据类型就是键值对数据类型，数据的存取是通过key关键字来进行的</li><li>字典进行赋值操作后，后赋值的键值对会存在靠前的位置</li></ol></blockquote><h3 id="字典的内置函数">6.2 字典的内置函数</h3><blockquote><ol type="1"><li>len(dict1): 字典元素个数</li><li>str(dict1)：输出字典可打印的是字符串标识</li><li>type(dict1)：类型</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;miss&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;mr&#x27;</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;aiss&#x27;</span>, <span class="string">&#x27;key4&#x27;</span>: <span class="string">&#x27;smr&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dict1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(dict1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dict1))</span><br><span class="line"></span><br><span class="line">////////////////////////////////////////////</span><br><span class="line">Run &amp; Output:</span><br><span class="line">    <span class="number">2</span></span><br><span class="line">&#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;miss&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;mr&#x27;</span>&#125;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">dict</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="字典的内置方法">6.3 字典的内置方法</h3><blockquote><ol type="1"><li><p>dict.clear(): 删除字典内所有元素</p></li><li><p>dict.copy():返回一个字典的浅复制；关于浅拷贝的含义，请参考以下链接</p><p>https://zhuanlan.zhihu.com/p/54011712</p></li><li><p>dict.fromkeys(seq[], value):以序列seq中的元素做字典的键，value为字典所有键对应的初始值</p></li><li><p>dict.get(key, default=None):返回指定键的值，如果值不在字典中，则返回default</p></li><li><p>dict.has_key(key): 如果键在字典中，则返回true,否则返回false</p></li><li><p>dict.items(): 以列表形式返回可遍历的(键，值)元组数组</p></li><li><p>dict.keys(): 以列表形式返回一个字典中所有的键</p></li><li><p>dict.setdefault(key, default=None):和get()类似，但如果键已经不存在于字典中，则将添加键并将值设为default</p></li><li><p>dict.update(dict2): 把dict2的键值对更新到字典中</p></li><li><p>dict.values(): 以列表形式返回字典中所有的值</p></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pythonpython基本语法&quot;&gt;[Python]Python基本语法&lt;/h1&gt;
&lt;h2 id=&quot;数据类型&quot;&gt;1. 数据类型&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;数字 Number (python有复数类型：-6+4j</summary>
      
    
    
    
    <category term="Programming Language" scheme="https://tresordie.github.io/categories/Programming-Language/"/>
    
    
    <category term="Python" scheme="https://tresordie.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>PyQt5环境搭建(Win)</title>
    <link href="https://tresordie.github.io/2022/11/12/[PyQt5]PyQt5%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(Win)/"/>
    <id>https://tresordie.github.io/2022/11/12/[PyQt5]PyQt5%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA(Win)/</id>
    <published>2022-11-12T02:00:00.000Z</published>
    <updated>2023-01-08T02:59:28.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pyqtpyqt5-环境搭建win">[PyQt]PyQt5 环境搭建(Win)</h1><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/pyqt.png"alt="pyqt" /></p><h2 id="python3-安装">1. Python3 安装</h2><blockquote><ol type="1"><li>建议安装 Python3.10 之前的版本</li><li>安装 Python3.7.10</li></ol></blockquote><h2 id="pyqt5-安装">2. PyQt5 安装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyQt5</span><br></pre></td></tr></table></figure><h2 id="pyqt5-tool-安装">3. PyQt5 tool 安装</h2><blockquote><ol type="1"><li>安装 PyQt5 tool</li><li>将 PyQt5 tool 安装路径加入到系统环境变量</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyQt5-tools</span><br></pre></td></tr></table></figure><h2 id="安装-python-模块">4. 安装 Python 模块</h2><blockquote><ol type="1"><li><p>安装 matplotlib</p><p>pip install matplotlib</p></li></ol></blockquote><h2 id="eric6-安装">5. Eric6 安装</h2><blockquote><ol type="1"><li><p>安装 Qsci 模块</p><p>pip install QScintilla</p></li><li><p>下载 Eric6，进入到解压缩的文件夹，进行源码安装</p><p>python ./install.py</p></li><li><p>Eric6 的汉化：</p><ul><li>下载汉化文件夹到 i18n 文件夹下</li><li>将 install-i18n.py 放到 eric6 的根目录下并运行</li></ul></li></ol></blockquote><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20221113114510566.png"alt="image-20221113114510566" /></p><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20221113114557009.png"alt="image-20221113114557009" /></p><h2 id="插件安装">6. 插件安装</h2><blockquote><ol type="1"><li><p>安装 jedi 插件(自动补齐)</p><p>pip install jedi</p></li><li><p>Eric6 安装(手动安装)</p><ul><li>打开 Eric6，菜单栏选择 extra -- 插件 -- 安装插件 -- 选择下载的 jedi压缩文件进行安装</li></ul></li></ol></blockquote><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20221113115840766.png"alt="image-20221113115840766" /></p><h2 id="eric6-配置">7. Eric6 配置</h2><h3 id="编码-utf-8">7.1 编码 utf-8</h3><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20221113114816267.png"alt="image-20221113114816267" /></p><h3 id="配置-qt-及-tool-的路径">7.2 配置 Qt 及 Tool 的路径</h3><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20221113114922882.png"alt="image-20221113114922882" /></p><h3 id="配置-api">7.3 配置 API</h3><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20221113115255565.png"alt="image-20221113115255565" /></p><h3 id="auto-completion-配置">7.4 Auto-Completion 配置</h3><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20221113115445688.png"alt="image-20221113115445688" /></p><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20221113115926521.png"alt="image-20221113115926521" /></p><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20221113115951727.png"alt="image-20221113115951727" /></p><h3 id="设置工作区">7.5 设置工作区</h3><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20221113120035079.png"alt="image-20221113120035079" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pyqtpyqt5-环境搭建win&quot;&gt;[PyQt]PyQt5 环境搭建(Win)&lt;/h1&gt;
&lt;p&gt;&lt;img
src=&quot;https://raw.githubusercontent.com/Tresordie/PicBed/master/pyqt.png&quot;
al</summary>
      
    
    
    
    <category term="GUI" scheme="https://tresordie.github.io/categories/GUI/"/>
    
    
    <category term="PyQt5" scheme="https://tresordie.github.io/tags/PyQt5/"/>
    
  </entry>
  
  <entry>
    <title>Python列表</title>
    <link href="https://tresordie.github.io/2022/08/11/[Python]%E5%88%97%E8%A1%A8/"/>
    <id>https://tresordie.github.io/2022/08/11/[Python]%E5%88%97%E8%A1%A8/</id>
    <published>2022-08-11T12:00:00.000Z</published>
    <updated>2022-11-10T16:04:23.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python列表">Python列表</h1><h2 id="什么是列表">什么是列表</h2><ol type="1"><li>列表List类似于C语言中的数组，可以包含多元素且每种元素可以是多种数据类型</li><li>列表List和C语言中数组还一点类似，元素index从0开始；index为-1的元素表示的是列表中最后一个元素</li><li>List举例：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student = [<span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;simon&#x27;</span>, <span class="string">&#x27;matt&#x27;</span>, <span class="string">&#x27;richard&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="列表操作">列表操作</h2><h3 id="修改列表元素的值">1. 修改列表元素的值</h3><ul><li>指定元素的index进行赋值</li><li>当index = -1时，指的是列表中的最后一个元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表元素赋值</span></span><br><span class="line">student = [<span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;simon&#x27;</span>, <span class="string">&#x27;matt&#x27;</span>, <span class="string">&#x27;richard&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;original: &#x27;</span>, student)</span><br><span class="line">student[<span class="number">0</span>] = <span class="string">&#x27;author&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;after   : &#x27;</span>, student)</span><br></pre></td></tr></table></figure><h3 id="列表末尾添加元素append">2. 列表末尾添加元素：append</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表后面添加元素</span></span><br><span class="line">student = [<span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;simon&#x27;</span>, <span class="string">&#x27;matt&#x27;</span>, <span class="string">&#x27;richard&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;original: &#x27;</span>, student)</span><br><span class="line">student.append(<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;append  : &#x27;</span>, student)</span><br></pre></td></tr></table></figure><h3 id="列表任意位置插入元素insert">3. 列表任意位置插入元素：insert</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表任何位置添加元素</span></span><br><span class="line">student = [<span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;simon&#x27;</span>, <span class="string">&#x27;matt&#x27;</span>, <span class="string">&#x27;richard&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;original: &#x27;</span>, student)</span><br><span class="line">student.insert(<span class="number">0</span>, <span class="string">&#x27;author&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;insert  : &#x27;</span>, student)</span><br></pre></td></tr></table></figure><h3 id="列表中删除元素del-pop及remove">4. 列表中删除元素：del ,pop及remove</h3><ol type="1"><li>del：永久删除列表中任意位置元素</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除列表任何位置的元素</span></span><br><span class="line">student = [<span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;simon&#x27;</span>, <span class="string">&#x27;matt&#x27;</span>, <span class="string">&#x27;richard&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;original: &#x27;</span>, student)</span><br><span class="line"><span class="keyword">del</span> student[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;del     : &#x27;</span>, student)</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>pop：删除列表中任意位置元素同时返回删除的元素<ul><li>pop(): 此方法默认删除列表中最后一个元素</li><li>pop(index): 指定index的列表元素删除</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pop element from list</span></span><br><span class="line">student = [<span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;simon&#x27;</span>, <span class="string">&#x27;matt&#x27;</span>, <span class="string">&#x27;richard&#x27;</span>]</span><br><span class="line">pop_name = student.pop(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;pop_name: &#x27;</span>, pop_name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;pop     : &#x27;</span>, student)</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>remove：根据值删除元素，必须带参数<ul><li>remove(value)</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移除指定值的元素</span></span><br><span class="line">student = [<span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;simon&#x27;</span>, <span class="string">&#x27;matt&#x27;</span>, <span class="string">&#x27;richard&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;original: &#x27;</span>, student)</span><br><span class="line">student.remove(<span class="string">&#x27;alex&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;remove  : &#x27;</span>, student)</span><br></pre></td></tr></table></figure><h3 id="组织列表">5. 组织列表</h3><ol type="1"><li>sort方法<ul><li>默认按照从小到大的方式进行排列，如：student.sort()</li><li>永久性的改变了列表的排列顺序</li><li>可以带参数 reverse =true，进行从大到小的方式进行排列，如：student.sort(reverse=True)</li><li>sort方法必须先执行后，才能调用print打印输出sort之后的列表，不能在print内部进行sort方法调用<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sort进行排列</span></span><br><span class="line">student = [<span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;simon&#x27;</span>, <span class="string">&#x27;matt&#x27;</span>, <span class="string">&#x27;richard&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;original: &#x27;</span>, student)</span><br><span class="line">student.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sort    : &#x27;</span>, student)</span><br><span class="line">student.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sort rev: &#x27;</span>, student)</span><br></pre></td></tr></table></figure></li></ul></li><li>sorted方法<ul><li>按照特定排列顺序显示列表，如：sorted(student)，sorted(student,reverse=True)</li><li>列表中原始排列顺序不受影响<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sorted按照顺序显示，不改变原来的顺序</span></span><br><span class="line">student = [<span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;simon&#x27;</span>, <span class="string">&#x27;matt&#x27;</span>, <span class="string">&#x27;richard&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sorted      : &#x27;</span>, <span class="built_in">sorted</span>(student, reverse=<span class="literal">False</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;sorted rever: &#x27;</span>, <span class="built_in">sorted</span>(student, reverse=<span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;after sorted: &#x27;</span>, student)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="列表倒序打印reverse">6. 列表倒序打印：reverse()</h3><ol type="1"><li>reverse方法是永久性的修改列表元素的排列顺序</li><li>reverse方法必须先执行后，才能调用print打印输出reverse之后的列表，不能在print内部进行reverse</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reverse()永久性进行列表元素的顺序颠倒</span></span><br><span class="line">student = [<span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;simon&#x27;</span>, <span class="string">&#x27;matt&#x27;</span>, <span class="string">&#x27;richard&#x27;</span>]</span><br><span class="line">student.reverse()</span><br><span class="line"><span class="built_in">print</span>(student)</span><br></pre></td></tr></table></figure><h3 id="列表的长度">7. 列表的长度</h3><ol type="1"><li>列表中元素是从index = 0开始的</li><li>访问列表中元素时，如果index = -1, 则是指最后一个元素</li><li>如果列表为空，访问index = -1的元素时会出错</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reverse()永久性进行列表元素的顺序颠倒</span></span><br><span class="line">student = [<span class="string">&#x27;alex&#x27;</span>, <span class="string">&#x27;simon&#x27;</span>, <span class="string">&#x27;matt&#x27;</span>, <span class="string">&#x27;richard&#x27;</span>]</span><br><span class="line"><span class="built_in">len</span>(student)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python列表&quot;&gt;Python列表&lt;/h1&gt;
&lt;h2 id=&quot;什么是列表&quot;&gt;什么是列表&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;列表List类似于C语言中的数组，可以包含多元素且每种元素可以是多种数据类型&lt;/li&gt;
&lt;li&gt;列表List和C语言中数</summary>
      
    
    
    
    <category term="Programming Language" scheme="https://tresordie.github.io/categories/Programming-Language/"/>
    
    
    <category term="Python" scheme="https://tresordie.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>GPS Basic</title>
    <link href="https://tresordie.github.io/2022/08/03/[GPS]GPS%E7%AE%80%E4%BB%8B/"/>
    <id>https://tresordie.github.io/2022/08/03/[GPS]GPS%E7%AE%80%E4%BB%8B/</id>
    <published>2022-08-03T02:00:00.000Z</published>
    <updated>2022-09-01T12:14:35.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gps-gps简介">[GPS] GPS简介</h1><h2 id="gps基础">1.GPS基础</h2><blockquote><ol type="1"><li>GPS: Global Position System，全球定位系统</li><li>GPS工作频率: 1575MHz</li></ol></blockquote><h2 id="gps定位原理">2. GPS定位原理</h2><blockquote><ol type="1"><li>接收机的坐标及时间</li><li>卫星的坐标及时间</li><li>通过距离及时间差来计算当前接收机的坐标，从而实现定位</li></ol></blockquote><p><a href="https://zhuanlan.zhihu.com/p/58518430">GPS定位原理</a></p><h2 id="全球范围的定位系统">3. 全球范围的定位系统</h2><h3 id="美国全球定位系统gps">3.1 美国全球定位系统GPS</h3><blockquote><ol type="1"><li><p>GPS起始于1958年美国军方的一个项目，1964年投入使用。20世纪70年代，美国陆海空三军联合研制了新一代卫星定位系统GPS，截至2018年06月21日，空间段新老卫星数为32颗，其中31颗运行、1颗维护</p></li><li><p>GPS已经实现单机导航精度约为10米，综合定位的话，精度可达厘米级和毫米级。但民用领域开放的精度约为10米，开阔地带定位精度在4-7米之间</p></li><li><p>据欧盟2018年的统计、GPS占据了全球60%以上的市场份额，也有数据显示目前GPS占据全球定位市场95%的份额</p></li></ol></blockquote><h3 id="俄罗斯格洛纳斯卫星导航定位系统glonass">3.2俄罗斯格洛纳斯卫星导航定位系统GLONASS</h3><blockquote><ol type="1"><li><p>GLONASS是苏联在1976年颁布法令开始建设的，截至2018年6月21日，GLONASS系统在轨卫星26颗，其中24颗GLONASS-M处于运行状态、1颗退役卫星用于主开发商测试、1颗GLONASS-K进行飞行参数测试</p></li><li><p>格洛纳斯在设计的时候就采用频分址体制，卫星靠频率不同来区分。所以，格洛纳斯可以防止整个卫星导航系统同时被敌方干扰，具有很强的抗干扰能力</p></li><li><p>格洛纳斯定位精度为1.2米，开放服务定位精度为2-8米</p></li></ol></blockquote><h3 id="欧洲伽利略卫星导航定位系统galileo">3.3欧洲伽利略卫星导航定位系统Galileo</h3><blockquote><ol type="1"><li><p>为了确保安全，建立欧洲自己控制的民用全球导航定位系统，1999年初欧洲正式推出伽利略计划，该计划旨在建立独立于GPS和GLONASS的全球卫星导航系统</p></li><li><p>2016年12月，“伽利略”系统投入初始运行，提供初始定位、导航与授时（PNT）服务，提供PNT服务的卫星数量为11颗，至2019年5月，提供PNT服务的卫星数量增加至22颗，服务覆盖、服务性能等得到明显提升</p></li><li><p>伽利略系统可以更加实时的发送地理位置信息，这是其他卫星所没有的功能，与美国GPS对比之下，显得更安全，更可靠</p></li><li><p>伽利略系统开放服务精度民用免费开放版为1米，商用加密版为1厘米</p></li><li><p>为了独立于美国GPS，欧洲在伽利略系统的建设中可谓不遗余力，最初的预算是29亿欧元，现在已突破100亿欧元</p></li></ol></blockquote><h3 id="中国北斗卫星导航系统bds">3.4 中国北斗卫星导航系统BDS</h3><blockquote><ol type="1"><li><p>中国从1994年开始北斗一号的研制，2003年北斗一号完工，基本形成了覆盖全中国的区域导航和定位系统；2005年推进“北斗二号”系统；2009年“北斗三号”工程启动</p></li><li><p>北斗三号组网结构由3颗静止轨道卫星（GEO）、3颗倾斜轨道卫星（IGSO）、24颗中轨道卫星（MEO）组成，此外还包括5 颗试验卫星；MEO 卫星均匀分布在3个轨道面</p></li><li><p>从定位精度来看，北斗系统在全球范围内民用定位精度在10米以内，亚太地区精度在5米以内，在增强系统加持下，其定位精度可达1米，已优于GPS全球定位均在10米以内的精度水平</p></li><li><p>除了拥有和GPS一样的卫星精确定位功能以外，还具备了通讯功能，领先欧洲的伽利略、美国的GPS以及俄罗斯的格洛纳斯</p></li></ol></blockquote><h2 id="gps开发应用">4. GPS开发应用</h2><h3 id="硬件gps模块">4.1 硬件：GPS模块</h3><blockquote><ol type="1"><li>UART接口：接收GPS定位信息流</li><li>PPS信号：GPS接收机接收到UTC时间后输出的脉冲(1Hz)</li></ol></blockquote><h3 id="固件nmea-0183协议gps基本都是遵从此协议">4.2固件：NMEA-0183协议(GPS基本都是遵从此协议)</h3><blockquote><ol type="1"><li>NMEA是美国国家海洋电子协会(National Marine ElectronicsAssociation)为海用电子设备制定的标准格式，目前已经成为了GPS导航系统统一的RTCM(RadioTechnical Commission for Maritime service)标准协议</li><li>定义了接收机输出的标准信息，有几种不同的输出格式，每种都是独立相关的ASCII码格式，数据流长度从30-100字符不等，通常以每秒间隔选择输出，最常用的格式是“GGA”，它包含了定位时间，纬度，经度，高度，定位所用的卫星数，DOP值，差分状态和校正时段等</li></ol></blockquote><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/NMEA-0183.jpg"alt="NMEA-0183" /></p><h3 id="nmealib库对nmea-0183协议进行解码">4.3NMEALib库对NMEA-0183协议进行解码</h3><blockquote><ol type="1"><li>nmealib库的官方网站请参考：<br />http://nmea.sourceforge.net/#intro</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  nmea_decode_test 解码GPS模块信息</span></span><br><span class="line"><span class="comment">  * @param  无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nmea_decode_test</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> deg_lat;<span class="comment">//转换成[degree].[degree]格式的纬度</span></span><br><span class="line"><span class="keyword">double</span> deg_lon;<span class="comment">//转换成[degree].[degree]格式的经度</span></span><br><span class="line"></span><br><span class="line">    nmeaINFO info;          <span class="comment">//GPS解码后得到的信息</span></span><br><span class="line">    nmeaPARSER parser;      <span class="comment">//解码时使用的数据结构  </span></span><br><span class="line">    <span class="keyword">uint8_t</span> new_parse=<span class="number">0</span>;    <span class="comment">//是否有新的解码数据标志</span></span><br><span class="line">  </span><br><span class="line">    nmeaTIME beiJingTime;    <span class="comment">//北京时间 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置用于输出调试信息的函数 */</span></span><br><span class="line">    nmea_property()-&gt;trace_func = &amp;trace;</span><br><span class="line">    nmea_property()-&gt;error_func = &amp;error;</span><br><span class="line">    nmea_property()-&gt;info_func = &amp;gps_info;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化GPS数据结构 */</span></span><br><span class="line">    nmea_zero_INFO(&amp;info);</span><br><span class="line">    nmea_parser_init(&amp;parser);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(GPS_HalfTransferEnd)     <span class="comment">/* 接收到GPS_RBUFF_SIZE一半的数据 */</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">/* 进行nmea格式解码 */</span></span><br><span class="line">        nmea_parse(&amp;parser, (<span class="keyword">const</span> <span class="keyword">char</span>*)&amp;gps_rbuff[<span class="number">0</span>], HALF_GPS_RBUFF_SIZE, &amp;info);</span><br><span class="line">        </span><br><span class="line">        GPS_HalfTransferEnd = <span class="number">0</span>;   <span class="comment">//清空标志位</span></span><br><span class="line">        new_parse = <span class="number">1</span>;             <span class="comment">//设置解码消息标志 </span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(GPS_TransferEnd)    <span class="comment">/* 接收到另一半数据 */</span></span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">        nmea_parse(&amp;parser, (<span class="keyword">const</span> <span class="keyword">char</span>*)&amp;gps_rbuff[HALF_GPS_RBUFF_SIZE], HALF_GPS_RBUFF_SIZE, &amp;info);</span><br><span class="line">       </span><br><span class="line">        GPS_TransferEnd = <span class="number">0</span>;</span><br><span class="line">        new_parse =<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(new_parse )                <span class="comment">//有新的解码消息   </span></span><br><span class="line">      &#123;    </span><br><span class="line">        <span class="comment">/* 对解码后的时间进行转换，转换成北京时间 */</span></span><br><span class="line">        GMTconvert(&amp;info.utc,&amp;beiJingTime,<span class="number">8</span>,<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 输出解码得到的信息 */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\r\n时间%d-%02d-%02d,%d:%d:%d\r\n&quot;</span>, beiJingTime.year+<span class="number">1900</span>, beiJingTime.mon,beiJingTime.day,beiJingTime.hour,beiJingTime.min,beiJingTime.sec);</span><br><span class="line"></span><br><span class="line"><span class="comment">//info.lat lon中的格式为[degree][min].[sec/60]，使用以下函数转换成[degree].[degree]格式</span></span><br><span class="line">deg_lat = nmea_ndeg2degree(info.lat);</span><br><span class="line">deg_lon = nmea_ndeg2degree(info.lon);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\r\n纬度：%f,经度%f\r\n&quot;</span>,deg_lat,deg_lon);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\r\n海拔高度：%f 米 &quot;</span>, info.elv);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\r\n速度：%f km/h &quot;</span>, info.speed);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\r\n航向：%f 度&quot;</span>, info.direction);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\r\n正在使用的GPS卫星：%d,可见GPS卫星：%d&quot;</span>,info.satinfo.inuse,info.satinfo.inview);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\r\n正在使用的北斗卫星：%d,可见北斗卫星：%d&quot;</span>,info.BDsatinfo.inuse,info.BDsatinfo.inview);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\r\nPDOP：%f,HDOP：%f，VDOP：%f&quot;</span>,info.PDOP,info.HDOP,info.VDOP);</span><br><span class="line">        </span><br><span class="line">        new_parse = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 释放GPS数据结构 */</span></span><br><span class="line">    <span class="comment">// nmea_parser_destroy(&amp;parser);</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  return 0;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gps坐标系统转换">4.4 GPS坐标系统转换</h3><blockquote><ol type="1"><li>目前国内主要有以下三种坐标系：</li></ol><p>WGS84：为一种大地坐标系，也是目前广泛使用的GPS全球卫星定位系统使用的坐标系</p><p>GCJ02：又称火星坐标系，是由中国国家测绘局制订的地理信息系统的坐标系统。由WGS84坐标系经加密后的坐标</p><p>BD09：为百度坐标系，在GCJ02坐标系基础上再次加密。其中bd09ll表示百度经纬度坐标，bd09mc表示百度墨卡托米制坐标</p><ol start="2" type="1"><li><p>非中国地区地图，服务坐标统一使用WGS84坐标</p></li><li><p>WGS84坐标转百度地图坐标</p></li></ol><p>百度对外接口的坐标系为BD09坐标系，并不是GPS采集的真实经纬度，在使用百度地图JavaScriptAPI服务前，需先将非百度坐标通过坐标转换接口转换成百度坐标</p><p><ahref="https://lbsyun.baidu.com/index.php">https://lbsyun.baidu.com/index.php</a>?</p></blockquote><h2 id="gps模块启动方式">5. GPS模块启动方式</h2><blockquote><ol type="1"><li>冷启动</li><li>热启动</li></ol></blockquote><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/image-20220802100522248.png"alt="image-20220802100522248" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;gps-gps简介&quot;&gt;[GPS] GPS简介&lt;/h1&gt;
&lt;h2 id=&quot;gps基础&quot;&gt;1.GPS基础&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;GPS: Global Position System，全球定位系统&lt;/li&gt;
</summary>
      
    
    
    
    <category term="GPS" scheme="https://tresordie.github.io/categories/GPS/"/>
    
    
    <category term="GPS" scheme="https://tresordie.github.io/tags/GPS/"/>
    
  </entry>
  
  <entry>
    <title>VNA校准</title>
    <link href="https://tresordie.github.io/2022/05/29/VNA%E6%A0%A1%E5%87%86/"/>
    <id>https://tresordie.github.io/2022/05/29/VNA%E6%A0%A1%E5%87%86/</id>
    <published>2022-05-29T02:00:00.000Z</published>
    <updated>2022-11-10T16:07:01.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="仪器vna校准">[仪器]VNA校准</h1><h2 id="为什么需要进校准">1. 为什么需要进⾏校准？</h2><blockquote><ol type="1"><li>在所有的RF测量中，VNA测量求有最⾼的准确性及可重复性，故⽽对仪器有校准要求</li></ol></blockquote><h2 id="有哪些类型的误差源">2. 有哪些类型的误差源？</h2><blockquote><p>⼀般来讲，在VNA测量过程中⼀般有3种误差源,⽆论哪种误差，都可能造成幅度或相位不准确(即⽮量)</p><ol type="a"><li>drift errors 漂移误差</li></ol><ul><li><p>漂移误差是在校准后环境变化所造成(主要是温度变化造成的)</p></li><li><p>可以通过控制测试境且让仪器有时间预热</p></li><li><p>可以在变化的环境中执⾏新的校准来消除漂移误差</p></li></ul><p><font color ='red'>[总结]即使采取上述的措施,也不可能完全的消除漂移误差，也只能是尽可能的减⼩漂移误差</font></p><ol start="2" type="a"><li>random errors 随机误差</li></ol><ul><li><p>随机误差主要是由测试环境搭建引起的(设备噪⾳，测量操作，cables/connector等等)</p></li><li><p>随机误差随时间推移⽽变化，不可重复且不可预料</p></li><li><p>可以通过⾼精度仪器以及好的操作实践可以最⼤化的减⼩随机误差，但是⽆法消除</p></li></ul><ol start="3" type="a"><li>systematic errors 系统误差</li></ol><ul><li><p>系统误差是可重复，可预测且不会随时间发⽣变化</p></li><li><p>还有⼀部分原因是VNA及测试设置中有⼀些⾮理想器件引起(VNA中的缺陷，e.g.,例如定向耦合器的⽅向 性不完整；还有Cable loss；阻抗不匹配)</p></li><li><p>系统误差⼏乎完全可以通过校准的⽅式消除</p></li></ul></blockquote><h2 id="什么是calibration">3. 什么是Calibration?</h2><blockquote><ol type="a"><li><p>Calibration的⽬的是从测量结果中剔除系统误差</p></li><li><p>校准的步骤：</p></li></ol><p>​ (1) 基于测量环境的搭建及期望的结果来选择校准类型</p><p>​ (2) 连接校准标准件到相应的位置</p><p>​ (3) 运⾏校准程序并测量响应(通常需要进⾏多个步骤的操作)</p><p>​ (4) 测量DUT时，校准数据被⽤于纠正测量结果</p></blockquote><h2 id="measurement-calibration-vs-instrument-calibration">4.Measurement calibration VS Instrument calibration</h2><blockquote><ol type="a"><li><p>Measurementcalibration是⽤于消除测量的系统误差，由⽤户⾃⾏校准(会频繁使⽤)</p></li><li><p>Instrumentcalibration⽤于设备的校准，主要是为了鉴定仪器是否是以其⾃身spec运⾏的，⽐如我想要仪器输出10dBm，那么⽤户控制仪器输出10dBm时，仪器实 际上是否输出了10dBm.⼀般情况下都是由专⻔的服务机构或者校准中⼼执⾏校准的，可能间隔⼏年才校准⼀次</p></li></ol></blockquote><h2 id="calibration-or-reference-plane校准或参考平">5. Calibration orreference plane(校准或参考平⾯)</h2><blockquote><ol type="a"><li><p>校准平⾯或者参考平⾯是在校准时才考虑的</p></li><li><p>校准时，DUT不能直接连接到VNA的ports</p></li><li><p>校准时要避免所有对校准或者参考平⾯的影响</p></li></ol></blockquote><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/VNA%20reference%20plane.png" /></p><h2 id="校准标准件">6. 校准标准件</h2><blockquote><ol type="a"><li><p>校准标准件⼀般需要单独购买，其收集在⼀个校准套件⾥⾯</p></li><li><p>校准套件是⼀套⾼精度且已知幅度和相位响应的终端或者耦合器</p></li></ol><p>​ (1) 标准间数据包含在校准套件定义的⽂件中</p><p>​ (2) 定义通常是预加载到仪器端，或者通过USB或者其其它接⼝导⼊</p><ol start="3" type="a"><li>标准件被连接到校准或参考平⾯，在校准过程中进⾏测量</li></ol></blockquote><h2 id="常的校准标准及说明">7. 常⽤的校准标准及说明</h2><blockquote><ol type="a"><li>4种最常⽤的校准标准</li></ol><ul><li><p>Through(T)</p></li><li><p>Open(O)</p></li><li><p>Short(S)</p></li><li><p>Match(M) 也叫 Load</p></li></ul><ol start="2" type="a"><li>校准说明</li></ol><p>​ (1)现实中的校准套件并不是理想的，特别是在⼀个宽频率范围(⽐如在100MHz以上的开路电容就会增加，所以不同开路套件测出的值会有差别，所以需要对此标准需要有专⻔的数据描述)</p><p>​ (2) 特定的校准标准需要有数据进⾏描述说明</p></blockquote><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/VNA%20Through%20standard.png"alt="VNA Through standard" /></p><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/VNA%20ECal.png"alt="VNA ECal" /></p><h2 id="校准单元">8. 校准单元</h2><blockquote><ol type="a"><li><p>校准套件有常规的分⽴器件的校准套件或者是集成了多种校准⽅式的T型校准件(1个T型件包含了Open/Short/Through/Match校准)</p></li><li><p>还有⾃动校准器</p></li></ol><p>​ (1) ⾃动校准器中包含了校准标准件，在校准过程中内部电控切换，通常是可以被VNA控制(通常是通过USB)</p><p>​ (2)内部标准件⽤于校准的数据被存储在⾃动校准单元⾥⾯，可以被VAN读取</p><p>​ (3) ⾃动校准的引⼊最⼩化了操作⼈员的介⼊，且校准过程叫⼈⼯校准更快，更少有机会有操作失误(如连接错误的校准件)，相对于分⽴校准件，其磨损程度更⼩</p></blockquote><h2 id="什么是校准类型">9. 什么是校准类型</h2><blockquote><ol type="a"><li>校准类型定义了我们需要连接哪些校准标准件</li></ol></blockquote><h2 id="校准类型的选择的考虑因素">10. 校准类型的选择的考虑因素</h2><blockquote><p>校准类型基于⼀下因素来选择：</p><ol type="a"><li><p>端⼝数量</p></li><li><p>测量的⽅向性</p></li><li><p>要求的准确等级</p></li><li><p>时间要求</p></li><li><p>可⽤的校准标准件</p></li></ol></blockquote><h2 id="校准类型">11. 校准类型</h2><blockquote><ol type="a"><li><p>Reﬂection Normalization - 反射归⼀化</p></li><li><p>Full One Port Calibration(OSM) - 全⼀端⼝校准</p></li><li><p>Transmission Normalization - 传输归⼀化</p></li><li><p>One Path Two Port Calibration - 两端⼝⼀个通路校准</p></li><li><p>Full Two Port Calibration(TOSM) - 两端⼝全校准</p></li><li><p>Full Two Port Calibration(UOSM) - 两端⼝全校准</p></li></ol></blockquote><h2 id="one-port-calibration单端校准">12. One PortCalibration(单端⼝校准)</h2><blockquote><ol type="a"><li>⽤于反射测量的单端⼝校准</li></ol><ol type="1"><li>Full one-port calibration(OSM - Open/Short/Match)</li></ol><ul><li>校准速度慢，但是有更⾼的精度</li><li>要求open, short, match校准</li></ul><ol start="2" type="1"><li>归⼀化校准</li></ol><ul><li><p>校准速度更快，但是精确度低</p></li><li><p>只需要⼀次校准，Open或者Short校准</p></li></ul></blockquote><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/VNA%20Calibration.png"alt="VNA Calibration" /></p><h2 id="two-port-calibration双端校准">13. Two portcalibration(双端⼝校准)</h2><blockquote><ol type="a"><li><p>双端⼝校准适⽤于传输测量</p></li><li><p>校准⽅式</p></li></ol><ul><li><p>Normalization 归⼀化校准</p><ol type="1"><li><p>需要连接Through</p></li><li><p>可以进⾏单向或者双向校准</p></li></ol></li><li><p>One path two ports 双端⼝单向</p><ol type="1"><li>Full one-port OSM(Open/Short/Match) + Transmission normalization—&gt; 适合单向传输</li></ol></li><li><p>Full two port calibration 双端⼝全校准</p><ul><li><p>TOSM: Through Open/Short/Match</p><ol type="1"><li><p>TOSM(Through/Open/Short/Match)：双端⼝校准中最常⽤的校准</p></li><li><p>应⽤场合为: ①双端⼝的反射测量. ②双向传输测量 I</p></li><li><p>校准步骤要求：需要进⾏8次扫描①每个端⼝都要进⾏单端⼝的OSM(Open/Short/Match)标准件扫描，这就相当于6次了②双向的Through标准件测试，这就相当于两次了</p></li><li><p>校准完成后，就可以进⾏S参数的测量了;TOSM校准的弱点在于校准使⽤的时间较⻓，需要8次扫描才能完成，如上描述.</p></li></ol></li><li><p>UOSM: Unknown Open/Short/Match</p><ol type="1"><li><p>通常使⽤⼀个通⽤的RFcoupler来取代校准套件中的Through标准件</p></li><li><p>UOSM有⼀个特征是：双向特征完全相同，即S 21 == S12</p></li><li><p>UOSM对于有着不同类型的接头是有帮助的，如⼀端为SMA接⼝，另⼀端为不同类型接⼝</p></li></ol></li></ul></li></ul></blockquote><h2 id="isolation-measurement-校准法">14. Isolation measurement校准⽅法</h2><blockquote><ol type="a"><li><p>Isolation measurement ⽅法是对 Through calibration校准的补充</p></li><li><p>Isolation measurement⽅法主要是是测量通道信号泄漏及对相邻通道的串扰</p></li><li><p>Isolation measurement 没有相应的物理校准标准</p></li><li><p>通常的校准⽅法是在测试端⼝终端出接 50ohm 的终端负载</p></li><li><p>在绝⼤多书的VNA的测量中，这种错误(泄漏及串扰)并不是⼀个重⼤的错误源</p></li></ol></blockquote><h2 id="什么时候需要进户校准">15. 什么时候需要进⾏⽤户校准</h2><blockquote><ol type="a"><li><p>⽤户重新设置了频率范围</p></li><li><p>对于DUT的连接发⽣了变化(如，RF CableLength发⽣了变化，Adaptor等等发⽣了变化)</p></li><li><p>使⽤的VNA port发⽣了变化</p></li></ol></blockquote><p>[参考] 罗德施瓦茨的VNA校准介绍</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;仪器vna校准&quot;&gt;[仪器]VNA校准&lt;/h1&gt;
&lt;h2 id=&quot;为什么需要进校准&quot;&gt;1. 为什么需要进⾏校准？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;在所有的RF测量中，
VNA测量求有最⾼的准确性及可重复性，故⽽对仪器</summary>
      
    
    
    
    <category term="硬件" scheme="https://tresordie.github.io/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="VNA" scheme="https://tresordie.github.io/tags/VNA/"/>
    
  </entry>
  
  <entry>
    <title>wav音频文件解析</title>
    <link href="https://tresordie.github.io/2022/05/22/[Audio]wav%E9%9F%B3%E9%A2%91%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <id>https://tresordie.github.io/2022/05/22/[Audio]wav%E9%9F%B3%E9%A2%91%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</id>
    <published>2022-05-22T02:00:00.000Z</published>
    <updated>2022-09-01T12:14:35.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="audiowav文件解析">[Audio]wav文件解析</h1><h2 id="wav文件介绍">1. wav文件介绍</h2><blockquote><ol type="1"><li>微软专门为Windows定义的</li><li>符合RIFF文件规范</li><li>支持MSADPCM，CCITT A LAW算法，采样率为44.1KHz</li><li>一般采用线性PCM编码</li></ol></blockquote><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/wav.jpg" /></p><h2 id="wav文件的格式">2. wav文件的格式</h2><blockquote><ol type="1"><li>wav帧是有两部分组成：Chunk和数据<ul><li>Chunk里面包含了各种类型Chunk的信息，类型Chunk中还包括了音频数据的大小，音频通道数，音频格式，采样率等等信息</li><li>数据部分则为raw data</li></ul></li><li>Chunk又有以下类型的Chunk，Chunk中的具体信息参考以上的思维导图<ul><li>RIFF Wave Chunk</li><li>Format Chunk</li><li>Fact Chunk</li><li>Data Chunk</li></ul></li><li>Chunk以及数据格式，以下截图是将wav文件以二进制方式打开，内部所含的格式信息，可以和思维导图中各个Chunk的数据结构进行对比，以加深理解</li></ol></blockquote><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/wavBinary.jpg" /></p><h2 id="wav文件c语言解析">3. wav文件C语言解析</h2><h3 id="wav数据结构">3.1 wav数据结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* RIFF块 */</span></span><br><span class="line"><span class="keyword">typedef</span> __packed <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> ChunkID;               <span class="comment">//chunk id固定为&quot;RIFF&quot;,即0X46464952</span></span><br><span class="line">    <span class="keyword">uint32_t</span> ChunkSize ;            <span class="comment">//集合大小=文件总大小-8</span></span><br><span class="line">    <span class="keyword">uint32_t</span> Format;                <span class="comment">//格式;WAVE,即0X45564157</span></span><br><span class="line">&#125; ChunkRIFF;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* fmt块 */</span></span><br><span class="line"><span class="keyword">typedef</span> __packed <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> ChunkID;               <span class="comment">//chunk id;这里固定为&quot;fmt &quot;,即0X20746D66</span></span><br><span class="line">    <span class="keyword">uint32_t</span> ChunkSize ;            <span class="comment">//子集合大小(不包括ID和Size);这里为:20.</span></span><br><span class="line">    <span class="keyword">uint16_t</span> AudioFormat;           <span class="comment">//音频格式;0X01,表示线性PCM;0X11表示IMA ADPCM</span></span><br><span class="line">    <span class="keyword">uint16_t</span> NumOfChannels;         <span class="comment">//通道数量;1,表示单声道;2,表示双声道;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> SampleRate;            <span class="comment">//采样率;0X1F40,表示8Khz</span></span><br><span class="line">    <span class="keyword">uint32_t</span> ByteRate;              <span class="comment">//字节速率;</span></span><br><span class="line">    <span class="keyword">uint16_t</span> BlockAlign;            <span class="comment">//块对齐(字节);</span></span><br><span class="line">    <span class="keyword">uint16_t</span> BitsPerSample;         <span class="comment">//单个采样数据大小;4位ADPCM,设置为4</span></span><br><span class="line">    <span class="keyword">uint16_t</span> ByteExtraData;         <span class="comment">//附加的数据字节;2个; 线性PCM,没有这个参数</span></span><br><span class="line">&#125; ChunkFMT;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* fact块 */</span></span><br><span class="line"><span class="keyword">typedef</span> __packed <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> ChunkID;               <span class="comment">//chunk id;这里固定为&quot;fact&quot;,即0X74636166;线性PCM没有这个部分</span></span><br><span class="line">    <span class="keyword">uint32_t</span> ChunkSize ;            <span class="comment">//子集合大小(不包括ID和Size);这里为:4.</span></span><br><span class="line">    <span class="keyword">uint32_t</span> FactSize;              <span class="comment">//转换成PCM的文件大小;</span></span><br><span class="line">&#125; ChunkFACT;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* LIST块 */</span></span><br><span class="line"><span class="keyword">typedef</span> __packed <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> ChunkID;               <span class="comment">//chunk id;这里固定为&quot;LIST&quot;,即0X74636166;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> ChunkSize ;            <span class="comment">//子集合大小(不包括ID和Size);这里为:4.</span></span><br><span class="line">&#125; ChunkLIST;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* data块 */</span></span><br><span class="line"><span class="keyword">typedef</span> __packed <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> ChunkID;               <span class="comment">//chunk id;这里固定为&quot;data&quot;,即0X5453494C</span></span><br><span class="line">    <span class="keyword">uint32_t</span> ChunkSize ;            <span class="comment">//子集合大小(不包括ID和Size)</span></span><br><span class="line">&#125; ChunkDATA;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* wav头 */</span></span><br><span class="line"><span class="keyword">typedef</span> __packed <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ChunkRIFF riff;                 <span class="comment">//riff块</span></span><br><span class="line">    ChunkFMT fmt;                   <span class="comment">//fmt块</span></span><br><span class="line">    ChunkFACT fact;                 <span class="comment">//fact块 线性PCM,没有这个结构体</span></span><br><span class="line">    ChunkDATA data;                 <span class="comment">//data块</span></span><br><span class="line">&#125; __WaveHeader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* wav播放控制结构体 */</span></span><br><span class="line"><span class="keyword">typedef</span> __packed <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint16_t</span> audioformat;           <span class="comment">//音频格式;0X01,表示线性PCM;0X11表示IMA ADPCM</span></span><br><span class="line">    <span class="keyword">uint16_t</span> nchannels;             <span class="comment">//通道数量;1,表示单声道;2,表示双声道;</span></span><br><span class="line">    <span class="keyword">uint16_t</span> blockalign;            <span class="comment">//块对齐(字节);</span></span><br><span class="line">    <span class="keyword">uint32_t</span> datasize;              <span class="comment">//WAV数据大小</span></span><br><span class="line">    <span class="keyword">uint32_t</span> totsec ;               <span class="comment">//整首歌时长,单位:秒</span></span><br><span class="line">    <span class="keyword">uint32_t</span> cursec ;               <span class="comment">//当前播放时长</span></span><br><span class="line">    <span class="keyword">uint32_t</span> bitrate;               <span class="comment">//比特率(位速)</span></span><br><span class="line">    <span class="keyword">uint32_t</span> samplerate;            <span class="comment">//采样率</span></span><br><span class="line">    <span class="keyword">uint16_t</span> bps;                   <span class="comment">//位数,比如16bit,24bit,32bit</span></span><br><span class="line">    <span class="keyword">uint32_t</span> datastart;             <span class="comment">//数据帧开始的位置(在文件里面的偏移)</span></span><br><span class="line">&#125; wavctrl;</span><br></pre></td></tr></table></figure><h3 id="wav解析函数">3.2 wav解析函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">__align(<span class="number">8</span>) <span class="keyword">uint8_t</span> WaveFileBuf[WAVEFILEBUFSIZE];</span><br><span class="line">__align(<span class="number">8</span>) <span class="keyword">uint8_t</span> TempBuf[WAVEFILEBUFSIZE / <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief                   Decode wav audio file</span></span><br><span class="line"><span class="comment"> * @param  fname            wav audio path string</span></span><br><span class="line"><span class="comment"> * @param  wavx             wav audio data structure pointer</span></span><br><span class="line"><span class="comment"> * @return uint8_t          0: decode successfully; others: failed to decode</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">wave_decode_init</span><span class="params">(<span class="keyword">char</span> *fname, wavctrl *wavx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> br = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">uint8_t</span> res = <span class="number">0</span>;</span><br><span class="line">    ChunkRIFF *riff;</span><br><span class="line">    ChunkFMT *fmt;</span><br><span class="line">    ChunkFACT *fact;</span><br><span class="line">    ChunkDATA *data;</span><br><span class="line">    res = f_open(&amp;WavFile, (TCHAR *)fname, FA_READ);                     <span class="comment">//打开文件</span></span><br><span class="line">    <span class="keyword">if</span> (res == FR_OK) &#123;</span><br><span class="line">        NeedCloseFile = <span class="number">1</span>;</span><br><span class="line">        f_read(&amp;WavFile, TempBuf, WAVEFILEBUFSIZE / <span class="number">2</span>, &amp;br);      <span class="comment">//读取WAVEFILEBUFSIZE/2字节数据</span></span><br><span class="line">        riff = (ChunkRIFF *)TempBuf;                                                    <span class="comment">//获取RIFF块</span></span><br><span class="line">        <span class="keyword">if</span> (riff-&gt;Format == <span class="number">0x45564157</span>) &#123;                                               <span class="comment">//是否为wav格式的文件</span></span><br><span class="line">            fmt = (ChunkFMT *)(TempBuf + <span class="number">12</span>);                                           <span class="comment">//Format Chunk起始地址</span></span><br><span class="line">            <span class="keyword">if</span> (fmt-&gt;AudioFormat == <span class="number">1</span> || fmt-&gt;AudioFormat == <span class="number">3</span>) &#123;                       <span class="comment">//线性PCM或32位WAVE=3</span></span><br><span class="line">                fact = (ChunkFACT *)(TempBuf + <span class="number">12</span> + <span class="number">8</span> + fmt-&gt;ChunkSize);                <span class="comment">//定位到Fact Chunk起始位置</span></span><br><span class="line">                <span class="keyword">if</span> (fact-&gt;ChunkID == <span class="number">0x74636166</span> || fact-&gt;ChunkID == <span class="number">0x5453494C</span>)         <span class="comment">//定位Data Chunk数据块的起始位置</span></span><br><span class="line">                    wavx-&gt;datastart = <span class="number">12</span> + <span class="number">8</span> + fmt-&gt;ChunkSize + <span class="number">8</span> + fact-&gt;ChunkSize;    <span class="comment">//具有fact/LIST块的时候(未测试)</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    wavx-&gt;datastart = <span class="number">12</span> + <span class="number">8</span> + fmt-&gt;ChunkSize;</span><br><span class="line">                data = (ChunkDATA *)(TempBuf + wavx-&gt;datastart);</span><br><span class="line">                <span class="keyword">if</span> (data-&gt;ChunkID == <span class="number">0x61746164</span>) &#123;                                      <span class="comment">//读取DATA块成功</span></span><br><span class="line">                    wavx-&gt;audioformat = fmt-&gt;AudioFormat;                               <span class="comment">//音频格式</span></span><br><span class="line">                    wavx-&gt;nchannels   = fmt-&gt;NumOfChannels;                             <span class="comment">//通道数</span></span><br><span class="line">                    wavx-&gt;samplerate  = fmt-&gt;SampleRate;                                <span class="comment">//采样率</span></span><br><span class="line">                    wavx-&gt;bitrate     = fmt-&gt;ByteRate * <span class="number">8</span>;                              <span class="comment">//位速率 = 通道数×每秒数据位数×每样本的数据位数</span></span><br><span class="line">                    wavx-&gt;blockalign  = fmt-&gt;BlockAlign;                                <span class="comment">//块对齐 = 通道数×每样本的数据位值／8</span></span><br><span class="line">                    wavx-&gt;bps         = fmt-&gt;BitsPerSample;                             <span class="comment">//位数,8/16/24/32位</span></span><br><span class="line">                    wavx-&gt;datasize    = data-&gt;ChunkSize;                                <span class="comment">//音频数据块大小</span></span><br><span class="line">                    wavx-&gt;datastart   = wavx-&gt;datastart + <span class="number">8</span>;                            <span class="comment">//数据流开始的地方.</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;wavx-&gt;audioformat:%d\r\n&quot;</span>, wavx-&gt;audioformat);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;wavx-&gt;nchannels:%d\r\n&quot;</span>, wavx-&gt;nchannels);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;wavx-&gt;samplerate:%d\r\n&quot;</span>, wavx-&gt;samplerate);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;wavx-&gt;bitrate:%d\r\n&quot;</span>, wavx-&gt;bitrate);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;wavx-&gt;blockalign:%d\r\n&quot;</span>, wavx-&gt;blockalign);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;wavx-&gt;bps:%d\r\n&quot;</span>, wavx-&gt;bps);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;wavx-&gt;datasize:%d\r\n&quot;</span>, wavx-&gt;datasize);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;wavx-&gt;datastart:%d\r\n&quot;</span>, wavx-&gt;datastart);</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    res = <span class="number">4</span>;                                                                                                <span class="comment">//data区域未找到.</span></span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                res = <span class="number">3</span>;                                                                                                    <span class="comment">//非线性PCM，不支持</span></span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            res = <span class="number">2</span>;                                                                                                            <span class="comment">//非wav文件</span></span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        res = <span class="number">1</span>;                                                                                                                <span class="comment">//打开文件错误</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="wav-raw-data起始位置">3.3 wav raw data起始位置</h3><blockquote><ol type="1"><li>在获取了Data Chunk的起始位置后，真正的原始数据起始位置为DataChunk起始位置向右偏移8个字节(即为DataChunk的ChunkID占4个字节，ChunkSize占4个字节)</li></ol></blockquote><h2 id="wav音频文件进行播放">4. wav音频文件进行播放</h2><blockquote><ol type="1"><li><p>解析完wav文件后，可以定位wav文件raw data的起始位置</p></li><li><p>从raw data起始位置开始，发送数据到DAC接口进行播放</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f_lseek(&amp;WavFile, WaveCtrlData.datastart)</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;audiowav文件解析&quot;&gt;[Audio]wav文件解析&lt;/h1&gt;
&lt;h2 id=&quot;wav文件介绍&quot;&gt;1. wav文件介绍&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;微软专门为Windows定义的&lt;/li&gt;
&lt;li&gt;符合RI</summary>
      
    
    
    
    <category term="Audio" scheme="https://tresordie.github.io/categories/Audio/"/>
    
    
    <category term="wav" scheme="https://tresordie.github.io/tags/wav/"/>
    
  </entry>
  
  <entry>
    <title>FatFS移植总结</title>
    <link href="https://tresordie.github.io/2022/04/04/[fs]FatFS%E7%A7%BB%E6%A4%8D%E6%80%BB%E7%BB%93/"/>
    <id>https://tresordie.github.io/2022/04/04/[fs]FatFS%E7%A7%BB%E6%A4%8D%E6%80%BB%E7%BB%93/</id>
    <published>2022-04-04T11:00:00.000Z</published>
    <updated>2022-09-01T12:14:35.806Z</updated>
    
    <content type="html"><![CDATA[<p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/FatFS%E7%A7%BB%E6%A4%8D%E5%AF%BC%E5%9B%BE.png"alt="FatFS移植导图" /></p><h1 id="fsfatfs-移植总结">[fs]FatFS 移植总结</h1><h2 id="获取源码">1. 获取源码</h2><blockquote><ol type="1"><li><p>下载源码</p><p>http://elm-chan.org/fsw/ff/archives.html</p></li><li><p>添加以下文件到工程中</p><ul><li>diskio.c</li><li>diskio.h</li><li>ff.c</li><li>ff.h</li><li>ffconf.h</li></ul></li></ol></blockquote><h2 id="ffconfig.h-中宏配置">2. ffconfig.h 中宏配置</h2><blockquote><ol type="1"><li><p>存储媒介文件系统格式化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_USE_MKFS     1</span></span><br><span class="line"><span class="comment">/* This option switches f_mkfs() function. (0:Disable or 1:Enable) */</span></span><br></pre></td></tr></table></figure></li><li><p>字符串功能函数使能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_USE_STRFUNC  1</span></span><br></pre></td></tr></table></figure></li><li><p>字体编码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_CODE_PAGE    936</span></span><br><span class="line"><span class="comment">/* This option specifies the OEM code page to be used on the target system.</span></span><br><span class="line"><span class="comment">/  Incorrect code page setting can cause a file open failure.</span></span><br><span class="line"><span class="comment">/</span></span><br><span class="line"><span class="comment">/   437 - U.S.</span></span><br><span class="line"><span class="comment">/   720 - Arabic</span></span><br><span class="line"><span class="comment">/   737 - Greek</span></span><br><span class="line"><span class="comment">/   771 - KBL</span></span><br><span class="line"><span class="comment">/   775 - Baltic</span></span><br><span class="line"><span class="comment">/   850 - Latin 1</span></span><br><span class="line"><span class="comment">/   852 - Latin 2</span></span><br><span class="line"><span class="comment">/   855 - Cyrillic</span></span><br><span class="line"><span class="comment">/   857 - Turkish</span></span><br><span class="line"><span class="comment">/   860 - Portuguese</span></span><br><span class="line"><span class="comment">/   861 - Icelandic</span></span><br><span class="line"><span class="comment">/   862 - Hebrew</span></span><br><span class="line"><span class="comment">/   863 - Canadian French</span></span><br><span class="line"><span class="comment">/   864 - Arabic</span></span><br><span class="line"><span class="comment">/   865 - Nordic</span></span><br><span class="line"><span class="comment">/   866 - Russian</span></span><br><span class="line"><span class="comment">/   869 - Greek 2</span></span><br><span class="line"><span class="comment">/   932 - Japanese (DBCS)</span></span><br><span class="line"><span class="comment">/   936 - Simplified Chinese (DBCS)</span></span><br><span class="line"><span class="comment">/   949 - Korean (DBCS)</span></span><br><span class="line"><span class="comment">/   950 - Traditional Chinese (DBCS)</span></span><br><span class="line"><span class="comment">/     0 - Include all code pages above and configured by f_setcp()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>长文件名支持</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_USE_LFN      2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_MAX_LFN      255</span></span><br><span class="line"><span class="comment">/* The FF_USE_LFN switches the support for LFN (long file name).</span></span><br></pre></td></tr></table></figure></li><li><p>文件名大小缓存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_LFN_BUF      255</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_SFN_BUF      12</span></span><br><span class="line"><span class="comment">/* This set of options defines size of file name members in the FILINFO structure</span></span><br><span class="line"><span class="comment">/  which is used to read out directory items. These values should be suffcient for</span></span><br><span class="line"><span class="comment">/  the file names to read. The maximum possible length of the read file name depends</span></span><br><span class="line"><span class="comment">/  on character encoding. When LFN is not enabled, these options have no effect. */</span></span><br></pre></td></tr></table></figure></li><li><p>磁盘卷数量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_VOLUMES      1</span></span><br><span class="line"><span class="comment">/* Number of volumes (logical drives) to be used. (1-10) */</span></span><br></pre></td></tr></table></figure></li><li><p>卷 ID</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_STR_VOLUME_ID    0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_VOLUME_STRS      <span class="meta-string">&quot;RAM&quot;</span>,<span class="meta-string">&quot;NAND&quot;</span>,<span class="meta-string">&quot;CF&quot;</span>,<span class="meta-string">&quot;SD&quot;</span>,<span class="meta-string">&quot;SD2&quot;</span>,<span class="meta-string">&quot;USB&quot;</span>,<span class="meta-string">&quot;USB2&quot;</span>,<span class="meta-string">&quot;USB3&quot;</span></span></span><br><span class="line"><span class="comment">/* FF_STR_VOLUME_ID switches support for volume ID in arbitrary strings.</span></span><br><span class="line"><span class="comment">/  When FF_STR_VOLUME_ID is set to 1 or 2, arbitrary strings can be used as drive</span></span><br><span class="line"><span class="comment">/  number in the path name. FF_VOLUME_STRS defines the volume ID strings for each</span></span><br><span class="line"><span class="comment">/  logical drives. Number of items must not be less than FF_VOLUMES. Valid</span></span><br><span class="line"><span class="comment">/  characters for the volume ID strings are A-Z, a-z and 0-9, however, they are</span></span><br><span class="line"><span class="comment">/  compared in case-insensitive. If FF_STR_VOLUME_ID &gt;= 1 and FF_VOLUME_STRS is</span></span><br><span class="line"><span class="comment">/  not defined, a user defined volume string table needs to be defined as:</span></span><br><span class="line"><span class="comment">/</span></span><br><span class="line"><span class="comment">/  const char* VolumeStr[FF_VOLUMES] = &#123;&quot;ram&quot;,&quot;flash&quot;,&quot;sd&quot;,&quot;usb&quot;,...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>Sector Size 设定</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_MIN_SS       512</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_MAX_SS       4096</span></span><br><span class="line"><span class="comment">/* This set of options configures the range of sector size to be supported. (512,</span></span><br><span class="line"><span class="comment">/  1024, 2048 or 4096) Always set both 512 for most systems, generic memory card and</span></span><br><span class="line"><span class="comment">/  harddisk, but a larger value may be required for on-board flash memory and some</span></span><br><span class="line"><span class="comment">/  type of optical media. When FF_MAX_SS is larger than FF_MIN_SS, FatFs is configured</span></span><br><span class="line"><span class="comment">/  for variable sector size mode and disk_ioctl() function needs to implement</span></span><br><span class="line"><span class="comment">/  GET_SECTOR_SIZE command. */</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="diskio.c-中函数实现">3. diskio.c 中函数实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-----------------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* Low level disk I/O module SKELETON for FatFs     (C)ChaN, 2019        */</span></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* If a working storage control module is available, it should be        */</span></span><br><span class="line"><span class="comment">/* attached to the FatFs via a glue function rather than modifying it.   */</span></span><br><span class="line"><span class="comment">/* This is an example of glue functions to attach various exsisting      */</span></span><br><span class="line"><span class="comment">/* storage control modules to the FatFs module with a defined API.       */</span></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ff.h&quot;</span>         <span class="comment">/* Obtains integer types */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;diskio.h&quot;</span>     <span class="comment">/* Declarations of disk functions */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_sdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;string.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Definitions of physical drive number for each drive */</span></span><br><span class="line"><span class="comment">//#define DEV_RAM       0   /* Example: Map Ramdisk to physical drive 0 */</span></span><br><span class="line"><span class="comment">//#define DEV_MMC       1   /* Example: Map MMC/SD card to physical drive 1 */</span></span><br><span class="line"><span class="comment">//#define DEV_USB       2   /* Example: Map USB MSD to physical drive 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEV_SDCARD      0   <span class="comment">/* SDCard used for Volume 0 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEV_SPIFLASH    1   <span class="comment">/* SPI Flash used for Volume 1 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_BLOCKSIZE    512</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* Get Drive Status                                                      */</span></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">DSTATUS <span class="title">disk_status</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    BYTE pdrv       <span class="comment">/* Physical drive nmuber to identify the drive */</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DSTATUS stat = STA_NOINIT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (pdrv) &#123;</span><br><span class="line">    <span class="keyword">case</span> DEV_SDCARD:</span><br><span class="line">        stat &amp;= ~STA_NOINIT;    <span class="comment">/* set bit0 to 0 */</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> DEV_SPIFLASH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        stat = STA_NOINIT;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* Inidialize a Drive                                                    */</span></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">DSTATUS <span class="title">disk_initialize</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    BYTE pdrv               <span class="comment">/* Physical drive nmuber to identify the drive */</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DSTATUS stat = STA_NOINIT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (pdrv) &#123;</span><br><span class="line">    <span class="keyword">case</span> DEV_SDCARD :</span><br><span class="line">        <span class="keyword">if</span> (SD_OK == SD_Init()) &#123;</span><br><span class="line">            stat &amp;= ~STA_NOINIT;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stat = STA_NOINIT;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> DEV_SPIFLASH :</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        stat = STA_NOINIT;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* Read Sector(s)                                                        */</span></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">DRESULT <span class="title">disk_read</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    BYTE pdrv,      <span class="comment">/* Physical drive nmuber to identify the drive */</span></span></span></span><br><span class="line"><span class="params"><span class="function">    BYTE *buff,     <span class="comment">/* Data buffer to store read data */</span></span></span></span><br><span class="line"><span class="params"><span class="function">    LBA_t sector,   <span class="comment">/* Start sector in LBA */</span></span></span></span><br><span class="line"><span class="params"><span class="function">    UINT count      <span class="comment">/* Number of sectors to read */</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DRESULT result = RES_PARERR;</span><br><span class="line">    SD_Error SD_State = SD_OK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (pdrv) &#123;</span><br><span class="line">    <span class="keyword">case</span> DEV_SDCARD :</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* BYTE pointer buff is not aligned with 4 bytes */</span></span><br><span class="line">        <span class="keyword">if</span> ((DWORD)buff &amp; <span class="number">3</span>) &#123;</span><br><span class="line">            DRESULT res = RES_OK;</span><br><span class="line">            DWORD scratch[SD_BLOCKSIZE / <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (count--) &#123;</span><br><span class="line">                res = disk_read(DEV_SDCARD, (<span class="keyword">void</span> *)scratch, sector++, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (RES_OK != res)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">memcpy</span>(buff, scratch, SD_BLOCKSIZE);</span><br><span class="line">                buff += SD_BLOCKSIZE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SD_State = SD_ReadMultiBlocks(buff, (<span class="keyword">uint64_t</span>)sector * SD_BLOCKSIZE, SD_BLOCKSIZE, count);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (SD_OK == SD_State) &#123;</span><br><span class="line">            <span class="comment">/* check if transfer finished */</span></span><br><span class="line">            SD_State = SD_WaitReadOperation();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (SD_TRANSFER_OK != SD_GetStatus());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (SD_OK != SD_State)</span><br><span class="line">            result = RES_PARERR;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            result = RES_OK;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> DEV_SPIFLASH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        result = RES_PARERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* Write Sector(s)                                                       */</span></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> FF_FS_READONLY == 0</span></span><br><span class="line"></span><br><span class="line"><span class="function">DRESULT <span class="title">disk_write</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    BYTE pdrv,          <span class="comment">/* Physical drive nmuber to identify the drive */</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> BYTE *buff,   <span class="comment">/* Data to be written */</span></span></span></span><br><span class="line"><span class="params"><span class="function">    LBA_t sector,       <span class="comment">/* Start sector in LBA */</span></span></span></span><br><span class="line"><span class="params"><span class="function">    UINT count          <span class="comment">/* Number of sectors to write */</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DRESULT result = RES_PARERR;</span><br><span class="line">    SD_Error SD_State = SD_OK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!count) &#123;</span><br><span class="line">        <span class="keyword">return</span> RES_PARERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (pdrv) &#123;</span><br><span class="line">    <span class="keyword">case</span> DEV_SDCARD:</span><br><span class="line">        <span class="keyword">if</span> ((DWORD)buff &amp; <span class="number">3</span>) &#123;</span><br><span class="line">            DRESULT res = RES_OK;</span><br><span class="line">            DWORD scratch[SD_BLOCKSIZE / <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (count--) &#123;</span><br><span class="line">                <span class="built_in">memcpy</span>(scratch, buff, SD_BLOCKSIZE);</span><br><span class="line">                res = disk_write(DEV_SDCARD, (<span class="keyword">void</span> *)scratch, sector++, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (SD_OK != res)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                buff += SD_BLOCKSIZE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SD_State = SD_WriteMultiBlocks((<span class="keyword">uint8_t</span> *)buff, (<span class="keyword">uint64_t</span>)sector * SD_BLOCKSIZE, SD_BLOCKSIZE, count);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (SD_OK == SD_State) &#123;</span><br><span class="line">            <span class="comment">/* check if transfer finished */</span></span><br><span class="line">            SD_State = SD_WaitWriteOperation();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* wait until end of DMA transfer */</span></span><br><span class="line">            <span class="keyword">while</span> (SD_TRANSFER_OK != SD_GetStatus());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (SD_OK != SD_State)</span><br><span class="line">            result = RES_PARERR;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            result = RES_OK;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> DEV_SPIFLASH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        result = RES_PARERR;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* Miscellaneous Functions                                               */</span></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">DRESULT <span class="title">disk_ioctl</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    BYTE pdrv,      <span class="comment">/* Physical drive nmuber (0..) */</span></span></span></span><br><span class="line"><span class="params"><span class="function">    BYTE cmd,       <span class="comment">/* Control code */</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">void</span> *buff      <span class="comment">/* Buffer to send/receive control data */</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DRESULT result = RES_PARERR;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (pdrv) &#123;</span><br><span class="line">    <span class="keyword">case</span> DEV_SDCARD:</span><br><span class="line">        <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">        <span class="comment">/* get Read/Write sector size */</span></span><br><span class="line">        <span class="keyword">case</span> GET_SECTOR_SIZE:</span><br><span class="line">            *(WORD *)buff = SD_BLOCKSIZE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* get erase block size with unit of sector(DWORD) */</span></span><br><span class="line">        <span class="keyword">case</span> GET_BLOCK_SIZE:</span><br><span class="line">            *(WORD *)buff = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> CTRL_SYNC:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result = RES_OK;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> DEV_SPIFLASH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        result = RES_PARERR;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__weak DWORD <span class="title">get_fattime</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((DWORD)(<span class="number">2022</span> - <span class="number">1980</span>) &lt;&lt; <span class="number">25</span>)         <span class="comment">/* Year */</span></span><br><span class="line">           | ((DWORD)<span class="number">4</span> &lt;&lt; <span class="number">21</span>)                     <span class="comment">/* Month */</span></span><br><span class="line">           | ((DWORD)<span class="number">3</span> &lt;&lt; <span class="number">16</span>)                     <span class="comment">/* Day */</span></span><br><span class="line">           | ((DWORD)<span class="number">20</span> &lt;&lt; <span class="number">11</span>)                    <span class="comment">/* Hour */</span></span><br><span class="line">           | ((DWORD)<span class="number">53</span> &lt;&lt; <span class="number">5</span>)                     <span class="comment">/* Min */</span></span><br><span class="line">           | ((DWORD)<span class="number">0</span> &lt;&lt; <span class="number">1</span>);                      <span class="comment">/* Sec */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sdio-中断处理">4. SDIO 中断处理</h2><h3 id="sdio-传输中断">4.1 SDIO 传输中断</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 在SDIO_ITConfig()这个函数开启了sdio中断，数据传输结束时产生中断</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SDIO_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* Process All SDIO Interrupt Sources */</span></span><br><span class="line">    SD_ProcessIRQSrc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sdio-中断处理函数">4.2 SDIO 中断处理函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数名：SD_ProcessIRQSrc</span></span><br><span class="line"><span class="comment"> * 描述  ：数据传输结束中断</span></span><br><span class="line"><span class="comment"> * 输入  ：无</span></span><br><span class="line"><span class="comment"> * 输出  ：SD错误类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_ProcessIRQSrc</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StopCondition == <span class="number">1</span>) &#123;           <span class="comment">// 发送读取、多块读写命令时置1</span></span><br><span class="line">        SDIO-&gt;ARG = <span class="number">0x0</span>;                <span class="comment">// 命令参数寄存器</span></span><br><span class="line">        SDIO-&gt;CMD = <span class="number">0x44C</span>;              <span class="comment">// 命令寄存器： 0100    01      001100</span></span><br><span class="line">        <span class="comment">//                                                   [7:6]   [5:0]</span></span><br><span class="line">        <span class="comment">//              CPSMEN  WAITRESP CMDINDEX</span></span><br><span class="line">        <span class="comment">//      开启命令状态机   短响应   cmd12 STOP_ TRANSMISSION</span></span><br><span class="line">        TransferError = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        TransferError = SD_OK;</span><br><span class="line">    &#125;</span><br><span class="line">    SDIO_ClearITPendingBit(SDIO_IT_DATAEND);        <span class="comment">// 清中断</span></span><br><span class="line">    SDIO_ITConfig(SDIO_IT_DATAEND, DISABLE);        <span class="comment">// 关闭sdio中断使能</span></span><br><span class="line">    TransferEnd = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (TransferError);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fatfs-测试">5. FatFS 测试</h2><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220404141719713.png"alt="image-20220404141719713" /></p><h3 id="文件挂载创建写入及读出">5.1 文件挂载，创建，写入及读出</h3><blockquote><ol type="1"><li><strong><font color = 'brown'>文本读 f_read的时候需要注意：当读到'\0'时结束符</font></strong></li><li><strong><font color = 'blue'>文本写的时候需要注意：当 f_write写结束时，会在最后加上'\0'，如果下次接续写 FA_OPEN_APPEND时，前面的'\0'会与后面写入的字符连接显示为NULL，且下次读的时候在'\0'会终止，后面的内容无法读出</font></strong></li><li><strong><font color = 'brown'>解决办法：在调用 f_write 之前，f_open之后将文件指针移到'\0'前面，写入时将其覆盖-----&gt;&gt;&gt;&gt; f_lseek(&amp;fObj, f_size(&amp;fObj) -1);</font></strong></li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file main.c</span></span><br><span class="line"><span class="comment"> * @brief  EU-STM32F103ZE</span></span><br><span class="line"><span class="comment"> * @author simon.y (Tresordie@163.com)</span></span><br><span class="line"><span class="comment"> * @version 1.0</span></span><br><span class="line"><span class="comment"> * @date 2022-03-26</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @copyright Copyright (c) 2022  Simon.Yuan</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @par 修改日志:</span></span><br><span class="line"><span class="comment"> * &lt;table&gt;</span></span><br><span class="line"><span class="comment"> * &lt;tr&gt;&lt;th&gt;Date       &lt;th&gt;Version &lt;th&gt;Author  &lt;th&gt;Description</span></span><br><span class="line"><span class="comment"> * &lt;tr&gt;&lt;td&gt;2022-03-26 &lt;td&gt;1.0     &lt;td&gt;simon.y     &lt;td&gt;内容</span></span><br><span class="line"><span class="comment"> * &lt;/table&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;app_sdcard.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ff.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">FATFS   fsObj;                                                  <span class="comment">// file system object</span></span><br><span class="line">FIL     fObj;                                                   <span class="comment">// file object</span></span><br><span class="line">FRESULT fResult;                                                <span class="comment">// file operation fResult</span></span><br><span class="line">UINT    fNum;                                                   <span class="comment">// number of file read/write successfully</span></span><br><span class="line">BYTE    readBuff[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;                                   <span class="comment">// read buffer</span></span><br><span class="line">BYTE    writeBuff[] = <span class="string">&quot;SDCard file open read write test.\r\n&quot;</span>;  <span class="comment">// write buffer</span></span><br><span class="line">BYTE    work[FF_MAX_SS];                                        <span class="comment">// sector size(512 bytes) - FatFS v0.14</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    delay_init();</span><br><span class="line">    USART_Config();</span><br><span class="line">    LED_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;FatFS on SDCard\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* FatFS mount */</span></span><br><span class="line">    fResult = f_mount(&amp;fsObj, <span class="string">&quot;0:&quot;</span>, <span class="number">1</span>);  <span class="comment">// mount immediately</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* if there is no file system then create it */</span></span><br><span class="line">    <span class="keyword">if</span> (fResult == FR_NO_FILESYSTEM) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No File System on SDCard, will go to format it!\r\n&quot;</span>);</span><br><span class="line">        <span class="comment">//        fResult = f_mkfs(&quot;0:&quot;, 0, 0);     // FatFS v0.11a</span></span><br><span class="line">        fResult = f_mkfs(<span class="string">&quot;0:&quot;</span>, <span class="number">0</span>, work, <span class="keyword">sizeof</span>(work));      <span class="comment">// FatFS v0.14</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;SDCard had been formatted file system successfully!\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* unmount then re-mount after SDCard fomartted with file system */</span></span><br><span class="line">            fResult = f_mount(<span class="literal">NULL</span>, <span class="string">&quot;0:&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            fResult = f_mount(&amp;fsObj, <span class="string">&quot;0:&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LED1_ON;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;SDCard formatted failed!\r\n&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">                LED2_TOGGLE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FR_OK != fResult) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;File System mount failed!, error = %d\r\n&quot;</span>, fResult);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;It may be caused by Failed SDCard initialize.\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            LED2_TOGGLE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;File System mounted successfully!\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* FatFS write */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\r\nFile write in FatFS!\r\n&quot;</span>);</span><br><span class="line">    fResult = f_open(&amp;fObj, <span class="string">&quot;0:FatFs Read Write Test.txt&quot;</span>, FA_OPEN_APPEND | FA_WRITE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;file size is %d Bytes\r\n&quot;</span>, f_size(&amp;fObj));</span><br><span class="line">    f_lseek(&amp;fObj, f_size(&amp;fObj) - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;file open successfully, write data into file!\r\n&quot;</span>);</span><br><span class="line">        fResult = f_write(&amp;fObj, writeBuff, <span class="keyword">sizeof</span>(writeBuff), &amp;fNum);</span><br><span class="line">        <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;file written successfully, %d bytes written into file!\r\n&quot;</span>, fNum);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;file written failed!, error = %d\r\n&quot;</span>, fResult);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        f_close(&amp;fObj);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;file open failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            LED2_TOGGLE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f_close(&amp;fObj);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* FatFS read */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\r\nFile read in FatFS!\r\n&quot;</span>);</span><br><span class="line">    fResult = f_open(&amp;fObj, <span class="string">&quot;0:FatFs Read Write Test.txt&quot;</span>, FA_OPEN_EXISTING | FA_READ);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;file size is %d Bytes\r\n&quot;</span>, f_size(&amp;fObj));</span><br><span class="line">    f_lseek(&amp;fObj, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;file open successfully, read data!\r\n&quot;</span>);</span><br><span class="line">        fResult = f_read(&amp;fObj, readBuff, <span class="keyword">sizeof</span>(readBuff), &amp;fNum);</span><br><span class="line">        <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;file read successfully, %d bytes read!\r\n&quot;</span>, fNum);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\r\n[Content Read]:\r\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n\r\n&quot;</span>, readBuff);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;file read failed!, error = %d\r\n&quot;</span>, fResult);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        f_close(&amp;fObj);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;file open failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            LED2_TOGGLE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f_close(&amp;fObj);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* unmount */</span></span><br><span class="line">    f_mount(<span class="literal">NULL</span>, <span class="string">&quot;0:&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件信息">5.2 文件信息</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">FRESULT fResult;</span><br><span class="line">FIL     fObj;</span><br><span class="line">UINT    fNum;</span><br><span class="line">FILINFO fInfo;</span><br><span class="line">DIR     dir;</span><br><span class="line"><span class="keyword">char</span>    readBuffer[<span class="number">512</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">FRESULT <span class="title">FatFS_fileInfoCheck</span><span class="params">(<span class="keyword">char</span> *pfPath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* get file info */</span></span><br><span class="line">    fResult = f_stat(pfPath, &amp;fInfo);</span><br><span class="line">    <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\r\n%s info: \r\n&quot;</span>, pfPath);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;file size: %d Bytes\r\n&quot;</span>, fInfo.fsize);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;time stamp: %u-%02u-%02u, %02u:%02u\r\n&quot;</span>,</span><br><span class="line">               (fInfo.fdate &gt;&gt; <span class="number">9</span>) + <span class="number">1980</span>,</span><br><span class="line">               fInfo.fdate &gt;&gt; <span class="number">5</span> &amp; <span class="number">15</span>,</span><br><span class="line">               fInfo.fdate &amp; <span class="number">31</span>,</span><br><span class="line">               fInfo.fdate &gt;&gt; <span class="number">11</span>,</span><br><span class="line">               fInfo.fdate &gt;&gt; <span class="number">5</span> &amp; <span class="number">63</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;attribution: %c%c%c%c%c\r\n&quot;</span>,</span><br><span class="line">               (fInfo.fattrib &amp; AM_DIR) ? <span class="string">&#x27;D&#x27;</span> : <span class="string">&#x27;-&#x27;</span>,    <span class="comment">/* Directory? */</span></span><br><span class="line">               (fInfo.fattrib &amp; AM_RDO) ? <span class="string">&#x27;R&#x27;</span> : <span class="string">&#x27;-&#x27;</span>,    <span class="comment">/* Read only? */</span></span><br><span class="line">               (fInfo.fattrib &amp; AM_HID) ? <span class="string">&#x27;H&#x27;</span> : <span class="string">&#x27;-&#x27;</span>,    <span class="comment">/* Hide file? */</span></span><br><span class="line">               (fInfo.fattrib &amp; AM_SYS) ? <span class="string">&#x27;S&#x27;</span> : <span class="string">&#x27;-&#x27;</span>,    <span class="comment">/* System file */</span></span><br><span class="line">               (fInfo.fattrib &amp; AM_ARC) ? <span class="string">&#x27;A&#x27;</span> : <span class="string">&#x27;-&#x27;</span>     <span class="comment">/* Archieve file? */</span></span><br><span class="line">              );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件扫描">5.3 文件扫描</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief                           scan directory and files in device Volume</span></span><br><span class="line"><span class="comment"> * @param  pDeviceVolumePath        device volume path</span></span><br><span class="line"><span class="comment"> * @return FRESULT                  FR_OK on success</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">FRESULT <span class="title">FatFS_fileScan</span><span class="params">(<span class="keyword">char</span> *pDeviceVolumePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FRESULT fResult;</span><br><span class="line">    DIR     dir;</span><br><span class="line">    UINT    i;</span><br><span class="line">    <span class="keyword">static</span>  FILINFO fInfo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* open Device Volume path */</span></span><br><span class="line">    fResult = f_opendir(&amp;dir, pDeviceVolumePath);</span><br><span class="line">    <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            fResult = f_readdir(&amp;dir, &amp;fInfo);                  <span class="comment">/* read device volume&#x27;s directory info to fInfo */</span></span><br><span class="line">            <span class="keyword">if</span> (FR_OK != fResult || fInfo.fname[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* if directory scanned, recursive to scan files in this directory */</span></span><br><span class="line">            <span class="keyword">if</span> (fInfo.fattrib &amp; AM_DIR) &#123;</span><br><span class="line">                i = <span class="built_in">strlen</span>(pDeviceVolumePath);</span><br><span class="line">                <span class="built_in">sprintf</span>(&amp;pDeviceVolumePath[i], <span class="string">&quot;/%s&quot;</span>, fInfo.fname);</span><br><span class="line"></span><br><span class="line">                fResult = FatFS_fileScan(pDeviceVolumePath);</span><br><span class="line">                <span class="keyword">if</span> (fResult != FR_OK)                           <span class="comment">/* it will break if can&#x27;t scan any file info in directory */</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                pDeviceVolumePath[i] = <span class="number">0</span>;                       <span class="comment">/* it add 0 at the end of the path if scan file info in directory */</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s/%s\r\n&quot;</span>, pDeviceVolumePath, fInfo.fname);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f_closedir(&amp;dir);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;failed to open directory!\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本功能">5.4 基本功能</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ex_fatfsfs.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;string.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief   get FatFS volume total size and free size</span></span><br><span class="line"><span class="comment"> * @notes   this function must be used close after f_mount, or result will be not correct</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FatFS_getFreeSize</span><span class="params">(<span class="keyword">size_info_t</span> *psize_info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FATFS *pFatFS;</span><br><span class="line">    DWORD freeCluster, freeSector, totalSector;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\r\n*****************Get device info *********************\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* get device info and free cluster size */</span></span><br><span class="line">    f_getfree(<span class="string">&quot;0:&quot;</span>, &amp;freeCluster, &amp;pFatFS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* calculate total sectors and free sectors */</span></span><br><span class="line">    totalSector = (pFatFS-&gt;n_fatent - <span class="number">2</span>) * pFatFS-&gt;csize;       <span class="comment">// FF_MAX_SS = 512 Bytes -&gt; Sector size</span></span><br><span class="line">    freeSector = freeCluster * pFatFS-&gt;csize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* print device size information */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Device total size: %ld KB, Free Size: %ld KB\r\n&quot;</span>, (totalSector &gt;&gt; <span class="number">1</span>), (freeSector &gt;&gt; <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    psize_info-&gt;totalSector = totalSector;</span><br><span class="line">    psize_info-&gt;freeSector = freeSector;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief           write data content to end of file</span></span><br><span class="line"><span class="comment"> * @param  pfPath   file path(e.g., &quot;0:FatFs Read Write Test.txt&quot;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FatFS_fileWrite</span><span class="params">(<span class="keyword">char</span> *pfPath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FRESULT fResult;</span><br><span class="line">    FIL     fObj;</span><br><span class="line">    UINT    fNum;</span><br><span class="line">    <span class="keyword">char</span>    readBuffer[<span class="number">512</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;f_lseek to position and write content into file!\r\n&quot;</span>);</span><br><span class="line">    fResult = f_open(&amp;fObj, pfPath, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);</span><br><span class="line">    <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">        fResult = f_lseek(&amp;fObj, f_size(&amp;fObj) - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">            f_printf(&amp;fObj, <span class="string">&quot;Add some new at end of original file.\r\n&quot;</span>);</span><br><span class="line">            fResult = f_lseek(&amp;fObj, <span class="number">0</span>);</span><br><span class="line">            fResult = f_read(&amp;fObj, readBuffer, f_size(&amp;fObj), &amp;fNum);</span><br><span class="line">            <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;[Content]:\r\n%s\r\n&quot;</span>, readBuffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f_close(&amp;fObj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief                   rename file of pfPath to pfExpectPath, if folder not exist, create it</span></span><br><span class="line"><span class="comment"> * @param  pDir             pointer to Directory which pfExpectPath within</span></span><br><span class="line"><span class="comment"> * @param  pfDirPath        path of Directory where pfExpectPath inside</span></span><br><span class="line"><span class="comment"> * @param  pfPath           path of original file</span></span><br><span class="line"><span class="comment"> * @param  pfExpectPath     path been renamed of original file</span></span><br><span class="line"><span class="comment"> * @return FRESULT          FR_OK on success</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">FRESULT <span class="title">FatFS_folderCreate</span><span class="params">(DIR *pDir, <span class="keyword">char</span> *pfDirPath, <span class="keyword">char</span> *pfPath, <span class="keyword">char</span> *pfExpectPath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FRESULT fResult;</span><br><span class="line">    FIL     fObj;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Create folder in FatFS!\r\n&quot;</span>);</span><br><span class="line">    fResult = f_opendir(pDir, pfDirPath);</span><br><span class="line">    <span class="keyword">if</span> (FR_OK != fResult) &#123;</span><br><span class="line">        fResult = f_mkdir(pfDirPath);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fResult = f_closedir(pDir);</span><br><span class="line">        f_unlink(pfExpectPath);                           <span class="comment">/* delete file */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">        fResult = f_open(&amp;fObj, pfPath, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);   <span class="comment">/* Create if no file */</span></span><br><span class="line">        <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">            fResult = f_rename(pfPath, pfExpectPath);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Successfully renamed\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed to open %s\r\n&quot;</span>, pfPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    f_close(&amp;fObj);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief               show file info in fatfs</span></span><br><span class="line"><span class="comment"> * @param  pfPath       file path(e.g., &quot;0:FatFs Read Write Test.txt&quot;)</span></span><br><span class="line"><span class="comment"> * @return FRESULT      FR_OK on success</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">FRESULT <span class="title">FatFS_fileInfoCheck</span><span class="params">(<span class="keyword">char</span> *pfPath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FRESULT fResult;</span><br><span class="line">    FILINFO fInfo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* get file info */</span></span><br><span class="line">    fResult = f_stat(pfPath, &amp;fInfo);</span><br><span class="line">    <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\r\n%s info: \r\n&quot;</span>, pfPath);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;file size: %ld Bytes\r\n&quot;</span>, fInfo.fsize);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;time stamp: %u-%02u-%02u, %02u:%02u\r\n&quot;</span>,</span><br><span class="line">               (fInfo.fdate &gt;&gt; <span class="number">9</span>) + <span class="number">1980</span>,</span><br><span class="line">               fInfo.fdate &gt;&gt; <span class="number">5</span> &amp; <span class="number">15</span>,</span><br><span class="line">               fInfo.fdate &amp; <span class="number">31</span>,</span><br><span class="line">               fInfo.fdate &gt;&gt; <span class="number">11</span>,</span><br><span class="line">               fInfo.fdate &gt;&gt; <span class="number">5</span> &amp; <span class="number">63</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;attribution: %c%c%c%c%c\r\n&quot;</span>,</span><br><span class="line">               (fInfo.fattrib &amp; AM_DIR) ? <span class="string">&#x27;D&#x27;</span> : <span class="string">&#x27;-&#x27;</span>,    <span class="comment">/* Directory? */</span></span><br><span class="line">               (fInfo.fattrib &amp; AM_RDO) ? <span class="string">&#x27;R&#x27;</span> : <span class="string">&#x27;-&#x27;</span>,    <span class="comment">/* Read only? */</span></span><br><span class="line">               (fInfo.fattrib &amp; AM_HID) ? <span class="string">&#x27;H&#x27;</span> : <span class="string">&#x27;-&#x27;</span>,    <span class="comment">/* Hide file? */</span></span><br><span class="line">               (fInfo.fattrib &amp; AM_SYS) ? <span class="string">&#x27;S&#x27;</span> : <span class="string">&#x27;-&#x27;</span>,    <span class="comment">/* System file */</span></span><br><span class="line">               (fInfo.fattrib &amp; AM_ARC) ? <span class="string">&#x27;A&#x27;</span> : <span class="string">&#x27;-&#x27;</span>     <span class="comment">/* Archieve file? */</span></span><br><span class="line">              );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief                           scan directory and files in device Volume</span></span><br><span class="line"><span class="comment"> * @param  pDeviceVolumePath        device volume path</span></span><br><span class="line"><span class="comment"> * @return FRESULT                  FR_OK on success</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">FRESULT <span class="title">FatFS_fileScan</span><span class="params">(<span class="keyword">char</span> *pDeviceVolumePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FRESULT fResult;</span><br><span class="line">    DIR     dir;</span><br><span class="line">    UINT    i;</span><br><span class="line">    <span class="keyword">static</span>  FILINFO fInfo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* open Device Volume path */</span></span><br><span class="line">    fResult = f_opendir(&amp;dir, pDeviceVolumePath);</span><br><span class="line">    <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            fResult = f_readdir(&amp;dir, &amp;fInfo);                  <span class="comment">/* read device volume&#x27;s directory info to fInfo */</span></span><br><span class="line">            <span class="keyword">if</span> (FR_OK != fResult || fInfo.fname[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* if directory scanned, recursive to scan files in this directory */</span></span><br><span class="line">            <span class="keyword">if</span> (fInfo.fattrib &amp; AM_DIR) &#123;</span><br><span class="line">                i = <span class="built_in">strlen</span>(pDeviceVolumePath);</span><br><span class="line">                <span class="built_in">sprintf</span>(&amp;pDeviceVolumePath[i], <span class="string">&quot;/%s&quot;</span>, fInfo.fname);</span><br><span class="line"></span><br><span class="line">                fResult = FatFS_fileScan(pDeviceVolumePath);</span><br><span class="line">                <span class="keyword">if</span> (fResult != FR_OK)                           <span class="comment">/* it will break if can&#x27;t scan any file info in directory */</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                pDeviceVolumePath[i] = <span class="number">0</span>;                       <span class="comment">/* it add 0 at the end of the path if scan file info in directory */</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s/%s\r\n&quot;</span>, pDeviceVolumePath, fInfo.fname);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f_closedir(&amp;dir);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;failed to open directory!\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">6. 总结</h2><h3id="main.c-中文件相关对象定义必须放在-main-函数体外部否则会有问题"><font color='brown'>6.1main.c 中文件相关对象定义必须放在 main函数体外部，否则会有问题</font></h3><blockquote><ol type="1"><li><p><strong>如下所示，FATFS，FIL，DIR 这些对象都定义在 main函数以外</strong></p><p>FATFS fsObj; // file system object<br />FIL fObj;<br />UINT fNum;<br />DIR dir;</p></li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file main.c</span></span><br><span class="line"><span class="comment"> * @brief  EU-STM32F103ZE</span></span><br><span class="line"><span class="comment"> * @author simon.y (Tresordie@163.com)</span></span><br><span class="line"><span class="comment"> * @version 1.0</span></span><br><span class="line"><span class="comment"> * @date 2022-03-26</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @copyright Copyright (c) 2022  Simon.Yuan</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @par 修改日志:</span></span><br><span class="line"><span class="comment"> * &lt;table&gt;</span></span><br><span class="line"><span class="comment"> * &lt;tr&gt;&lt;th&gt;Date       &lt;th&gt;Version &lt;th&gt;Author  &lt;th&gt;Description</span></span><br><span class="line"><span class="comment"> * &lt;tr&gt;&lt;td&gt;2022-03-26 &lt;td&gt;1.0     &lt;td&gt;simon.y     &lt;td&gt;内容</span></span><br><span class="line"><span class="comment"> * &lt;/table&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_usart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;app_sdcard.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ex_fatfsfs.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ff.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">FRESULT fResult;</span><br><span class="line">FATFS   fsObj;                                                  <span class="comment">// file system object</span></span><br><span class="line">FIL     fObj;</span><br><span class="line">UINT    fNum;</span><br><span class="line">DIR     dir;</span><br><span class="line">BYTE    readBuff[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;                                   <span class="comment">// read buffer</span></span><br><span class="line">BYTE    writeBuff[] = <span class="string">&quot;SDCard file open read write test.\r\n&quot;</span>;  <span class="comment">// write buffer</span></span><br><span class="line"><span class="comment">// BYTE    work[FF_MAX_SS];                                        // sector size(512 bytes) - FatFS v0.14</span></span><br><span class="line"><span class="keyword">size_info_t</span> size_info;</span><br><span class="line"><span class="keyword">char</span> fPath[<span class="number">2048</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    USART_Config();</span><br><span class="line">    LED_Init();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;FatFS on SDCard\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* FatFS mount */</span></span><br><span class="line">    fResult = f_mount(&amp;fsObj, <span class="string">&quot;0:&quot;</span>, <span class="number">1</span>);  <span class="comment">// mount immediately</span></span><br><span class="line">    FatFS_getFreeSize(&amp;size_info);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* if there is no file system then create it */</span></span><br><span class="line">    <span class="keyword">if</span> (fResult == FR_NO_FILESYSTEM) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No File System on SDCard, will go to format it!\r\n&quot;</span>);</span><br><span class="line">        fResult = f_mkfs(<span class="string">&quot;0:&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);     <span class="comment">// FatFS v0.11a</span></span><br><span class="line">        <span class="comment">//    fResult = f_mkfs(&quot;0:&quot;, 0, work, sizeof(work));      // FatFS v0.14</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;SDCard had been formatted file system successfully!\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* unmount then re-mount after SDCard fomartted with file system */</span></span><br><span class="line">            fResult = f_mount(<span class="literal">NULL</span>, <span class="string">&quot;0:&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            fResult = f_mount(&amp;fsObj, <span class="string">&quot;0:&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LED1_ON;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;SDCard formatted failed!\r\n&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">                LED2_TOGGLE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (FR_OK != fResult) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;File System mount failed!, error = %d\r\n&quot;</span>, fResult);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;It may be caused by Failed SDCard initialize.\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            LED2_TOGGLE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;File System mounted successfully!\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* file scan */</span></span><br><span class="line">    <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(fPath, <span class="string">&quot;0:&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\r\nFatFS file scan!\r\n&quot;</span>);</span><br><span class="line">        FatFS_fileScan(fPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* FatFS write */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\r\nFile write in FatFS!\r\n&quot;</span>);</span><br><span class="line">    fResult = f_open(&amp;fObj, <span class="string">&quot;0:FatFs Read Write Test.txt&quot;</span>, FA_CREATE_ALWAYS | FA_WRITE);</span><br><span class="line">    <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;file open successfully, write data into file!\r\n&quot;</span>);</span><br><span class="line">        fResult = f_write(&amp;fObj, writeBuff, <span class="keyword">sizeof</span>(writeBuff), &amp;fNum);</span><br><span class="line">        <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;file written successfully, %d bytes written into file!\r\n&quot;</span>, fNum);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;file written failed!, error = %d\r\n&quot;</span>, fResult);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        f_close(&amp;fObj);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;file open failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            LED2_TOGGLE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f_close(&amp;fObj);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Write content to end of file */</span></span><br><span class="line">    FatFS_fileWrite(<span class="string">&quot;0:FatFs Read Write Test.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* FatFS read */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\r\nFile read in FatFS!\r\n&quot;</span>);</span><br><span class="line">    fResult = f_open(&amp;fObj, <span class="string">&quot;0:FatFs Read Write Test.txt&quot;</span>, FA_OPEN_EXISTING | FA_READ);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;file size is %ld Bytes\r\n&quot;</span>, f_size(&amp;fObj));</span><br><span class="line">    f_lseek(&amp;fObj, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;file open successfully, read data!\r\n&quot;</span>);</span><br><span class="line">        fResult = f_read(&amp;fObj, readBuff, <span class="keyword">sizeof</span>(readBuff), &amp;fNum);</span><br><span class="line">        <span class="keyword">if</span> (FR_OK == fResult) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;file read successfully, %d bytes read!\r\n&quot;</span>, fNum);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\r\n[Content Read]:\r\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n\r\n&quot;</span>, readBuff);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;file read failed!, error = %d\r\n&quot;</span>, fResult);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        f_close(&amp;fObj);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;file open failed!\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            LED2_TOGGLE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f_close(&amp;fObj);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* file rename */</span></span><br><span class="line">    FatFS_folderCreate(&amp;dir, <span class="string">&quot;0:TestDir&quot;</span>, <span class="string">&quot;0:TestDir/1.txt&quot;</span>, <span class="string">&quot;0:TestDir/2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* file info check */</span></span><br><span class="line">    FatFS_fileInfoCheck(<span class="string">&quot;0:FatFs Read Write Test.txt&quot;</span>);</span><br><span class="line">    FatFS_fileInfoCheck(<span class="string">&quot;0:TestDir/2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* unmount */</span></span><br><span class="line">    f_mount(<span class="literal">NULL</span>, <span class="string">&quot;0:&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3id="对存储介质中的文件进行全面扫描时需要给文件路径缓存分配较大空间以致能足以存储所有的路径在此数组中"><font color='brown'>6.2 对存储介质中的文件进行全面扫描时，需要给文件路径缓存分配较大空间以致能足以存储所有的路径在此数组中</font></h3><blockquote><ol type="1"><li><strong>以上例程中，存储文件路径的数组为 fPath，缓存的大小为 2048Bytes</strong></li><li><strong>之前测试时，由于文件路径较深，fPath 缓存大小为 512Bytes，导致很多文件无法扫描出来</strong></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img
src=&quot;https://raw.githubusercontent.com/Tresordie/PicBed/master/img/FatFS%E7%A7%BB%E6%A4%8D%E5%AF%BC%E5%9B%BE.png&quot;
alt=&quot;FatFS移植导图&quot; </summary>
      
    
    
    
    <category term="协议" scheme="https://tresordie.github.io/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="file system" scheme="https://tresordie.github.io/tags/file-system/"/>
    
  </entry>
  
  <entry>
    <title>安装oh-my-posh美化界面(Windows)</title>
    <link href="https://tresordie.github.io/2022/04/04/[Git]oh-my-posh%E7%95%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/"/>
    <id>https://tresordie.github.io/2022/04/04/[Git]oh-my-posh%E7%95%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/</id>
    <published>2022-04-04T02:00:00.000Z</published>
    <updated>2022-09-01T13:19:56.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git安装oh-my-posh.v3-美化界面windows">[Git]安装oh-my-posh.v3美化界面(Windows)</h1><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220404131453282.png"alt="image-20220404131453282" /></p><h2 id="powershell最新版本安装">1. PowerShell最新版本安装</h2><blockquote><ol type="1"><li><p>安装PowerShell最新版本可以很好支持一些特性</p><p>https://github.com/PowerShell/PowerShell/releases/</p></li></ol></blockquote><h2 id="安装字体">2. 安装字体</h2><blockquote><ol type="1"><li><p>安装字体支持oh-my-posh主题的支持</p></li><li><p>建议安装<strong>MesloLGS NF</strong>字体</p><p>https://github.com/romkatv/dotfiles-public/blob/master/.local/share/fonts/NerdFonts/MesloLGS%20NF%20Regular.ttf</p></li></ol></blockquote><h2 id="安装oh-my-posh及posh-git">3. 安装oh-my-posh及posh-git</h2><blockquote><ol type="1"><li><p>下载安装oh-my-posh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString(<span class="string">&#x27;https://ohmyposh.dev/install.ps1&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>如果使用的是PowerShell Core, 需要安装PSReadline</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Module -Name PSReadLine -Scope CurrentUser -Force -SkipPublisherCheck  </span><br></pre></td></tr></table></figure></li><li><p>安装oh-my-posh及posh-git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Install-Module oh-my-posh -Scope CurrentUser</span><br><span class="line">Install-Module posh-git -Scope CurrentUser</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="启动配置">4. 启动配置</h2><blockquote><ol type="1"><li><p>在PowerShell中输入以下命令，实现启动编辑powershell配置文件的引擎</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(Test-Path -Path <span class="variable">$PROFILE</span> )) &#123; New-Item -Type File -Path <span class="variable">$PROFILE</span> -Force &#125;</span><br></pre></td></tr></table></figure></li><li><p>输入以下命令，创建配置脚本，并在脚本中添加命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad <span class="variable">$PROFILE</span></span><br></pre></td></tr></table></figure></li><li><p>脚本内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入oh-my-posh</span></span><br><span class="line">oh-my-posh init pwsh | Invoke-Expression</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置主题</span></span><br><span class="line">oh-my-posh init pwsh --config <span class="string">&#x27;C:\Users\simon\AppData\Local\Programs\oh-my-posh\themes\powerlevel10k_rainbow.omp.json&#x27;</span> | Invoke-Expression</span><br></pre></td></tr></table></figure></li><li><p>使配置生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. <span class="variable">$PROFILE</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="设置主题">5. 设置主题</h2><blockquote><ol type="1"><li><p>打开PowerShell之后，输入以下命令查看所有oh-my-posh主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-PoshTheme</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="终端">6. 终端</h2><blockquote><ol type="1"><li>PowerShell通过oh-my-posh进行美化后，可以选择其它一款Terminal软件实现界面更加优美化</li><li>推荐使用：FluentTerminal，Tabby</li></ol></blockquote><p><ahref="https://lamirs.vercel.app/index-powershell/">oh-my-posh参考链接</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git安装oh-my-posh.v3-美化界面windows&quot;&gt;[Git]安装oh-my-posh.v3
美化界面(Windows)&lt;/h1&gt;
&lt;p&gt;&lt;img
src=&quot;https://raw.githubusercontent.com/Tresordie/</summary>
      
    
    
    
    <category term="Git" scheme="https://tresordie.github.io/categories/Git/"/>
    
    
    <category term="oh-my-posh" scheme="https://tresordie.github.io/tags/oh-my-posh/"/>
    
  </entry>
  
  <entry>
    <title>Source Insight配置</title>
    <link href="https://tresordie.github.io/2022/04/03/[Source%20Insight]SI%E9%85%8D%E7%BD%AE/"/>
    <id>https://tresordie.github.io/2022/04/03/[Source%20Insight]SI%E9%85%8D%E7%BD%AE/</id>
    <published>2022-04-03T08:00:00.000Z</published>
    <updated>2022-09-01T12:14:35.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="source-insight-si-配置">[Source Insight] SI 配置</h1><h2 id="快捷键配置">1. 快捷键配置</h2><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220403162527925.png"alt="image-20220403162527925" /></p><h3 id="go-forward">1.1 Go Forward</h3><p><imgsrc="C:/Users/SimonYuan/AppData/Roaming/Typora/typora-user-images/image-20220403162640801.png"alt="image-20220403162640801" /></p><h3 id="go-back">1.2 Go Back</h3><p><imgsrc="C:/Users/SimonYuan/AppData/Roaming/Typora/typora-user-images/image-20220403162723819.png"alt="image-20220403162723819" /></p><h3 id="jump-to-definition">1.3 Jump to Definition</h3><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220403162810462.png"alt="image-20220403162810462" /></p><h3 id="comment-lines">1.4 Comment Lines</h3><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220403162845272.png"alt="image-20220403162845272" /></p><h3 id="un-comment-lines">1.5 Un-Comment Lines</h3><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220403162923636.png"alt="image-20220403162923636" /></p><h3 id="search-project">1.6 Search Project</h3><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220403163033209.png"alt="image-20220403163033209" /></p><h2 id="astyle-对代码进行格式化">2. Astyle 对代码进行格式化</h2><blockquote><ol type="1"><li><p>下载并安装 AStyle</p></li><li><p>在 Source Insight 中配置 AStyle 插件，Tools -&gt; CustomCommands</p></li><li><p>添加新的 Command，Add -&gt; 定义一个 Command 为 AStyle</p></li><li><p>在 Run 空白处填入以下配置：</p><p>C:.exe --style=linux -k3 -W1 -xG -S -s4 -xb -U -p -xf -xh -xC120 -xL-H -Y -xW -w -n %f</p></li><li><p>其它勾选配置如下图配置</p></li><li><p>将 AStyle 插件功能添加到工具菜单中.</p><p>Tool -&gt; Custom Commands -&gt; Menu -&gt; Command列表中选择定义好了的 AStyle -&gt; Menu 列表选择 Tools -&gt; 点击 OK-&gt; Up/Down 来调整 AStyle 的位置</p></li></ol></blockquote><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220403163250487.png"alt="image-20220403163250487" /></p><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220403163219210.png"alt="image-20220403163219210" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;source-insight-si-配置&quot;&gt;[Source Insight] SI 配置&lt;/h1&gt;
&lt;h2 id=&quot;快捷键配置&quot;&gt;1. 快捷键配置&lt;/h2&gt;
&lt;p&gt;&lt;img
src=&quot;https://raw.githubusercontent.com/Tre</summary>
      
    
    
    
    <category term="Tool" scheme="https://tresordie.github.io/categories/Tool/"/>
    
    
    <category term="Source Insight" scheme="https://tresordie.github.io/tags/Source-Insight/"/>
    
  </entry>
  
  <entry>
    <title>SDIO接口</title>
    <link href="https://tresordie.github.io/2022/03/28/[sdio]SDIO%E6%8E%A5%E5%8F%A3/"/>
    <id>https://tresordie.github.io/2022/03/28/[sdio]SDIO%E6%8E%A5%E5%8F%A3/</id>
    <published>2022-03-28T11:00:00.000Z</published>
    <updated>2022-11-10T16:06:29.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sdio-sdio-接口">[sdio] SDIO 接口</h1><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/SDIO.jpg"alt="SDIO" /></p><h2 id="sdio-硬件接口">1. SDIO 硬件接口</h2><blockquote><ol type="1"><li>参考上面的思维导图</li></ol></blockquote><h2 id="sdio-底层驱动">2. SDIO 底层驱动</h2><blockquote><ol type="1"><li>参考上面思维导图中的 SDIO 的工作过程</li><li>基于特定芯片原厂的 SDK 移植</li></ol></blockquote><h2 id="sdio-驱动代码">3. SDIO 驱动代码</h2><h3 id="bsp_sdio.h">3.1 bsp_sdio.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">  * @file    stm32_eval_sdio_sd.h</span></span><br><span class="line"><span class="comment">  * @author  MCD Application Team</span></span><br><span class="line"><span class="comment">  * @version V4.5.0</span></span><br><span class="line"><span class="comment">  * @date    07-March-2011</span></span><br><span class="line"><span class="comment">  * @brief   This file contains all the functions prototypes for the SD Card</span></span><br><span class="line"><span class="comment">  *          stm32_eval_sdio_sd driver firmware library.</span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">  * @attention</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS</span></span><br><span class="line"><span class="comment">  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE</span></span><br><span class="line"><span class="comment">  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY</span></span><br><span class="line"><span class="comment">  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING</span></span><br><span class="line"><span class="comment">  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE</span></span><br><span class="line"><span class="comment">  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * &lt;h2&gt;&lt;center&gt;&amp;copy; COPYRIGHT 2011 STMicroelectronics&lt;/center&gt;&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">/* Define to prevent recursive inclusion -------------------------------------*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __BSP_SDIO_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __BSP_SDIO_H__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Includes ------------------------------------------------------------------*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Exported types ------------------------------------------------------------*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * @brief  SDIO specific error defines</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    SD_CMD_CRC_FAIL                    = (<span class="number">1</span>), <span class="comment">/*!&lt; Command response received (but CRC check failed) */</span></span><br><span class="line">    SD_DATA_CRC_FAIL                   = (<span class="number">2</span>), <span class="comment">/*!&lt; Data bock sent/received (CRC check Failed) */</span></span><br><span class="line">    SD_CMD_RSP_TIMEOUT                 = (<span class="number">3</span>), <span class="comment">/*!&lt; Command response timeout */</span></span><br><span class="line">    SD_DATA_TIMEOUT                    = (<span class="number">4</span>), <span class="comment">/*!&lt; Data time out */</span></span><br><span class="line">    SD_TX_UNDERRUN                     = (<span class="number">5</span>), <span class="comment">/*!&lt; Transmit FIFO under-run */</span></span><br><span class="line">    SD_RX_OVERRUN                      = (<span class="number">6</span>), <span class="comment">/*!&lt; Receive FIFO over-run */</span></span><br><span class="line">    SD_START_BIT_ERR                   = (<span class="number">7</span>), <span class="comment">/*!&lt; Start bit not detected on all data signals in widE bus mode */</span></span><br><span class="line">    SD_CMD_OUT_OF_RANGE                = (<span class="number">8</span>), <span class="comment">/*!&lt; CMD&#x27;s argument was out of range.*/</span></span><br><span class="line">    SD_ADDR_MISALIGNED                 = (<span class="number">9</span>), <span class="comment">/*!&lt; Misaligned address */</span></span><br><span class="line">    SD_BLOCK_LEN_ERR                   = (<span class="number">10</span>), <span class="comment">/*!&lt; Transferred block length is not allowed for the card or the number of transferred bytes does not match the block length */</span></span><br><span class="line">    SD_ERASE_SEQ_ERR                   = (<span class="number">11</span>), <span class="comment">/*!&lt; An error in the sequence of erase command occurs.*/</span></span><br><span class="line">    SD_BAD_ERASE_PARAM                 = (<span class="number">12</span>), <span class="comment">/*!&lt; An Invalid selection for erase groups */</span></span><br><span class="line">    SD_WRITE_PROT_VIOLATION            = (<span class="number">13</span>), <span class="comment">/*!&lt; Attempt to program a write protect block */</span></span><br><span class="line">    SD_LOCK_UNLOCK_FAILED              = (<span class="number">14</span>), <span class="comment">/*!&lt; Sequence or password error has been detected in unlock command or if there was an attempt to access a locked card */</span></span><br><span class="line">    SD_COM_CRC_FAILED                  = (<span class="number">15</span>), <span class="comment">/*!&lt; CRC check of the previous command failed */</span></span><br><span class="line">    SD_ILLEGAL_CMD                     = (<span class="number">16</span>), <span class="comment">/*!&lt; Command is not legal for the card state */</span></span><br><span class="line">    SD_CARD_ECC_FAILED                 = (<span class="number">17</span>), <span class="comment">/*!&lt; Card internal ECC was applied but failed to correct the data */</span></span><br><span class="line">    SD_CC_ERROR                        = (<span class="number">18</span>), <span class="comment">/*!&lt; Internal card controller error */</span></span><br><span class="line">    SD_GENERAL_UNKNOWN_ERROR           = (<span class="number">19</span>), <span class="comment">/*!&lt; General or Unknown error */</span></span><br><span class="line">    SD_STREAM_READ_UNDERRUN            = (<span class="number">20</span>), <span class="comment">/*!&lt; The card could not sustain data transfer in stream read operation. */</span></span><br><span class="line">    SD_STREAM_WRITE_OVERRUN            = (<span class="number">21</span>), <span class="comment">/*!&lt; The card could not sustain data programming in stream mode */</span></span><br><span class="line">    SD_CID_CSD_OVERWRITE               = (<span class="number">22</span>), <span class="comment">/*!&lt; CID/CSD overwrite error */</span></span><br><span class="line">    SD_WP_ERASE_SKIP                   = (<span class="number">23</span>), <span class="comment">/*!&lt; only partial address space was erased */</span></span><br><span class="line">    SD_CARD_ECC_DISABLED               = (<span class="number">24</span>), <span class="comment">/*!&lt; Command has been executed without using internal ECC */</span></span><br><span class="line">    SD_ERASE_RESET                     = (<span class="number">25</span>), <span class="comment">/*!&lt; Erase sequence was cleared before executing because an out of erase sequence command was received */</span></span><br><span class="line">    SD_AKE_SEQ_ERROR                   = (<span class="number">26</span>), <span class="comment">/*!&lt; Error in sequence of authentication. */</span></span><br><span class="line">    SD_INVALID_VOLTRANGE               = (<span class="number">27</span>),</span><br><span class="line">    SD_ADDR_OUT_OF_RANGE               = (<span class="number">28</span>),</span><br><span class="line">    SD_SWITCH_ERROR                    = (<span class="number">29</span>),</span><br><span class="line">    SD_SDIO_DISABLED                   = (<span class="number">30</span>),</span><br><span class="line">    SD_SDIO_FUNCTION_BUSY              = (<span class="number">31</span>),</span><br><span class="line">    SD_SDIO_FUNCTION_FAILED            = (<span class="number">32</span>),</span><br><span class="line">    SD_SDIO_UNKNOWN_FUNCTION           = (<span class="number">33</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * @brief  Standard error defines</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    SD_INTERNAL_ERROR,</span><br><span class="line">    SD_NOT_CONFIGURED,</span><br><span class="line">    SD_REQUEST_PENDING,</span><br><span class="line">    SD_REQUEST_NOT_APPLICABLE,</span><br><span class="line">    SD_INVALID_PARAMETER,</span><br><span class="line">    SD_UNSUPPORTED_FEATURE,</span><br><span class="line">    SD_UNSUPPORTED_HW,</span><br><span class="line">    SD_ERROR,</span><br><span class="line">    SD_OK = <span class="number">0</span></span><br><span class="line">&#125; SD_Error;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  SDIO Transfer state</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    SD_TRANSFER_OK   = <span class="number">0</span>,</span><br><span class="line">    SD_TRANSFER_BUSY = <span class="number">1</span>,</span><br><span class="line">    SD_TRANSFER_ERROR</span><br><span class="line">&#125; SDTransferState;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  SD Card States</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    SD_CARD_READY                  = ((<span class="keyword">uint32_t</span>)<span class="number">0x00000001</span>),</span><br><span class="line">    SD_CARD_IDENTIFICATION         = ((<span class="keyword">uint32_t</span>)<span class="number">0x00000002</span>),</span><br><span class="line">    SD_CARD_STANDBY                = ((<span class="keyword">uint32_t</span>)<span class="number">0x00000003</span>),</span><br><span class="line">    SD_CARD_TRANSFER               = ((<span class="keyword">uint32_t</span>)<span class="number">0x00000004</span>),</span><br><span class="line">    SD_CARD_SENDING                = ((<span class="keyword">uint32_t</span>)<span class="number">0x00000005</span>),</span><br><span class="line">    SD_CARD_RECEIVING              = ((<span class="keyword">uint32_t</span>)<span class="number">0x00000006</span>),</span><br><span class="line">    SD_CARD_PROGRAMMING            = ((<span class="keyword">uint32_t</span>)<span class="number">0x00000007</span>),</span><br><span class="line">    SD_CARD_DISCONNECTED           = ((<span class="keyword">uint32_t</span>)<span class="number">0x00000008</span>),</span><br><span class="line">    SD_CARD_ERROR                  = ((<span class="keyword">uint32_t</span>)<span class="number">0x000000FF</span>)</span><br><span class="line">&#125; SDCardState;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Card Specific Data: CSD Register</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  CSDStruct;            <span class="comment">/*!&lt; CSD structure */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  SysSpecVersion;       <span class="comment">/*!&lt; System specification version */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  Reserved1;            <span class="comment">/*!&lt; Reserved */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  TAAC;                 <span class="comment">/*!&lt; Data read access-time 1 */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  NSAC;                 <span class="comment">/*!&lt; Data read access-time 2 in CLK cycles */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  MaxBusClkFrec;        <span class="comment">/*!&lt; Max. bus clock frequency */</span></span><br><span class="line">    __IO <span class="keyword">uint16_t</span> CardComdClasses;      <span class="comment">/*!&lt; Card command classes */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  RdBlockLen;           <span class="comment">/*!&lt; Max. read data block length */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  PartBlockRead;        <span class="comment">/*!&lt; Partial blocks for read allowed */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  WrBlockMisalign;      <span class="comment">/*!&lt; Write block misalignment */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  RdBlockMisalign;      <span class="comment">/*!&lt; Read block misalignment */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  DSRImpl;              <span class="comment">/*!&lt; DSR implemented */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  Reserved2;            <span class="comment">/*!&lt; Reserved */</span></span><br><span class="line">    __IO <span class="keyword">uint32_t</span> DeviceSize;           <span class="comment">/*!&lt; Device Size */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  MaxRdCurrentVDDMin;   <span class="comment">/*!&lt; Max. read current @ VDD min */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  MaxRdCurrentVDDMax;   <span class="comment">/*!&lt; Max. read current @ VDD max */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  MaxWrCurrentVDDMin;   <span class="comment">/*!&lt; Max. write current @ VDD min */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  MaxWrCurrentVDDMax;   <span class="comment">/*!&lt; Max. write current @ VDD max */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  DeviceSizeMul;        <span class="comment">/*!&lt; Device size multiplier */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  EraseGrSize;          <span class="comment">/*!&lt; Erase group size */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  EraseGrMul;           <span class="comment">/*!&lt; Erase group size multiplier */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  WrProtectGrSize;      <span class="comment">/*!&lt; Write protect group size */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  WrProtectGrEnable;    <span class="comment">/*!&lt; Write protect group enable */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  ManDeflECC;           <span class="comment">/*!&lt; Manufacturer default ECC */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  WrSpeedFact;          <span class="comment">/*!&lt; Write speed factor */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  MaxWrBlockLen;        <span class="comment">/*!&lt; Max. write data block length */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  WriteBlockPaPartial;  <span class="comment">/*!&lt; Partial blocks for write allowed */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  Reserved3;            <span class="comment">/*!&lt; Reserded */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  ContentProtectAppli;  <span class="comment">/*!&lt; Content protection application */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  FileFormatGrouop;     <span class="comment">/*!&lt; File format group */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  CopyFlag;             <span class="comment">/*!&lt; Copy flag (OTP) */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  PermWrProtect;        <span class="comment">/*!&lt; Permanent write protection */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  TempWrProtect;        <span class="comment">/*!&lt; Temporary write protection */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  FileFormat;           <span class="comment">/*!&lt; File Format */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  ECC;                  <span class="comment">/*!&lt; ECC code */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  CSD_CRC;              <span class="comment">/*!&lt; CSD CRC */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  Reserved4;            <span class="comment">/*!&lt; always 1*/</span></span><br><span class="line">&#125; SD_CSD;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Card Identification Data: CID Register</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  ManufacturerID;       <span class="comment">/*!&lt; ManufacturerID */</span></span><br><span class="line">    __IO <span class="keyword">uint16_t</span> OEM_AppliID;          <span class="comment">/*!&lt; OEM/Application ID */</span></span><br><span class="line">    __IO <span class="keyword">uint32_t</span> ProdName1;            <span class="comment">/*!&lt; Product Name part1 */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  ProdName2;            <span class="comment">/*!&lt; Product Name part2*/</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  ProdRev;              <span class="comment">/*!&lt; Product Revision */</span></span><br><span class="line">    __IO <span class="keyword">uint32_t</span> ProdSN;               <span class="comment">/*!&lt; Product Serial Number */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  Reserved1;            <span class="comment">/*!&lt; Reserved1 */</span></span><br><span class="line">    __IO <span class="keyword">uint16_t</span> ManufactDate;         <span class="comment">/*!&lt; Manufacturing Date */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  CID_CRC;              <span class="comment">/*!&lt; CID CRC */</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span>  Reserved2;            <span class="comment">/*!&lt; always 1 */</span></span><br><span class="line">&#125; SD_CID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief SD Card Status</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    __IO <span class="keyword">uint8_t</span> DAT_BUS_WIDTH;</span><br><span class="line">    __IO <span class="keyword">uint8_t</span> SECURED_MODE;</span><br><span class="line">    __IO <span class="keyword">uint16_t</span> SD_CARD_TYPE;</span><br><span class="line">    __IO <span class="keyword">uint32_t</span> SIZE_OF_PROTECTED_AREA;</span><br><span class="line">    __IO <span class="keyword">uint8_t</span> SPEED_CLASS;</span><br><span class="line">    __IO <span class="keyword">uint8_t</span> PERFORMANCE_MOVE;</span><br><span class="line">    __IO <span class="keyword">uint8_t</span> AU_SIZE;</span><br><span class="line">    __IO <span class="keyword">uint16_t</span> ERASE_SIZE;</span><br><span class="line">    __IO <span class="keyword">uint8_t</span> ERASE_TIMEOUT;</span><br><span class="line">    __IO <span class="keyword">uint8_t</span> ERASE_OFFSET;</span><br><span class="line">&#125; SD_CardStatus;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief SD Card information</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    SD_CSD SD_csd;</span><br><span class="line">    SD_CID SD_cid;</span><br><span class="line">    <span class="keyword">uint64_t</span> CardCapacity;  <span class="comment">/*!&lt; Card Capacity */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> CardBlockSize; <span class="comment">/*!&lt; Card Block Size */</span></span><br><span class="line">    <span class="keyword">uint16_t</span> RCA;</span><br><span class="line">    <span class="keyword">uint8_t</span> CardType;</span><br><span class="line">&#125; SD_CardInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> SD_CardInfo SDCardInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*宏定义*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDIO_FIFO_ADDRESS                ((uint32_t)0x40018080)   <span class="comment">// SDIO_FIFO地址 = (SDIO地址 + 0x80) 至 (sdio地址 + 0xfc)</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  SDIO Intialization Frequency (400KHz max)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDIO_INIT_CLK_DIV                ((uint8_t)0xB2)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  SDIO Data Transfer Frequency (25MHz max)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">/*!&lt; SDIOCLK = HCLK, SDIO_CK = HCLK/(2 + SDIO_TRANSFER_CLK_DIV) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDIO_TRANSFER_CLK_DIV            ((uint8_t)0x01)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief SDIO Commands  Index</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_GO_IDLE_STATE                       ((uint8_t)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SEND_OP_COND                        ((uint8_t)1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_ALL_SEND_CID                        ((uint8_t)2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SET_REL_ADDR                        ((uint8_t)3) <span class="comment">/*!&lt; SDIO_SEND_REL_ADDR for SD Card */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SET_DSR                             ((uint8_t)4)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SDIO_SEN_OP_COND                    ((uint8_t)5)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_HS_SWITCH                           ((uint8_t)6)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SEL_DESEL_CARD                      ((uint8_t)7)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_HS_SEND_EXT_CSD                     ((uint8_t)8)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SEND_CSD                            ((uint8_t)9)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SEND_CID                            ((uint8_t)10)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_READ_DAT_UNTIL_STOP                 ((uint8_t)11) <span class="comment">/*!&lt; SD Card doesn&#x27;t support it */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_STOP_TRANSMISSION                   ((uint8_t)12)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SEND_STATUS                         ((uint8_t)13)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_HS_BUSTEST_READ                     ((uint8_t)14)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_GO_INACTIVE_STATE                   ((uint8_t)15)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SET_BLOCKLEN                        ((uint8_t)16)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_READ_SINGLE_BLOCK                   ((uint8_t)17)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_READ_MULT_BLOCK                     ((uint8_t)18)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_HS_BUSTEST_WRITE                    ((uint8_t)19)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_WRITE_DAT_UNTIL_STOP                ((uint8_t)20) <span class="comment">/*!&lt; SD Card doesn&#x27;t support it */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SET_BLOCK_COUNT                     ((uint8_t)23) <span class="comment">/*!&lt; SD Card doesn&#x27;t support it */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_WRITE_SINGLE_BLOCK                  ((uint8_t)24)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_WRITE_MULT_BLOCK                    ((uint8_t)25)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_PROG_CID                            ((uint8_t)26) <span class="comment">/*!&lt; reserved for manufacturers */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_PROG_CSD                            ((uint8_t)27)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SET_WRITE_PROT                      ((uint8_t)28)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_CLR_WRITE_PROT                      ((uint8_t)29)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SEND_WRITE_PROT                     ((uint8_t)30)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SD_ERASE_GRP_START                  ((uint8_t)32) <span class="comment">/*!&lt; To set the address of the first write</span></span></span><br><span class="line"><span class="comment"><span class="meta">                                                                  block to be erased. (For SD card only) */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SD_ERASE_GRP_END                    ((uint8_t)33) <span class="comment">/*!&lt; To set the address of the last write block of the</span></span></span><br><span class="line"><span class="comment"><span class="meta">                                                                  continuous range to be erased. (For SD card only) */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_ERASE_GRP_START                     ((uint8_t)35) <span class="comment">/*!&lt; To set the address of the first write block to be erased.</span></span></span><br><span class="line"><span class="comment"><span class="meta">                                                                  (For MMC card only spec 3.31) */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_ERASE_GRP_END                       ((uint8_t)36) <span class="comment">/*!&lt; To set the address of the last write block of the</span></span></span><br><span class="line"><span class="comment"><span class="meta">                                                                  continuous range to be erased. (For MMC card only spec 3.31) */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_ERASE                               ((uint8_t)38)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_FAST_IO                             ((uint8_t)39) <span class="comment">/*!&lt; SD Card doesn&#x27;t support it */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_GO_IRQ_STATE                        ((uint8_t)40) <span class="comment">/*!&lt; SD Card doesn&#x27;t support it */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_LOCK_UNLOCK                         ((uint8_t)42)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_APP_CMD                             ((uint8_t)55)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_GEN_CMD                             ((uint8_t)56)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_NO_CMD                              ((uint8_t)64)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief Following commands are SD Card Specific commands.</span></span><br><span class="line"><span class="comment">  *        SDIO_APP_CMD ：CMD55 should be sent before sending these commands.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_APP_SD_SET_BUSWIDTH                 ((uint8_t)6)  <span class="comment">/*!&lt; For SD Card only */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SD_APP_STAUS                        ((uint8_t)13) <span class="comment">/*!&lt; For SD Card only */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SD_APP_SEND_NUM_WRITE_BLOCKS        ((uint8_t)22) <span class="comment">/*!&lt; For SD Card only */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SD_APP_OP_COND                      ((uint8_t)41) <span class="comment">/*!&lt; For SD Card only */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SD_APP_SET_CLR_CARD_DETECT          ((uint8_t)42) <span class="comment">/*!&lt; For SD Card only */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SD_APP_SEND_SCR                     ((uint8_t)51) <span class="comment">/*!&lt; For SD Card only */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SDIO_RW_DIRECT                      ((uint8_t)52) <span class="comment">/*!&lt; For SD I/O Card only */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SDIO_RW_EXTENDED                    ((uint8_t)53) <span class="comment">/*!&lt; For SD I/O Card only */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief Following commands are SD Card Specific security commands.</span></span><br><span class="line"><span class="comment">  *        SDIO_APP_CMD should be sent before sending these commands.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SD_APP_GET_MKB                      ((uint8_t)43) <span class="comment">/*!&lt; For SD Card only */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SD_APP_GET_MID                      ((uint8_t)44) <span class="comment">/*!&lt; For SD Card only */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SD_APP_SET_CER_RN1                  ((uint8_t)45) <span class="comment">/*!&lt; For SD Card only */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SD_APP_GET_CER_RN2                  ((uint8_t)46) <span class="comment">/*!&lt; For SD Card only */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SD_APP_SET_CER_RES2                 ((uint8_t)47) <span class="comment">/*!&lt; For SD Card only */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SD_APP_GET_CER_RES1                 ((uint8_t)48) <span class="comment">/*!&lt; For SD Card only */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SD_APP_SECURE_READ_MULTIPLE_BLOCK   ((uint8_t)18) <span class="comment">/*!&lt; For SD Card only */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SD_APP_SECURE_WRITE_MULTIPLE_BLOCK  ((uint8_t)25) <span class="comment">/*!&lt; For SD Card only */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SD_APP_SECURE_ERASE                 ((uint8_t)38) <span class="comment">/*!&lt; For SD Card only */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SD_APP_CHANGE_SECURE_AREA           ((uint8_t)49) <span class="comment">/*!&lt; For SD Card only */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CMD_SD_APP_SECURE_WRITE_MKB             ((uint8_t)48) <span class="comment">/*!&lt; For SD Card only */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Uncomment the following line to select the SDIO Data transfer mode */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_DMA_MODE                                ((uint32_t)0x00000000)</span></span><br><span class="line"><span class="comment">/*#define SD_POLLING_MODE                            ((uint32_t)0x00000002)*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  SD detection on its memory slot</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_PRESENT                                 ((uint8_t)0x01)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_NOT_PRESENT                             ((uint8_t)0x00)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief Supported SD Memory Cards</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDIO_STD_CAPACITY_SD_CARD_V1_1             ((uint32_t)0x00000000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDIO_STD_CAPACITY_SD_CARD_V2_0             ((uint32_t)0x00000001)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDIO_HIGH_CAPACITY_SD_CARD                 ((uint32_t)0x00000002)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDIO_MULTIMEDIA_CARD                       ((uint32_t)0x00000003)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDIO_SECURE_DIGITAL_IO_CARD                ((uint32_t)0x00000004)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDIO_HIGH_SPEED_MULTIMEDIA_CARD            ((uint32_t)0x00000005)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDIO_SECURE_DIGITAL_IO_COMBO_CARD          ((uint32_t)0x00000006)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDIO_HIGH_CAPACITY_MMC_CARD                ((uint32_t)0x00000007)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Exported functions ------------------------------------------------------- */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SD_DeInit</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">SDTransferState <span class="title">SD_GetStatus</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">SDCardState <span class="title">SD_GetState</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">SD_Detect</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_PowerON</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_PowerOFF</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_InitializeCards</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_GetCardInfo</span><span class="params">(SD_CardInfo *cardinfo)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_GetCardStatus</span><span class="params">(SD_CardStatus *cardstatus)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_EnableWideBusOperation</span><span class="params">(<span class="keyword">uint32_t</span> WideMode)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_SelectDeselect</span><span class="params">(<span class="keyword">uint32_t</span> addr)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_ReadBlock</span><span class="params">(<span class="keyword">uint8_t</span> *readbuff, <span class="keyword">uint64_t</span> ReadAddr, <span class="keyword">uint16_t</span> BlockSize)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_ReadMultiBlocks</span><span class="params">(<span class="keyword">uint8_t</span> *readbuff, <span class="keyword">uint64_t</span> ReadAddr, <span class="keyword">uint16_t</span> BlockSize, <span class="keyword">uint32_t</span> NumberOfBlocks)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_WriteBlock</span><span class="params">(<span class="keyword">uint8_t</span> *writebuff, <span class="keyword">uint64_t</span> WriteAddr, <span class="keyword">uint16_t</span> BlockSize)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_WriteMultiBlocks</span><span class="params">(<span class="keyword">uint8_t</span> *writebuff, <span class="keyword">uint64_t</span> WriteAddr, <span class="keyword">uint16_t</span> BlockSize, <span class="keyword">uint32_t</span> NumberOfBlocks)</span></span>;</span><br><span class="line"><span class="function">SDTransferState <span class="title">SD_GetTransferState</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_StopTransfer</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_Erase</span><span class="params">(<span class="keyword">uint32_t</span> startaddr, <span class="keyword">uint32_t</span> endaddr)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_SendStatus</span><span class="params">(<span class="keyword">uint32_t</span> *pcardstatus)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_SendSDStatus</span><span class="params">(<span class="keyword">uint32_t</span> *psdstatus)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_ProcessIRQSrc</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_WaitReadOperation</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function">SD_Error <span class="title">SD_WaitWriteOperation</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __BSP_SDIO_H__ */</span></span></span><br></pre></td></tr></table></figure><h3 id="bsp_sdio.c">3.2 bsp_sdio.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br><span class="line">2051</span><br><span class="line">2052</span><br><span class="line">2053</span><br><span class="line">2054</span><br><span class="line">2055</span><br><span class="line">2056</span><br><span class="line">2057</span><br><span class="line">2058</span><br><span class="line">2059</span><br><span class="line">2060</span><br><span class="line">2061</span><br><span class="line">2062</span><br><span class="line">2063</span><br><span class="line">2064</span><br><span class="line">2065</span><br><span class="line">2066</span><br><span class="line">2067</span><br><span class="line">2068</span><br><span class="line">2069</span><br><span class="line">2070</span><br><span class="line">2071</span><br><span class="line">2072</span><br><span class="line">2073</span><br><span class="line">2074</span><br><span class="line">2075</span><br><span class="line">2076</span><br><span class="line">2077</span><br><span class="line">2078</span><br><span class="line">2079</span><br><span class="line">2080</span><br><span class="line">2081</span><br><span class="line">2082</span><br><span class="line">2083</span><br><span class="line">2084</span><br><span class="line">2085</span><br><span class="line">2086</span><br><span class="line">2087</span><br><span class="line">2088</span><br><span class="line">2089</span><br><span class="line">2090</span><br><span class="line">2091</span><br><span class="line">2092</span><br><span class="line">2093</span><br><span class="line">2094</span><br><span class="line">2095</span><br><span class="line">2096</span><br><span class="line">2097</span><br><span class="line">2098</span><br><span class="line">2099</span><br><span class="line">2100</span><br><span class="line">2101</span><br><span class="line">2102</span><br><span class="line">2103</span><br><span class="line">2104</span><br><span class="line">2105</span><br><span class="line">2106</span><br><span class="line">2107</span><br><span class="line">2108</span><br><span class="line">2109</span><br><span class="line">2110</span><br><span class="line">2111</span><br><span class="line">2112</span><br><span class="line">2113</span><br><span class="line">2114</span><br><span class="line">2115</span><br><span class="line">2116</span><br><span class="line">2117</span><br><span class="line">2118</span><br><span class="line">2119</span><br><span class="line">2120</span><br><span class="line">2121</span><br><span class="line">2122</span><br><span class="line">2123</span><br><span class="line">2124</span><br><span class="line">2125</span><br><span class="line">2126</span><br><span class="line">2127</span><br><span class="line">2128</span><br><span class="line">2129</span><br><span class="line">2130</span><br><span class="line">2131</span><br><span class="line">2132</span><br><span class="line">2133</span><br><span class="line">2134</span><br><span class="line">2135</span><br><span class="line">2136</span><br><span class="line">2137</span><br><span class="line">2138</span><br><span class="line">2139</span><br><span class="line">2140</span><br><span class="line">2141</span><br><span class="line">2142</span><br><span class="line">2143</span><br><span class="line">2144</span><br><span class="line">2145</span><br><span class="line">2146</span><br><span class="line">2147</span><br><span class="line">2148</span><br><span class="line">2149</span><br><span class="line">2150</span><br><span class="line">2151</span><br><span class="line">2152</span><br><span class="line">2153</span><br><span class="line">2154</span><br><span class="line">2155</span><br><span class="line">2156</span><br><span class="line">2157</span><br><span class="line">2158</span><br><span class="line">2159</span><br><span class="line">2160</span><br><span class="line">2161</span><br><span class="line">2162</span><br><span class="line">2163</span><br><span class="line">2164</span><br><span class="line">2165</span><br><span class="line">2166</span><br><span class="line">2167</span><br><span class="line">2168</span><br><span class="line">2169</span><br><span class="line">2170</span><br><span class="line">2171</span><br><span class="line">2172</span><br><span class="line">2173</span><br><span class="line">2174</span><br><span class="line">2175</span><br><span class="line">2176</span><br><span class="line">2177</span><br><span class="line">2178</span><br><span class="line">2179</span><br><span class="line">2180</span><br><span class="line">2181</span><br><span class="line">2182</span><br><span class="line">2183</span><br><span class="line">2184</span><br><span class="line">2185</span><br><span class="line">2186</span><br><span class="line">2187</span><br><span class="line">2188</span><br><span class="line">2189</span><br><span class="line">2190</span><br><span class="line">2191</span><br><span class="line">2192</span><br><span class="line">2193</span><br><span class="line">2194</span><br><span class="line">2195</span><br><span class="line">2196</span><br><span class="line">2197</span><br><span class="line">2198</span><br><span class="line">2199</span><br><span class="line">2200</span><br><span class="line">2201</span><br><span class="line">2202</span><br><span class="line">2203</span><br><span class="line">2204</span><br><span class="line">2205</span><br><span class="line">2206</span><br><span class="line">2207</span><br><span class="line">2208</span><br><span class="line">2209</span><br><span class="line">2210</span><br><span class="line">2211</span><br><span class="line">2212</span><br><span class="line">2213</span><br><span class="line">2214</span><br><span class="line">2215</span><br><span class="line">2216</span><br><span class="line">2217</span><br><span class="line">2218</span><br><span class="line">2219</span><br><span class="line">2220</span><br><span class="line">2221</span><br><span class="line">2222</span><br><span class="line">2223</span><br><span class="line">2224</span><br><span class="line">2225</span><br><span class="line">2226</span><br><span class="line">2227</span><br><span class="line">2228</span><br><span class="line">2229</span><br><span class="line">2230</span><br><span class="line">2231</span><br><span class="line">2232</span><br><span class="line">2233</span><br><span class="line">2234</span><br><span class="line">2235</span><br><span class="line">2236</span><br><span class="line">2237</span><br><span class="line">2238</span><br><span class="line">2239</span><br><span class="line">2240</span><br><span class="line">2241</span><br><span class="line">2242</span><br><span class="line">2243</span><br><span class="line">2244</span><br><span class="line">2245</span><br><span class="line">2246</span><br><span class="line">2247</span><br><span class="line">2248</span><br><span class="line">2249</span><br><span class="line">2250</span><br><span class="line">2251</span><br><span class="line">2252</span><br><span class="line">2253</span><br><span class="line">2254</span><br><span class="line">2255</span><br><span class="line">2256</span><br><span class="line">2257</span><br><span class="line">2258</span><br><span class="line">2259</span><br><span class="line">2260</span><br><span class="line">2261</span><br><span class="line">2262</span><br><span class="line">2263</span><br><span class="line">2264</span><br><span class="line">2265</span><br><span class="line">2266</span><br><span class="line">2267</span><br><span class="line">2268</span><br><span class="line">2269</span><br><span class="line">2270</span><br><span class="line">2271</span><br><span class="line">2272</span><br><span class="line">2273</span><br><span class="line">2274</span><br><span class="line">2275</span><br><span class="line">2276</span><br><span class="line">2277</span><br><span class="line">2278</span><br><span class="line">2279</span><br><span class="line">2280</span><br><span class="line">2281</span><br><span class="line">2282</span><br><span class="line">2283</span><br><span class="line">2284</span><br><span class="line">2285</span><br><span class="line">2286</span><br><span class="line">2287</span><br><span class="line">2288</span><br><span class="line">2289</span><br><span class="line">2290</span><br><span class="line">2291</span><br><span class="line">2292</span><br><span class="line">2293</span><br><span class="line">2294</span><br><span class="line">2295</span><br><span class="line">2296</span><br><span class="line">2297</span><br><span class="line">2298</span><br><span class="line">2299</span><br><span class="line">2300</span><br><span class="line">2301</span><br><span class="line">2302</span><br><span class="line">2303</span><br><span class="line">2304</span><br><span class="line">2305</span><br><span class="line">2306</span><br><span class="line">2307</span><br><span class="line">2308</span><br><span class="line">2309</span><br><span class="line">2310</span><br><span class="line">2311</span><br><span class="line">2312</span><br><span class="line">2313</span><br><span class="line">2314</span><br><span class="line">2315</span><br><span class="line">2316</span><br><span class="line">2317</span><br><span class="line">2318</span><br><span class="line">2319</span><br><span class="line">2320</span><br><span class="line">2321</span><br><span class="line">2322</span><br><span class="line">2323</span><br><span class="line">2324</span><br><span class="line">2325</span><br><span class="line">2326</span><br><span class="line">2327</span><br><span class="line">2328</span><br><span class="line">2329</span><br><span class="line">2330</span><br><span class="line">2331</span><br><span class="line">2332</span><br><span class="line">2333</span><br><span class="line">2334</span><br><span class="line">2335</span><br><span class="line">2336</span><br><span class="line">2337</span><br><span class="line">2338</span><br><span class="line">2339</span><br><span class="line">2340</span><br><span class="line">2341</span><br><span class="line">2342</span><br><span class="line">2343</span><br><span class="line">2344</span><br><span class="line">2345</span><br><span class="line">2346</span><br><span class="line">2347</span><br><span class="line">2348</span><br><span class="line">2349</span><br><span class="line">2350</span><br><span class="line">2351</span><br><span class="line">2352</span><br><span class="line">2353</span><br><span class="line">2354</span><br><span class="line">2355</span><br><span class="line">2356</span><br><span class="line">2357</span><br><span class="line">2358</span><br><span class="line">2359</span><br><span class="line">2360</span><br><span class="line">2361</span><br><span class="line">2362</span><br><span class="line">2363</span><br><span class="line">2364</span><br><span class="line">2365</span><br><span class="line">2366</span><br><span class="line">2367</span><br><span class="line">2368</span><br><span class="line">2369</span><br><span class="line">2370</span><br><span class="line">2371</span><br><span class="line">2372</span><br><span class="line">2373</span><br><span class="line">2374</span><br><span class="line">2375</span><br><span class="line">2376</span><br><span class="line">2377</span><br><span class="line">2378</span><br><span class="line">2379</span><br><span class="line">2380</span><br><span class="line">2381</span><br><span class="line">2382</span><br><span class="line">2383</span><br><span class="line">2384</span><br><span class="line">2385</span><br><span class="line">2386</span><br><span class="line">2387</span><br><span class="line">2388</span><br><span class="line">2389</span><br><span class="line">2390</span><br><span class="line">2391</span><br><span class="line">2392</span><br><span class="line">2393</span><br><span class="line">2394</span><br><span class="line">2395</span><br><span class="line">2396</span><br><span class="line">2397</span><br><span class="line">2398</span><br><span class="line">2399</span><br><span class="line">2400</span><br><span class="line">2401</span><br><span class="line">2402</span><br><span class="line">2403</span><br><span class="line">2404</span><br><span class="line">2405</span><br><span class="line">2406</span><br><span class="line">2407</span><br><span class="line">2408</span><br><span class="line">2409</span><br><span class="line">2410</span><br><span class="line">2411</span><br><span class="line">2412</span><br><span class="line">2413</span><br><span class="line">2414</span><br><span class="line">2415</span><br><span class="line">2416</span><br><span class="line">2417</span><br><span class="line">2418</span><br><span class="line">2419</span><br><span class="line">2420</span><br><span class="line">2421</span><br><span class="line">2422</span><br><span class="line">2423</span><br><span class="line">2424</span><br><span class="line">2425</span><br><span class="line">2426</span><br><span class="line">2427</span><br><span class="line">2428</span><br><span class="line">2429</span><br><span class="line">2430</span><br><span class="line">2431</span><br><span class="line">2432</span><br><span class="line">2433</span><br><span class="line">2434</span><br><span class="line">2435</span><br><span class="line">2436</span><br><span class="line">2437</span><br><span class="line">2438</span><br><span class="line">2439</span><br><span class="line">2440</span><br><span class="line">2441</span><br><span class="line">2442</span><br><span class="line">2443</span><br><span class="line">2444</span><br><span class="line">2445</span><br><span class="line">2446</span><br><span class="line">2447</span><br><span class="line">2448</span><br><span class="line">2449</span><br><span class="line">2450</span><br><span class="line">2451</span><br><span class="line">2452</span><br><span class="line">2453</span><br><span class="line">2454</span><br><span class="line">2455</span><br><span class="line">2456</span><br><span class="line">2457</span><br><span class="line">2458</span><br><span class="line">2459</span><br><span class="line">2460</span><br><span class="line">2461</span><br><span class="line">2462</span><br><span class="line">2463</span><br><span class="line">2464</span><br><span class="line">2465</span><br><span class="line">2466</span><br><span class="line">2467</span><br><span class="line">2468</span><br><span class="line">2469</span><br><span class="line">2470</span><br><span class="line">2471</span><br><span class="line">2472</span><br><span class="line">2473</span><br><span class="line">2474</span><br><span class="line">2475</span><br><span class="line">2476</span><br><span class="line">2477</span><br><span class="line">2478</span><br><span class="line">2479</span><br><span class="line">2480</span><br><span class="line">2481</span><br><span class="line">2482</span><br><span class="line">2483</span><br><span class="line">2484</span><br><span class="line">2485</span><br><span class="line">2486</span><br><span class="line">2487</span><br><span class="line">2488</span><br><span class="line">2489</span><br><span class="line">2490</span><br><span class="line">2491</span><br><span class="line">2492</span><br><span class="line">2493</span><br><span class="line">2494</span><br><span class="line">2495</span><br><span class="line">2496</span><br><span class="line">2497</span><br><span class="line">2498</span><br><span class="line">2499</span><br><span class="line">2500</span><br><span class="line">2501</span><br><span class="line">2502</span><br><span class="line">2503</span><br><span class="line">2504</span><br><span class="line">2505</span><br><span class="line">2506</span><br><span class="line">2507</span><br><span class="line">2508</span><br><span class="line">2509</span><br><span class="line">2510</span><br><span class="line">2511</span><br><span class="line">2512</span><br><span class="line">2513</span><br><span class="line">2514</span><br><span class="line">2515</span><br><span class="line">2516</span><br><span class="line">2517</span><br><span class="line">2518</span><br><span class="line">2519</span><br><span class="line">2520</span><br><span class="line">2521</span><br><span class="line">2522</span><br><span class="line">2523</span><br><span class="line">2524</span><br><span class="line">2525</span><br><span class="line">2526</span><br><span class="line">2527</span><br><span class="line">2528</span><br><span class="line">2529</span><br><span class="line">2530</span><br><span class="line">2531</span><br><span class="line">2532</span><br><span class="line">2533</span><br><span class="line">2534</span><br><span class="line">2535</span><br><span class="line">2536</span><br><span class="line">2537</span><br><span class="line">2538</span><br><span class="line">2539</span><br><span class="line">2540</span><br><span class="line">2541</span><br><span class="line">2542</span><br><span class="line">2543</span><br><span class="line">2544</span><br><span class="line">2545</span><br><span class="line">2546</span><br><span class="line">2547</span><br><span class="line">2548</span><br><span class="line">2549</span><br><span class="line">2550</span><br><span class="line">2551</span><br><span class="line">2552</span><br><span class="line">2553</span><br><span class="line">2554</span><br><span class="line">2555</span><br><span class="line">2556</span><br><span class="line">2557</span><br><span class="line">2558</span><br><span class="line">2559</span><br><span class="line">2560</span><br><span class="line">2561</span><br><span class="line">2562</span><br><span class="line">2563</span><br><span class="line">2564</span><br><span class="line">2565</span><br><span class="line">2566</span><br><span class="line">2567</span><br><span class="line">2568</span><br><span class="line">2569</span><br><span class="line">2570</span><br><span class="line">2571</span><br><span class="line">2572</span><br><span class="line">2573</span><br><span class="line">2574</span><br><span class="line">2575</span><br><span class="line">2576</span><br><span class="line">2577</span><br><span class="line">2578</span><br><span class="line">2579</span><br><span class="line">2580</span><br><span class="line">2581</span><br><span class="line">2582</span><br><span class="line">2583</span><br><span class="line">2584</span><br><span class="line">2585</span><br><span class="line">2586</span><br><span class="line">2587</span><br><span class="line">2588</span><br><span class="line">2589</span><br><span class="line">2590</span><br><span class="line">2591</span><br><span class="line">2592</span><br><span class="line">2593</span><br><span class="line">2594</span><br><span class="line">2595</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">  * @file    stm32_eval_sdio_sd.c</span></span><br><span class="line"><span class="comment">  * @author  MCD Application Team</span></span><br><span class="line"><span class="comment">  * @version V4.5.0</span></span><br><span class="line"><span class="comment">  * @date    07-March-2011</span></span><br><span class="line"><span class="comment">  * @brief   This file provides a set of functions needed to manage the SDIO SD</span></span><br><span class="line"><span class="comment">  *          Card memory mounted on STM32xx-EVAL board (refer to stm32_eval.h</span></span><br><span class="line"><span class="comment">  *          to know about the boards supporting this memory).</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *  @verbatim</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *          ===================================================================</span></span><br><span class="line"><span class="comment">  *                                   How to use this driver</span></span><br><span class="line"><span class="comment">  *          ===================================================================</span></span><br><span class="line"><span class="comment">  *          It implements a high level communication layer for read and write</span></span><br><span class="line"><span class="comment">  *          from/to this memory. The needed STM32 hardware resources (SDIO and</span></span><br><span class="line"><span class="comment">  *          GPIO) are defined in stm32xx_eval.h file, and the initialization is</span></span><br><span class="line"><span class="comment">  *          performed in SD_LowLevel_Init() function declared in stm32xx_eval.c</span></span><br><span class="line"><span class="comment">  *          file.</span></span><br><span class="line"><span class="comment">  *          You can easily tailor this driver to any other development board,</span></span><br><span class="line"><span class="comment">  *          by just adapting the defines for hardware resources and</span></span><br><span class="line"><span class="comment">  *          SD_LowLevel_Init() function.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *          A - SD Card Initialization and configuration</span></span><br><span class="line"><span class="comment">  *          ============================================</span></span><br><span class="line"><span class="comment">  *            - To initialize the SD Card, use the SD_Init() function.  It</span></span><br><span class="line"><span class="comment">  *              Initializes the SD Card and put it into StandBy State (Ready</span></span><br><span class="line"><span class="comment">  *              for data transfer). This function provide the following operations:</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *              1 - Apply the SD Card initialization process at 400KHz and check</span></span><br><span class="line"><span class="comment">  *                  the SD Card type (Standard Capacity or High Capacity). You</span></span><br><span class="line"><span class="comment">  *                  can change or adapt this frequency by adjusting the</span></span><br><span class="line"><span class="comment">  *                  &quot;SDIO_INIT_CLK_DIV&quot; define inside the stm32xx_eval.h file.</span></span><br><span class="line"><span class="comment">  *                  The SD Card frequency (SDIO_CK) is computed as follows:</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *                     +---------------------------------------------+</span></span><br><span class="line"><span class="comment">  *                     | SDIO_CK = SDIOCLK / (SDIO_INIT_CLK_DIV + 2) |</span></span><br><span class="line"><span class="comment">  *                     +---------------------------------------------+</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *                  In initialization mode and according to the SD Card standard,</span></span><br><span class="line"><span class="comment">  *                  make sure that the SDIO_CK frequency don&#x27;t exceed 400KHz.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *              2 - Get the SD CID and CSD data. All these information are</span></span><br><span class="line"><span class="comment">  *                  managed by the SDCardInfo structure. This structure provide</span></span><br><span class="line"><span class="comment">  *                  also ready computed SD Card capacity and Block size.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *              3 - Configure the SD Card Data transfer frequency. By Default,</span></span><br><span class="line"><span class="comment">  *                  the card transfer frequency is set to 24MHz. You can change</span></span><br><span class="line"><span class="comment">  *                  or adapt this frequency by adjusting the &quot;SDIO_TRANSFER_CLK_DIV&quot;</span></span><br><span class="line"><span class="comment">  *                  define inside the stm32xx_eval.h file.</span></span><br><span class="line"><span class="comment">  *                  The SD Card frequency (SDIO_CK) is computed as follows:</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *                     +---------------------------------------------+</span></span><br><span class="line"><span class="comment">  *                     | SDIO_CK = SDIOCLK / (SDIO_INIT_CLK_DIV + 2) |</span></span><br><span class="line"><span class="comment">  *                     +---------------------------------------------+</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *                  In transfer mode and according to the SD Card standard,</span></span><br><span class="line"><span class="comment">  *                  make sure that the SDIO_CK frequency don&#x27;t exceed 25MHz</span></span><br><span class="line"><span class="comment">  *                  and 50MHz in High-speed mode switch.</span></span><br><span class="line"><span class="comment">  *                  To be able to use a frequency higher than 24MHz, you should</span></span><br><span class="line"><span class="comment">  *                  use the SDIO peripheral in bypass mode. Refer to the</span></span><br><span class="line"><span class="comment">  *                  corresponding reference manual for more details.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *              4 -  Select the corresponding SD Card according to the address</span></span><br><span class="line"><span class="comment">  *                   read with the step 2.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *              5 -  Configure the SD Card in wide bus mode: 4-bits data.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *          B - SD Card Read operation</span></span><br><span class="line"><span class="comment">  *          ==========================</span></span><br><span class="line"><span class="comment">  *           - You can read SD card by using two function: SD_ReadBlock() and</span></span><br><span class="line"><span class="comment">  *             SD_ReadMultiBlocks() functions. These functions support only</span></span><br><span class="line"><span class="comment">  *             512-byte block length.</span></span><br><span class="line"><span class="comment">  *           - The SD_ReadBlock() function read only one block (512-byte). This</span></span><br><span class="line"><span class="comment">  *             function can transfer the data using DMA controller or using</span></span><br><span class="line"><span class="comment">  *             polling mode. To select between DMA or polling mode refer to</span></span><br><span class="line"><span class="comment">  *             &quot;SD_DMA_MODE&quot; or &quot;SD_POLLING_MODE&quot; inside the stm32_eval_sdio_sd.h</span></span><br><span class="line"><span class="comment">  *             file and uncomment the corresponding line. By default the SD DMA</span></span><br><span class="line"><span class="comment">  *             mode is selected</span></span><br><span class="line"><span class="comment">  *           - The SD_ReadMultiBlocks() function read only mutli blocks (multiple</span></span><br><span class="line"><span class="comment">  *             of 512-byte).</span></span><br><span class="line"><span class="comment">  *           - Any read operation should be followed by two functions to check</span></span><br><span class="line"><span class="comment">  *             if the DMA Controller and SD Card status.</span></span><br><span class="line"><span class="comment">  *              - SD_ReadWaitOperation(): this function insure that the DMA</span></span><br><span class="line"><span class="comment">  *                controller has finished all data transfer.</span></span><br><span class="line"><span class="comment">  *              - SD_GetStatus(): to check that the SD Card has finished the</span></span><br><span class="line"><span class="comment">  *                data transfer and it is ready for data.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *           - The DMA transfer is finished by the SDIO Data End interrupt. User</span></span><br><span class="line"><span class="comment">  *             has to call the SD_ProcessIRQ() function inside the SDIO_IRQHandler().</span></span><br><span class="line"><span class="comment">  *             Don&#x27;t forget to enable the SDIO_IRQn interrupt using the NVIC controller.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *          C - SD Card Write operation</span></span><br><span class="line"><span class="comment">  *          ===========================</span></span><br><span class="line"><span class="comment">  *           - You can write SD card by using two function: SD_WriteBlock() and</span></span><br><span class="line"><span class="comment">  *             SD_WriteMultiBlocks() functions. These functions support only</span></span><br><span class="line"><span class="comment">  *             512-byte block length.</span></span><br><span class="line"><span class="comment">  *           - The SD_WriteBlock() function write only one block (512-byte). This</span></span><br><span class="line"><span class="comment">  *             function can transfer the data using DMA controller or using</span></span><br><span class="line"><span class="comment">  *             polling mode. To select between DMA or polling mode refer to</span></span><br><span class="line"><span class="comment">  *             &quot;SD_DMA_MODE&quot; or &quot;SD_POLLING_MODE&quot; inside the stm32_eval_sdio_sd.h</span></span><br><span class="line"><span class="comment">  *             file and uncomment the corresponding line. By default the SD DMA</span></span><br><span class="line"><span class="comment">  *             mode is selected</span></span><br><span class="line"><span class="comment">  *           - The SD_WriteMultiBlocks() function write only mutli blocks (multiple</span></span><br><span class="line"><span class="comment">  *             of 512-byte).</span></span><br><span class="line"><span class="comment">  *           - Any write operation should be followed by two functions to check</span></span><br><span class="line"><span class="comment">  *             if the DMA Controller and SD Card status.</span></span><br><span class="line"><span class="comment">  *              - SD_ReadWaitOperation(): this function insure that the DMA</span></span><br><span class="line"><span class="comment">  *                controller has finished all data transfer.</span></span><br><span class="line"><span class="comment">  *              - SD_GetStatus(): to check that the SD Card has finished the</span></span><br><span class="line"><span class="comment">  *                data transfer and it is ready for data.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *           - The DMA transfer is finished by the SDIO Data End interrupt. User</span></span><br><span class="line"><span class="comment">  *             has to call the SD_ProcessIRQ() function inside the SDIO_IRQHandler().</span></span><br><span class="line"><span class="comment">  *             Don&#x27;t forget to enable the SDIO_IRQn interrupt using the NVIC controller.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *          D - SD card status</span></span><br><span class="line"><span class="comment">  *          ==================</span></span><br><span class="line"><span class="comment">  *           - At any time, you can check the SD Card status and get the SD card</span></span><br><span class="line"><span class="comment">  *             state by using the SD_GetStatus() function. This function checks</span></span><br><span class="line"><span class="comment">  *             first if the SD card is still connected and then get the internal</span></span><br><span class="line"><span class="comment">  *             SD Card transfer state.</span></span><br><span class="line"><span class="comment">  *           - You can also get the SD card SD Status register by using the</span></span><br><span class="line"><span class="comment">  *             SD_SendSDStatus() function.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *          E - Programming Model</span></span><br><span class="line"><span class="comment">  *          =====================</span></span><br><span class="line"><span class="comment">  *             Status = SD_Init(); // Initialization Step as described in section A</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *             // SDIO Interrupt ENABLE</span></span><br><span class="line"><span class="comment">  *             NVIC_InitStructure.NVIC_IRQChannel = SDIO_IRQn;</span></span><br><span class="line"><span class="comment">  *             NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;</span></span><br><span class="line"><span class="comment">  *             NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;</span></span><br><span class="line"><span class="comment">  *             NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span></span><br><span class="line"><span class="comment">  *             NVIC_Init(&amp;NVIC_InitStructure);</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *             // Write operation as described in Section C</span></span><br><span class="line"><span class="comment">  *             Status = SD_WriteBlock(buffer, address, 512);</span></span><br><span class="line"><span class="comment">  *             Status = SD_WaitWriteOperation();</span></span><br><span class="line"><span class="comment">  *             while(SD_GetStatus() != SD_TRANSFER_OK);</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *             Status = SD_WriteMultiBlocks(buffer, address, 512, NUMBEROFBLOCKS);</span></span><br><span class="line"><span class="comment">  *             Status = SD_WaitWriteOperation();</span></span><br><span class="line"><span class="comment">  *             while(SD_GetStatus() != SD_TRANSFER_OK);</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *             // Read operation as described in Section B</span></span><br><span class="line"><span class="comment">  *             Status = SD_ReadBlock(buffer, address, 512);</span></span><br><span class="line"><span class="comment">  *             Status = SD_WaitReadOperation();</span></span><br><span class="line"><span class="comment">  *             while(SD_GetStatus() != SD_TRANSFER_OK);</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *             Status = SD_ReadMultiBlocks(buffer, address, 512, NUMBEROFBLOCKS);</span></span><br><span class="line"><span class="comment">  *             Status = SD_WaitReadOperation();</span></span><br><span class="line"><span class="comment">  *             while(SD_GetStatus() != SD_TRANSFER_OK);</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *          STM32 SDIO Pin assignment</span></span><br><span class="line"><span class="comment">  *          =========================</span></span><br><span class="line"><span class="comment">  *          +-----------------------------------------------------------+</span></span><br><span class="line"><span class="comment">  *          |                     Pin assignment                        |</span></span><br><span class="line"><span class="comment">  *          +-----------------------------+---------------+-------------+</span></span><br><span class="line"><span class="comment">  *          |  STM32 SDIO Pins            |     SD        |    Pin      |</span></span><br><span class="line"><span class="comment">  *          +-----------------------------+---------------+-------------+</span></span><br><span class="line"><span class="comment">  *          |      SDIO D2                |   D2          |    1        |</span></span><br><span class="line"><span class="comment">  *          |      SDIO D3                |   D3          |    2        |</span></span><br><span class="line"><span class="comment">  *          |      SDIO CMD               |   CMD         |    3        |</span></span><br><span class="line"><span class="comment">  *          |                             |   VCC         |    4 (3.3 V)|</span></span><br><span class="line"><span class="comment">  *          |      SDIO CLK               |   CLK         |    5        |</span></span><br><span class="line"><span class="comment">  *          |                             |   GND         |    6 (0 V)  |</span></span><br><span class="line"><span class="comment">  *          |      SDIO D0                |   D0          |    7        |</span></span><br><span class="line"><span class="comment">  *          |      SDIO D1                |   D1          |    8        |</span></span><br><span class="line"><span class="comment">  *          +-----------------------------+---------------+-------------+</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *  @endverbatim</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">  * @attention</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS</span></span><br><span class="line"><span class="comment">  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE</span></span><br><span class="line"><span class="comment">  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY</span></span><br><span class="line"><span class="comment">  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING</span></span><br><span class="line"><span class="comment">  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE</span></span><br><span class="line"><span class="comment">  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * &lt;h2&gt;&lt;center&gt;&amp;copy; COPYRIGHT 2011 STMicroelectronics&lt;/center&gt;&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">  ******************************************************************************</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_sdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_usart.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private macro -------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  SDIO Static flags, TimeOut, FIFO Address</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDIO_STATIC_FLAGS               ((uint32_t)0x000005FF)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDIO_CMD0TIMEOUT                ((uint32_t)0x00010000)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Mask for errors Card Status R1 (OCR Register)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_ADDR_OUT_OF_RANGE        ((uint32_t)0x80000000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_ADDR_MISALIGNED          ((uint32_t)0x40000000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_BLOCK_LEN_ERR            ((uint32_t)0x20000000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_ERASE_SEQ_ERR            ((uint32_t)0x10000000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_BAD_ERASE_PARAM          ((uint32_t)0x08000000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_WRITE_PROT_VIOLATION     ((uint32_t)0x04000000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_LOCK_UNLOCK_FAILED       ((uint32_t)0x01000000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_COM_CRC_FAILED           ((uint32_t)0x00800000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_ILLEGAL_CMD              ((uint32_t)0x00400000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_CARD_ECC_FAILED          ((uint32_t)0x00200000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_CC_ERROR                 ((uint32_t)0x00100000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_GENERAL_UNKNOWN_ERROR    ((uint32_t)0x00080000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_STREAM_READ_UNDERRUN     ((uint32_t)0x00040000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_STREAM_WRITE_OVERRUN     ((uint32_t)0x00020000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_CID_CSD_OVERWRIETE       ((uint32_t)0x00010000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_WP_ERASE_SKIP            ((uint32_t)0x00008000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_CARD_ECC_DISABLED        ((uint32_t)0x00004000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_ERASE_RESET              ((uint32_t)0x00002000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_AKE_SEQ_ERROR            ((uint32_t)0x00000008)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_OCR_ERRORBITS                ((uint32_t)0xFDFFE008)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Masks for R6 Response</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_R6_GENERAL_UNKNOWN_ERROR     ((uint32_t)0x00002000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_R6_ILLEGAL_CMD               ((uint32_t)0x00004000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_R6_COM_CRC_FAILED            ((uint32_t)0x00008000)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_VOLTAGE_WINDOW_SD            ((uint32_t)0x80100000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_HIGH_CAPACITY                ((uint32_t)0x40000000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_STD_CAPACITY                 ((uint32_t)0x00000000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CHECK_PATTERN                ((uint32_t)0x000001AA)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_MAX_VOLT_TRIAL               ((uint32_t)0x0000FFFF)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_ALLZERO                      ((uint32_t)0x00000000)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_WIDE_BUS_SUPPORT             ((uint32_t)0x00040000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_SINGLE_BUS_SUPPORT           ((uint32_t)0x00010000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CARD_LOCKED                  ((uint32_t)0x02000000)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_DATATIMEOUT                  ((uint32_t)0xFFFFFFFF)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_0TO7BITS                     ((uint32_t)0x000000FF)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_8TO15BITS                    ((uint32_t)0x0000FF00)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_16TO23BITS                   ((uint32_t)0x00FF0000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_24TO31BITS                   ((uint32_t)0xFF000000)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_MAX_DATA_LENGTH              ((uint32_t)0x01FFFFFF)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_HALFFIFO                     ((uint32_t)0x00000008)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_HALFFIFOBYTES                ((uint32_t)0x00000020)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Command Class Supported</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CCCC_LOCK_UNLOCK             ((uint32_t)0x00000080)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CCCC_WRITE_PROT              ((uint32_t)0x00000040)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SD_CCCC_ERASE                   ((uint32_t)0x00000020)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Following commands are SD Card Specific commands.</span></span><br><span class="line"><span class="comment">  *         SDIO_APP_CMD should be sent before sending these commands.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDIO_SEND_IF_COND               ((uint32_t)0x00000008)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private variables ---------------------------------------------------------*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint32_t</span> CardType =  SDIO_STD_CAPACITY_SD_CARD_V1_1;     <span class="comment">// 存储卡的类型，先把它初始化为1.1协议的卡</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint32_t</span> CSD_Tab[<span class="number">4</span>], CID_Tab[<span class="number">4</span>], RCA = <span class="number">0</span>;                <span class="comment">// 存储CSD，DID，寄存器和卡相对地址</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint8_t</span> SDSTATUS_Tab[<span class="number">16</span>];                                <span class="comment">// 存储卡状态，是CSR的一部分</span></span><br><span class="line">__IO <span class="keyword">uint32_t</span> StopCondition = <span class="number">0</span>;                                <span class="comment">// 用于停止卡操作的标志</span></span><br><span class="line">__IO SD_Error TransferError = SD_OK;                            <span class="comment">// 用于存储卡错误，初始化为正常状态</span></span><br><span class="line">__IO <span class="keyword">uint32_t</span> TransferEnd = <span class="number">0</span>;                                  <span class="comment">// 用于标志传输是否结束，在中断服务函数中调用</span></span><br><span class="line">SD_CardInfo SDCardInfo;                                         <span class="comment">// 用于存储卡的信息，DSR的一部分？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*用于sdio初始化的结构体*/</span></span><br><span class="line">SDIO_InitTypeDef SDIO_InitStructure;</span><br><span class="line">SDIO_CmdInitTypeDef SDIO_CmdInitStructure;</span><br><span class="line">SDIO_DataInitTypeDef SDIO_DataInitStructure;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private function prototypes -----------------------------------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> SD_Error <span class="title">CmdError</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> SD_Error <span class="title">CmdResp1Error</span><span class="params">(<span class="keyword">uint8_t</span> cmd)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> SD_Error <span class="title">CmdResp7Error</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> SD_Error <span class="title">CmdResp3Error</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> SD_Error <span class="title">CmdResp2Error</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> SD_Error <span class="title">CmdResp6Error</span><span class="params">(<span class="keyword">uint8_t</span> cmd, <span class="keyword">uint16_t</span> *prca)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> SD_Error <span class="title">SDEnWideBus</span><span class="params">(FunctionalState NewState)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> SD_Error <span class="title">IsCardProgramming</span><span class="params">(<span class="keyword">uint8_t</span> *pstatus)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> SD_Error <span class="title">FindSCR</span><span class="params">(<span class="keyword">uint16_t</span> rca, <span class="keyword">uint32_t</span> *pscr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GPIO_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">uint32_t</span> <span class="title">SD_DMAEndOfTransferStatus</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SD_DMA_RxConfig</span><span class="params">(<span class="keyword">uint32_t</span> *BufferDST, <span class="keyword">uint32_t</span> BufferSize)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SD_DMA_TxConfig</span><span class="params">(<span class="keyword">uint32_t</span> *BufferSRC, <span class="keyword">uint32_t</span> BufferSize)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">convert_from_bytes_to_power_of_two</span><span class="params">(<span class="keyword">uint16_t</span> NumberOfBytes)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private functions ---------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：SD_DeInit</span></span><br><span class="line"><span class="comment"> * 描述  ：复位SDIO端口</span></span><br><span class="line"><span class="comment"> * 输入  ：无</span></span><br><span class="line"><span class="comment"> * 输出  ：无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SD_DeInit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Disable SDIO Clock */</span></span><br><span class="line">    SDIO_ClockCmd(DISABLE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Set Power State to OFF */</span></span><br><span class="line">    SDIO_SetPowerState(SDIO_PowerState_OFF);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; DeInitializes the SDIO peripheral */</span></span><br><span class="line">    SDIO_DeInit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Disable the SDIO AHB Clock */</span></span><br><span class="line">    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SDIO, DISABLE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;</span><br><span class="line">    GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Configure PD.02 CMD line */</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;</span><br><span class="line">    GPIO_Init(GPIOD, &amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：NVIC_Configuration</span></span><br><span class="line"><span class="comment"> * 描述  ：SDIO 优先级配置为最高优先级。</span></span><br><span class="line"><span class="comment"> * 输入  ：无</span></span><br><span class="line"><span class="comment"> * 输出  ：无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">NVIC_SDIO_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Configure the NVIC Preemption Priority Bits */</span></span><br><span class="line">    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);</span><br><span class="line"></span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = SDIO_IRQn;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">0</span>;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">0</span>;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">    NVIC_Init(&amp;NVIC_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Returns the DMA End Of Transfer Status.</span></span><br><span class="line"><span class="comment">  * @param  None</span></span><br><span class="line"><span class="comment">  * @retval DMA SDIO Channel Status.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">SD_DMAEndOfTransferStatus</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">uint32_t</span>)DMA_GetFlagStatus(DMA2_FLAG_TC4);   <span class="comment">//Channel4 transfer complete flag.</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数名：SD_DMA_RxConfig</span></span><br><span class="line"><span class="comment"> * 描述  ：为SDIO接收数据配置DMA2的通道4的请求</span></span><br><span class="line"><span class="comment"> * 输入  ：BufferDST：用于装载数据的变量指针</span></span><br><span class="line"><span class="comment"> *        BufferSize：缓冲区大小</span></span><br><span class="line"><span class="comment"> * 输出  ：无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SD_DMA_RxConfig</span><span class="params">(<span class="keyword">uint32_t</span> *BufferDST, <span class="keyword">uint32_t</span> BufferSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DMA_InitTypeDef DMA_InitStructure;</span><br><span class="line"></span><br><span class="line">    DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);   <span class="comment">// show清除DMA标志位</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; DMA2 Channel4 disable */</span></span><br><span class="line">    DMA_Cmd(DMA2_Channel4, DISABLE);                                            <span class="comment">// SDIO为第四通道</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; DMA2 Channel4 Config */</span></span><br><span class="line">    DMA_InitStructure.DMA_PeripheralBaseAddr = (<span class="keyword">uint32_t</span>)SDIO_FIFO_ADDRESS;     <span class="comment">// 外设地址，fifo</span></span><br><span class="line">    DMA_InitStructure.DMA_MemoryBaseAddr     = (<span class="keyword">uint32_t</span>)BufferDST;             <span class="comment">// 目标地址</span></span><br><span class="line">    DMA_InitStructure.DMA_DIR                = DMA_DIR_PeripheralSRC;           <span class="comment">// 外设为源地址</span></span><br><span class="line">    DMA_InitStructure.DMA_BufferSize         = BufferSize / <span class="number">4</span>;                  <span class="comment">// 除以4，把字转成字节单位</span></span><br><span class="line">    DMA_InitStructure.DMA_PeripheralInc      = DMA_PeripheralInc_Disable;       <span class="comment">// 使能外设地址不自增</span></span><br><span class="line">    DMA_InitStructure.DMA_MemoryInc          = DMA_MemoryInc_Enable;            <span class="comment">// 使能存储目标地址自增</span></span><br><span class="line">    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;     <span class="comment">// 外设数据大小为字，32位</span></span><br><span class="line">    DMA_InitStructure.DMA_MemoryDataSize     = DMA_MemoryDataSize_Word;         <span class="comment">// 外设数据大小为字，32位</span></span><br><span class="line">    DMA_InitStructure.DMA_Mode               = DMA_Mode_Normal;                 <span class="comment">// 不循环，循环模式主要用在adc上</span></span><br><span class="line">    DMA_InitStructure.DMA_Priority           = DMA_Priority_High;               <span class="comment">// 通道优先级高</span></span><br><span class="line">    DMA_InitStructure.DMA_M2M                = DMA_M2M_Disable;                 <span class="comment">// 非存储器至存储器模式</span></span><br><span class="line">    DMA_Init(DMA2_Channel4, &amp;DMA_InitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; DMA2 Channel4 enable */</span>               <span class="comment">//不设置dma中断？</span></span><br><span class="line">    DMA_Cmd(DMA2_Channel4, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 函数名：SD_DMA_RxConfig</span></span><br><span class="line"><span class="comment">* 描述  ：为SDIO发送数据配置DMA2的通道4的请求</span></span><br><span class="line"><span class="comment">* 输入  ：BufferDST：装载了数据的变量指针</span></span><br><span class="line"><span class="comment">           BufferSize：    缓冲区大小</span></span><br><span class="line"><span class="comment">* 输出  ：无</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SD_DMA_TxConfig</span><span class="params">(<span class="keyword">uint32_t</span> *BufferSRC, <span class="keyword">uint32_t</span> BufferSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    DMA_InitTypeDef DMA_InitStructure;</span><br><span class="line"></span><br><span class="line">    DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; DMA2 Channel4 disable */</span></span><br><span class="line">    DMA_Cmd(DMA2_Channel4, DISABLE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; DMA2 Channel4 Config */</span></span><br><span class="line">    DMA_InitStructure.DMA_PeripheralBaseAddr = (<span class="keyword">uint32_t</span>)SDIO_FIFO_ADDRESS;</span><br><span class="line">    DMA_InitStructure.DMA_MemoryBaseAddr = (<span class="keyword">uint32_t</span>)BufferSRC;</span><br><span class="line">    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;<span class="comment">//外设为写入目标</span></span><br><span class="line">    DMA_InitStructure.DMA_BufferSize = BufferSize / <span class="number">4</span>;</span><br><span class="line">    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;    <span class="comment">//外设地址不自增</span></span><br><span class="line">    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;</span><br><span class="line">    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;</span><br><span class="line">    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;</span><br><span class="line">    DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;</span><br><span class="line">    DMA_InitStructure.DMA_Priority = DMA_Priority_High;</span><br><span class="line">    DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;</span><br><span class="line">    DMA_Init(DMA2_Channel4, &amp;DMA_InitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; DMA2 Channel4 enable */</span></span><br><span class="line">    DMA_Cmd(DMA2_Channel4, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：GPIO_Configuration</span></span><br><span class="line"><span class="comment"> * 描述  ：初始化SDIO用到的引脚，开启时钟。</span></span><br><span class="line"><span class="comment"> * 输入  ：无</span></span><br><span class="line"><span class="comment"> * 输出  ：无</span></span><br><span class="line"><span class="comment"> * 调用  ：内部调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GPIO_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; GPIOC and GPIOD Periph clock enable */</span></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD, ENABLE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Enable the SDIO AHB Clock */</span></span><br><span class="line">    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SDIO, ENABLE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Enable the DMA2 Clock */</span></span><br><span class="line">    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class="line">    GPIO_Init(GPIOC, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Configure PD.02 CMD line */</span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;</span><br><span class="line">    GPIO_Init(GPIOD, &amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数名：SD_Init</span></span><br><span class="line"><span class="comment"> * 描述  ：初始化SD卡，使卡处于就绪状态(准备传输数据)</span></span><br><span class="line"><span class="comment"> * 输入  ：无</span></span><br><span class="line"><span class="comment"> * 输出  ：-SD_Error SD卡错误代码</span></span><br><span class="line"><span class="comment"> *         成功时则为 SD_OK</span></span><br><span class="line"><span class="comment"> * 调用  ：外部调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*重置SD_Error状态*/</span></span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* SDIO 外设底层引脚初始化 */</span></span><br><span class="line">    GPIO_Configuration();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*对SDIO的所有寄存器进行复位*/</span></span><br><span class="line">    SDIO_DeInit();</span><br><span class="line"></span><br><span class="line">    NVIC_SDIO_Configuration();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 上电并进行卡识别流程，确认卡的操作电压 */</span></span><br><span class="line">    errorstatus = SD_PowerON();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 如果上电，识别不成功，返回“响应超时”错误 */</span></span><br><span class="line">    <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">        <span class="comment">/*!&lt; CMD Response TimeOut (wait for CMDSENT flag) */</span></span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 卡识别成功，进行卡初始化 */</span></span><br><span class="line">    errorstatus = SD_InitializeCards();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus != SD_OK) &#123;  <span class="comment">//失败返回</span></span><br><span class="line">        <span class="comment">/*!&lt; CMD Response TimeOut (wait for CMDSENT flag) */</span></span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置SDIO外设</span></span><br><span class="line"><span class="comment">     * 上电识别，卡初始化都完成后，进入数据传输模式，提高读写速度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/* SDIOCLK = HCLK, SDIO_CK = HCLK/(2 + SDIO_TRANSFER_CLK_DIV) */</span></span><br><span class="line">    SDIO_InitStructure.SDIO_ClockDiv            = SDIO_TRANSFER_CLK_DIV;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*上升沿采集数据 */</span></span><br><span class="line">    SDIO_InitStructure.SDIO_ClockEdge           = SDIO_ClockEdge_Rising;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Bypass模式使能的话，SDIO_CK不经过SDIO_ClockDiv分频 */</span></span><br><span class="line">    SDIO_InitStructure.SDIO_ClockBypass         = SDIO_ClockBypass_Disable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 若开启此功能，在总线空闲时关闭sd_clk时钟 */</span></span><br><span class="line">    SDIO_InitStructure.SDIO_ClockPowerSave      = SDIO_ClockPowerSave_Disable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 暂时配置成1bit模式 */</span></span><br><span class="line">    SDIO_InitStructure.SDIO_BusWide             = SDIO_BusWide_1b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 硬件流，若开启，在FIFO不能进行发送和接收数据时，数据传输暂停 */</span></span><br><span class="line">    SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;</span><br><span class="line"></span><br><span class="line">    SDIO_Init(&amp;SDIO_InitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus == SD_OK) &#123;</span><br><span class="line">        <span class="comment">/* 用来读取csd/cid寄存器 */</span></span><br><span class="line">        errorstatus = SD_GetCardInfo(&amp;SDCardInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus == SD_OK) &#123;</span><br><span class="line">        <span class="comment">/* 通过cmd7  ,rca选择要操作的卡 */</span></span><br><span class="line">        errorstatus = SD_SelectDeselect((<span class="keyword">uint32_t</span>)(SDCardInfo.RCA &lt;&lt; <span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus == SD_OK) &#123;</span><br><span class="line">        <span class="comment">/* 最后为了提高读写，开启4bits模式 */</span></span><br><span class="line">        errorstatus = SD_EnableWideBusOperation(SDIO_BusWide_4b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Gets the cuurent sd card data transfer status.</span></span><br><span class="line"><span class="comment">  * @param  None</span></span><br><span class="line"><span class="comment">  * @retval SDTransferState: Data Transfer state.</span></span><br><span class="line"><span class="comment">  *   This value can be:</span></span><br><span class="line"><span class="comment">  *        - SD_TRANSFER_OK: No data transfer is acting</span></span><br><span class="line"><span class="comment">  *        - SD_TRANSFER_BUSY: Data transfer is acting</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">SDTransferState <span class="title">SD_GetStatus</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SDCardState cardstate =  SD_CARD_TRANSFER;</span><br><span class="line"></span><br><span class="line">    cardstate = SD_GetState();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cardstate == SD_CARD_TRANSFER) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_TRANSFER_OK);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cardstate == SD_CARD_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_TRANSFER_ERROR);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_TRANSFER_BUSY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Returns the current card&#x27;s state.</span></span><br><span class="line"><span class="comment">  * @param  None</span></span><br><span class="line"><span class="comment">  * @retval SDCardState: SD Card Error or SD Card Current State.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">SDCardState <span class="title">SD_GetState</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> resp1 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SD_SendStatus(&amp;resp1) != SD_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> SD_CARD_ERROR;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (SDCardState)((resp1 &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0x0F</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：SD_PowerON</span></span><br><span class="line"><span class="comment"> * 描述  ：确保SD卡的工作电压和配置控制时钟</span></span><br><span class="line"><span class="comment"> * 输入  ：无</span></span><br><span class="line"><span class="comment"> * 输出  ：-SD_Error SD卡错误代码</span></span><br><span class="line"><span class="comment"> *         成功时则为 SD_OK</span></span><br><span class="line"><span class="comment"> * 调用  ：在 SD_Init() 调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_PowerON</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line">    <span class="keyword">uint32_t</span> response = <span class="number">0</span>, count = <span class="number">0</span>, validvoltage = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> SDType = SD_STD_CAPACITY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/********************************************************************************************************/</span></span><br><span class="line">    <span class="comment">/* 上电初始化</span></span><br><span class="line"><span class="comment">     * 配置SDIO的外设</span></span><br><span class="line"><span class="comment">     * SDIOCLK = HCLK, SDIO_CK = HCLK/(2 + SDIO_INIT_CLK_DIV)</span></span><br><span class="line"><span class="comment">     * 初始化时的时钟不能大于400KHz</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/* HCLK = 72MHz, SDIOCLK = 72MHz, SDIO_CK = HCLK/(178 + 2) = 400 KHz */</span></span><br><span class="line">    SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV;</span><br><span class="line"></span><br><span class="line">    SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 不使用bypass模式，直接用HCLK进行分频得到SDIO_CK */</span></span><br><span class="line">    SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 空闲时不关闭时钟电源 */</span></span><br><span class="line">    SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化的时候暂时先把数据线配置成1根 */</span></span><br><span class="line">    SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 失能硬件流控制 */</span></span><br><span class="line">    SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;</span><br><span class="line"></span><br><span class="line">    SDIO_Init(&amp;SDIO_InitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 开启SDIO外设的电源 */</span></span><br><span class="line">    SDIO_SetPowerState(SDIO_PowerState_ON);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使能 SDIO 时钟 */</span></span><br><span class="line">    SDIO_ClockCmd(ENABLE);</span><br><span class="line">    <span class="comment">/********************************************************************************************************/</span></span><br><span class="line">    <span class="comment">/* 下面发送一系列命令,开始卡识别流程</span></span><br><span class="line"><span class="comment">     * CMD0: GO_IDLE_STATE(复位所以SD卡进入空闲状态)</span></span><br><span class="line"><span class="comment">     * 没有响应</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = <span class="number">0x0</span>;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_GO_IDLE_STATE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 没有响应 */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 关闭等待中断 */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* CPSM在开始发送命令之前等待数据传输结束 */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 检测是否正确接收到cmd0 */</span></span><br><span class="line">    errorstatus = CmdError();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 命令发送出错，返回 */</span></span><br><span class="line">    <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">        <span class="comment">/* CMD Response TimeOut (wait for CMDSENT flag) */</span></span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/********************************************************************************************************/</span></span><br><span class="line">    <span class="comment">/* CMD8: SEND_IF_COND</span></span><br><span class="line"><span class="comment">     * 发送 CMD8 检查SD卡的电压操作条件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 参数: - [31:12]: 保留 (要被设置为 &#x27;0&#x27;)</span></span><br><span class="line"><span class="comment">     *       - [11:8] : 支持的电压 (VHS) 0x1 (范围: 2.7-3.6 V)</span></span><br><span class="line"><span class="comment">     *       - [7:0]  : 校验模式 (推荐 0xAA)</span></span><br><span class="line"><span class="comment">     * 响应类型: R7</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/* 接收到命令sd会返回这个参数 */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;</span><br><span class="line"></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*检查是否接收到命令*/</span></span><br><span class="line">    errorstatus = CmdResp7Error();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 有响应则card遵循sd协议2.0版本 */</span></span><br><span class="line">    <span class="keyword">if</span> (errorstatus == SD_OK) &#123;</span><br><span class="line">        <span class="comment">/* SD Card 2.0 ，先把它定义会sdsc类型的卡 */</span></span><br><span class="line">        CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 这个变量用作ACMD41的参数，用来询问是sdsc卡还是sdhc卡 */</span></span><br><span class="line">        SDType = SD_HIGH_CAPACITY;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    <span class="comment">/* 无响应，说明是1.x的或mmc的卡 */</span></span><br><span class="line">        <span class="comment">/* 发命令 CMD55 */</span></span><br><span class="line">        SDIO_CmdInitStructure.SDIO_Argument = <span class="number">0x00</span>;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">        SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line">        errorstatus = CmdResp1Error(SD_CMD_APP_CMD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* CMD55</span></span><br><span class="line"><span class="comment">     * 发送cmd55，用于检测是sd卡还是mmc卡，或是不支持的卡</span></span><br><span class="line"><span class="comment">     * CMD 响应: R1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = <span class="number">0x00</span>;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 是否响应，没响应的是mmc或不支持的卡 */</span></span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_APP_CMD);</span><br><span class="line">    <span class="comment">/********************************************************************************************************/</span></span><br><span class="line">    <span class="comment">/* 若 errorstatus 为 Command TimeOut, 说明是MMC 卡</span></span><br><span class="line"><span class="comment">     * 若 errorstatus 为 SD_OK ，说明是SD card: SD 卡 2.0 (电压范围不匹配)</span></span><br><span class="line"><span class="comment">     * 或 SD 卡 1.x</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (errorstatus == SD_OK) &#123; <span class="comment">//响应了cmd55，是sd卡，可能为1.x,可能为2.0</span></span><br><span class="line">        <span class="comment">/*下面开始循环地发送sdio支持的电压范围，循环一定次数*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* SD CARD</span></span><br><span class="line"><span class="comment">         * 发送 ACMD41 SD_APP_OP_COND ，带参数 0x80100000</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        <span class="keyword">while</span> ((!validvoltage) &amp;&amp; (count &lt; SD_MAX_VOLT_TRIAL)) &#123;</span><br><span class="line">            <span class="comment">/* 在发送ACMD命令前都要先向卡发送CMD55</span></span><br><span class="line"><span class="comment">            * 发送 CMD55 APP_CMD ， RCA 为 0</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            SDIO_CmdInitStructure.SDIO_Argument = <span class="number">0x00</span>;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">            SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">            errorstatus = CmdResp1Error(SD_CMD_APP_CMD);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">                <span class="keyword">return</span> (errorstatus);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* ACMD41</span></span><br><span class="line"><span class="comment">             * 命令参数由支持的电压范围及HCS位组成，HCS位置一来区分卡是SDSC还是SDHC</span></span><br><span class="line"><span class="comment">             * 0:SDSC</span></span><br><span class="line"><span class="comment">             * 1:SDHC</span></span><br><span class="line"><span class="comment">            * 响应：R3,对应的是OCR寄存器</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_OP_COND;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">            SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">            errorstatus = CmdResp3Error();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">                <span class="keyword">return</span> (errorstatus);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 若卡需求电压在SDIO的供电电压范围内，会自动上电并标志pwr_up位</span></span><br><span class="line"><span class="comment">             * 读取卡寄存器，卡状态</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            response = SDIO_GetResponse(SDIO_RESP1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 读取卡的ocr寄存器的pwr_up位，看是否已工作在正常电压 */</span></span><br><span class="line">            validvoltage = (((response &gt;&gt; <span class="number">31</span>) == <span class="number">1</span>) ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">            count++;              <span class="comment">/* 计算循环次数 */</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count &gt;= SD_MAX_VOLT_TRIAL) &#123;                <span class="comment">/* 循环检测超过一定次数还没上电 */</span></span><br><span class="line">            errorstatus = SD_INVALID_VOLTRANGE;    <span class="comment">/* SDIO不支持card的供电电压 */</span></span><br><span class="line">            <span class="keyword">return</span> (errorstatus);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*检查卡返回信息中的HCS位*/</span></span><br><span class="line">        <span class="comment">/* 判断ocr中的ccs位 ，如果是sdsc卡则不执行下面的语句 */</span></span><br><span class="line">        <span class="keyword">if</span> (response &amp;= SD_HIGH_CAPACITY) &#123;</span><br><span class="line">            CardType = SDIO_HIGH_CAPACITY_SD_CARD; <span class="comment">/* 把卡类型从初始化的sdsc型改为sdhc型 */</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">/* else MMC Card */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：SD_PowerOFF</span></span><br><span class="line"><span class="comment"> * 描述  ：关掉SDIO的输出信号</span></span><br><span class="line"><span class="comment"> * 输入  ：无</span></span><br><span class="line"><span class="comment"> * 输出  ：-SD_Error SD卡错误代码</span></span><br><span class="line"><span class="comment"> *         成功时则为 SD_OK</span></span><br><span class="line"><span class="comment"> * 调用  ：外部调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_PowerOFF</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Set Power State to OFF */</span></span><br><span class="line">    SDIO_SetPowerState(SDIO_PowerState_OFF);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 函数名：SD_InitializeCards</span></span><br><span class="line"><span class="comment">* 描述  ：初始化所有的卡或者单个卡进入就绪状态</span></span><br><span class="line"><span class="comment">* 输入  ：无</span></span><br><span class="line"><span class="comment">* 输出  ：-SD_Error SD卡错误代码</span></span><br><span class="line"><span class="comment">*         成功时则为 SD_OK</span></span><br><span class="line"><span class="comment">* 调用  ：在 SD_Init() 调用，在调用power_on（）上电卡识别完毕后，调用此函数进行卡初始化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_InitializeCards</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line">    <span class="keyword">uint16_t</span> rca = <span class="number">0x01</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SDIO_GetPowerState() == SDIO_PowerState_OFF) &#123;</span><br><span class="line">        errorstatus = SD_REQUEST_NOT_APPLICABLE;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 判断卡的类型 */</span></span><br><span class="line">    <span class="keyword">if</span> (SDIO_SECURE_DIGITAL_IO_CARD != CardType) &#123;</span><br><span class="line">        <span class="comment">/** Send CMD2 ALL_SEND_CID</span></span><br><span class="line"><span class="comment">         * 响应：R2，对应CID寄存器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SDIO_CmdInitStructure.SDIO_Argument = <span class="number">0x0</span>;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ALL_SEND_CID;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_Wait     = SDIO_Wait_No;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_CPSM     = SDIO_CPSM_Enable;</span><br><span class="line">        SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">        errorstatus = CmdResp2Error();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (SD_OK != errorstatus) &#123;</span><br><span class="line">            <span class="keyword">return</span> (errorstatus);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 将返回的CID信息存储起来 */</span></span><br><span class="line">        CID_Tab[<span class="number">0</span>] = SDIO_GetResponse(SDIO_RESP1);</span><br><span class="line">        CID_Tab[<span class="number">1</span>] = SDIO_GetResponse(SDIO_RESP2);</span><br><span class="line">        CID_Tab[<span class="number">2</span>] = SDIO_GetResponse(SDIO_RESP3);</span><br><span class="line">        CID_Tab[<span class="number">3</span>] = SDIO_GetResponse(SDIO_RESP4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/********************************************************************************************************/</span></span><br><span class="line">    <span class="keyword">if</span> ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType)</span><br><span class="line">        || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType)</span><br><span class="line">        || (SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType)</span><br><span class="line">        || (SDIO_HIGH_CAPACITY_SD_CARD == CardType)) &#123; <span class="comment">/* 使用的是2.0的卡 */</span></span><br><span class="line">        <span class="comment">/* Send CMD3 SET_REL_ADDR with argument 0</span></span><br><span class="line"><span class="comment">         * SD Card publishes its RCA.</span></span><br><span class="line"><span class="comment">         * 响应：R6，对应RCA寄存器</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        SDIO_CmdInitStructure.SDIO_Argument = <span class="number">0x00</span>;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_REL_ADDR;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">        SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 把接收到的卡相对地址存起来 */</span></span><br><span class="line">        errorstatus = CmdResp6Error(SD_CMD_SET_REL_ADDR, &amp;rca);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (SD_OK != errorstatus) &#123;</span><br><span class="line">            <span class="keyword">return</span> (errorstatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/********************************************************************************************************/</span></span><br><span class="line">    <span class="keyword">if</span> (SDIO_SECURE_DIGITAL_IO_CARD != CardType) &#123;</span><br><span class="line">        RCA = rca;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Send CMD9 SEND_CSD with argument as card&#x27;s RCA</span></span><br><span class="line"><span class="comment">             * 响应:R2  对应寄存器CSD(Card-Specific Data)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        SDIO_CmdInitStructure.SDIO_Argument = (<span class="keyword">uint32_t</span>)(rca &lt;&lt; <span class="number">16</span>);</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_CSD;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">        SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">        errorstatus = CmdResp2Error();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (SD_OK != errorstatus) &#123;</span><br><span class="line">            <span class="keyword">return</span> (errorstatus);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CSD_Tab[<span class="number">0</span>] = SDIO_GetResponse(SDIO_RESP1);</span><br><span class="line">        CSD_Tab[<span class="number">1</span>] = SDIO_GetResponse(SDIO_RESP2);</span><br><span class="line">        CSD_Tab[<span class="number">2</span>] = SDIO_GetResponse(SDIO_RESP3);</span><br><span class="line">        CSD_Tab[<span class="number">3</span>] = SDIO_GetResponse(SDIO_RESP4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/********************************************************************************************************/</span></span><br><span class="line">    <span class="comment">/*全部卡初始化成功 */</span></span><br><span class="line">    errorstatus = SD_OK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：SD_GetCardInfo</span></span><br><span class="line"><span class="comment"> * 描述  ：获取SD卡的具体信息</span></span><br><span class="line"><span class="comment"> * 输入  ：-cardinfo 指向SD_CardInfo结构体的指针</span></span><br><span class="line"><span class="comment"> *         这个结构里面包含了SD卡的具体信息</span></span><br><span class="line"><span class="comment"> * 输出  ：-SD_Error SD卡错误代码</span></span><br><span class="line"><span class="comment"> *         成功时则为 SD_OK</span></span><br><span class="line"><span class="comment"> * 调用  ：外部调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_GetCardInfo</span><span class="params">(SD_CardInfo *cardinfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line">    <span class="keyword">uint8_t</span> tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    cardinfo-&gt;CardType = (<span class="keyword">uint8_t</span>)CardType;</span><br><span class="line">    cardinfo-&gt;RCA = (<span class="keyword">uint16_t</span>)RCA;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 0 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CSD_Tab[<span class="number">0</span>] &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">    cardinfo-&gt;SD_csd.CSDStruct = (tmp &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.SysSpecVersion = (tmp &amp; <span class="number">0x3C</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.Reserved1 = tmp &amp; <span class="number">0x03</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 1 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CSD_Tab[<span class="number">0</span>] &amp; <span class="number">0x00FF0000</span>) &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    cardinfo-&gt;SD_csd.TAAC = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 2 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CSD_Tab[<span class="number">0</span>] &amp; <span class="number">0x0000FF00</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    cardinfo-&gt;SD_csd.NSAC = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 3 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)(CSD_Tab[<span class="number">0</span>] &amp; <span class="number">0x000000FF</span>);</span><br><span class="line">    cardinfo-&gt;SD_csd.MaxBusClkFrec = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 4 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CSD_Tab[<span class="number">1</span>] &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">    cardinfo-&gt;SD_csd.CardComdClasses = tmp &lt;&lt; <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 5 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CSD_Tab[<span class="number">1</span>] &amp; <span class="number">0x00FF0000</span>) &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    cardinfo-&gt;SD_csd.CardComdClasses |= (tmp &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.RdBlockLen = tmp &amp; <span class="number">0x0F</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 6 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CSD_Tab[<span class="number">1</span>] &amp; <span class="number">0x0000FF00</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    cardinfo-&gt;SD_csd.PartBlockRead = (tmp &amp; <span class="number">0x80</span>) &gt;&gt; <span class="number">7</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.WrBlockMisalign = (tmp &amp; <span class="number">0x40</span>) &gt;&gt; <span class="number">6</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.RdBlockMisalign = (tmp &amp; <span class="number">0x20</span>) &gt;&gt; <span class="number">5</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.DSRImpl = (tmp &amp; <span class="number">0x10</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.Reserved2 = <span class="number">0</span>; <span class="comment">/*!&lt; Reserved */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0)) &#123;</span><br><span class="line">        cardinfo-&gt;SD_csd.DeviceSize = (tmp &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*!&lt; Byte 7 */</span></span><br><span class="line">        tmp = (<span class="keyword">uint8_t</span>)(CSD_Tab[<span class="number">1</span>] &amp; <span class="number">0x000000FF</span>);</span><br><span class="line">        cardinfo-&gt;SD_csd.DeviceSize |= (tmp) &lt;&lt; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*!&lt; Byte 8 */</span></span><br><span class="line">        tmp = (<span class="keyword">uint8_t</span>)((CSD_Tab[<span class="number">2</span>] &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">        cardinfo-&gt;SD_csd.DeviceSize |= (tmp &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">        cardinfo-&gt;SD_csd.MaxRdCurrentVDDMin = (tmp &amp; <span class="number">0x38</span>) &gt;&gt; <span class="number">3</span>;</span><br><span class="line">        cardinfo-&gt;SD_csd.MaxRdCurrentVDDMax = (tmp &amp; <span class="number">0x07</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*!&lt; Byte 9 */</span></span><br><span class="line">        tmp = (<span class="keyword">uint8_t</span>)((CSD_Tab[<span class="number">2</span>] &amp; <span class="number">0x00FF0000</span>) &gt;&gt; <span class="number">16</span>);</span><br><span class="line">        cardinfo-&gt;SD_csd.MaxWrCurrentVDDMin = (tmp &amp; <span class="number">0xE0</span>) &gt;&gt; <span class="number">5</span>;</span><br><span class="line">        cardinfo-&gt;SD_csd.MaxWrCurrentVDDMax = (tmp &amp; <span class="number">0x1C</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        cardinfo-&gt;SD_csd.DeviceSizeMul = (tmp &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/*!&lt; Byte 10 */</span></span><br><span class="line">        tmp = (<span class="keyword">uint8_t</span>)((CSD_Tab[<span class="number">2</span>] &amp; <span class="number">0x0000FF00</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">        cardinfo-&gt;SD_csd.DeviceSizeMul |= (tmp &amp; <span class="number">0x80</span>) &gt;&gt; <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">        cardinfo-&gt;CardCapacity = (cardinfo-&gt;SD_csd.DeviceSize + <span class="number">1</span>) ;</span><br><span class="line">        cardinfo-&gt;CardCapacity *= (<span class="number">1</span> &lt;&lt; (cardinfo-&gt;SD_csd.DeviceSizeMul + <span class="number">2</span>));</span><br><span class="line">        cardinfo-&gt;CardBlockSize = <span class="number">1</span> &lt;&lt; (cardinfo-&gt;SD_csd.RdBlockLen);</span><br><span class="line">        cardinfo-&gt;CardCapacity *= cardinfo-&gt;CardBlockSize;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (CardType == SDIO_HIGH_CAPACITY_SD_CARD) &#123;</span><br><span class="line">        <span class="comment">/*!&lt; Byte 7 */</span></span><br><span class="line">        tmp = (<span class="keyword">uint8_t</span>)(CSD_Tab[<span class="number">1</span>] &amp; <span class="number">0x000000FF</span>);</span><br><span class="line">        cardinfo-&gt;SD_csd.DeviceSize = (tmp &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*!&lt; Byte 8 */</span></span><br><span class="line">        tmp = (<span class="keyword">uint8_t</span>)((CSD_Tab[<span class="number">2</span>] &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">        cardinfo-&gt;SD_csd.DeviceSize |= (tmp &lt;&lt; <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*!&lt; Byte 9 */</span></span><br><span class="line">        tmp = (<span class="keyword">uint8_t</span>)((CSD_Tab[<span class="number">2</span>] &amp; <span class="number">0x00FF0000</span>) &gt;&gt; <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        cardinfo-&gt;SD_csd.DeviceSize |= (tmp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*!&lt; Byte 10 */</span></span><br><span class="line">        tmp = (<span class="keyword">uint8_t</span>)((CSD_Tab[<span class="number">2</span>] &amp; <span class="number">0x0000FF00</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        cardinfo-&gt;CardCapacity = (<span class="keyword">uint64_t</span>)(cardinfo-&gt;SD_csd.DeviceSize + <span class="number">1</span>) * <span class="number">512</span> * <span class="number">1024</span>;</span><br><span class="line">        cardinfo-&gt;CardBlockSize = <span class="number">512</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cardinfo-&gt;SD_csd.EraseGrSize = (tmp &amp; <span class="number">0x40</span>) &gt;&gt; <span class="number">6</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.EraseGrMul = (tmp &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 11 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)(CSD_Tab[<span class="number">2</span>] &amp; <span class="number">0x000000FF</span>);</span><br><span class="line">    cardinfo-&gt;SD_csd.EraseGrMul |= (tmp &amp; <span class="number">0x80</span>) &gt;&gt; <span class="number">7</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.WrProtectGrSize = (tmp &amp; <span class="number">0x7F</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 12 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CSD_Tab[<span class="number">3</span>] &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">    cardinfo-&gt;SD_csd.WrProtectGrEnable = (tmp &amp; <span class="number">0x80</span>) &gt;&gt; <span class="number">7</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.ManDeflECC = (tmp &amp; <span class="number">0x60</span>) &gt;&gt; <span class="number">5</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.WrSpeedFact = (tmp &amp; <span class="number">0x1C</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.MaxWrBlockLen = (tmp &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 13 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CSD_Tab[<span class="number">3</span>] &amp; <span class="number">0x00FF0000</span>) &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    cardinfo-&gt;SD_csd.MaxWrBlockLen |= (tmp &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.WriteBlockPaPartial = (tmp &amp; <span class="number">0x20</span>) &gt;&gt; <span class="number">5</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.Reserved3 = <span class="number">0</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.ContentProtectAppli = (tmp &amp; <span class="number">0x01</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 14 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CSD_Tab[<span class="number">3</span>] &amp; <span class="number">0x0000FF00</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    cardinfo-&gt;SD_csd.FileFormatGrouop = (tmp &amp; <span class="number">0x80</span>) &gt;&gt; <span class="number">7</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.CopyFlag = (tmp &amp; <span class="number">0x40</span>) &gt;&gt; <span class="number">6</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.PermWrProtect = (tmp &amp; <span class="number">0x20</span>) &gt;&gt; <span class="number">5</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.TempWrProtect = (tmp &amp; <span class="number">0x10</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.FileFormat = (tmp &amp; <span class="number">0x0C</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.ECC = (tmp &amp; <span class="number">0x03</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 15 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)(CSD_Tab[<span class="number">3</span>] &amp; <span class="number">0x000000FF</span>);</span><br><span class="line">    cardinfo-&gt;SD_csd.CSD_CRC = (tmp &amp; <span class="number">0xFE</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    cardinfo-&gt;SD_csd.Reserved4 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 0 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CID_Tab[<span class="number">0</span>] &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">    cardinfo-&gt;SD_cid.ManufacturerID = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 1 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CID_Tab[<span class="number">0</span>] &amp; <span class="number">0x00FF0000</span>) &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    cardinfo-&gt;SD_cid.OEM_AppliID = tmp &lt;&lt; <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 2 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CID_Tab[<span class="number">0</span>] &amp; <span class="number">0x000000FF00</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    cardinfo-&gt;SD_cid.OEM_AppliID |= tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 3 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)(CID_Tab[<span class="number">0</span>] &amp; <span class="number">0x000000FF</span>);</span><br><span class="line">    cardinfo-&gt;SD_cid.ProdName1 = tmp &lt;&lt; <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 4 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CID_Tab[<span class="number">1</span>] &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">    cardinfo-&gt;SD_cid.ProdName1 |= tmp &lt;&lt; <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 5 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CID_Tab[<span class="number">1</span>] &amp; <span class="number">0x00FF0000</span>) &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    cardinfo-&gt;SD_cid.ProdName1 |= tmp &lt;&lt; <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 6 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CID_Tab[<span class="number">1</span>] &amp; <span class="number">0x0000FF00</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    cardinfo-&gt;SD_cid.ProdName1 |= tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 7 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)(CID_Tab[<span class="number">1</span>] &amp; <span class="number">0x000000FF</span>);</span><br><span class="line">    cardinfo-&gt;SD_cid.ProdName2 = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 8 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CID_Tab[<span class="number">2</span>] &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">    cardinfo-&gt;SD_cid.ProdRev = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 9 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CID_Tab[<span class="number">2</span>] &amp; <span class="number">0x00FF0000</span>) &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    cardinfo-&gt;SD_cid.ProdSN = tmp &lt;&lt; <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 10 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CID_Tab[<span class="number">2</span>] &amp; <span class="number">0x0000FF00</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    cardinfo-&gt;SD_cid.ProdSN |= tmp &lt;&lt; <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 11 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)(CID_Tab[<span class="number">2</span>] &amp; <span class="number">0x000000FF</span>);</span><br><span class="line">    cardinfo-&gt;SD_cid.ProdSN |= tmp &lt;&lt; <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 12 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CID_Tab[<span class="number">3</span>] &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">    cardinfo-&gt;SD_cid.ProdSN |= tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 13 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CID_Tab[<span class="number">3</span>] &amp; <span class="number">0x00FF0000</span>) &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    cardinfo-&gt;SD_cid.Reserved1 |= (tmp &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">    cardinfo-&gt;SD_cid.ManufactDate = (tmp &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 14 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((CID_Tab[<span class="number">3</span>] &amp; <span class="number">0x0000FF00</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    cardinfo-&gt;SD_cid.ManufactDate |= tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 15 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)(CID_Tab[<span class="number">3</span>] &amp; <span class="number">0x000000FF</span>);</span><br><span class="line">    cardinfo-&gt;SD_cid.CID_CRC = (tmp &amp; <span class="number">0xFE</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    cardinfo-&gt;SD_cid.Reserved2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Enables wide bus opeartion for the requeseted card if supported by</span></span><br><span class="line"><span class="comment">  *         card.</span></span><br><span class="line"><span class="comment">  * @param  WideMode: Specifies the SD card wide bus mode.</span></span><br><span class="line"><span class="comment">  *   This parameter can be one of the following values:</span></span><br><span class="line"><span class="comment">  *     @arg SDIO_BusWide_8b: 8-bit data transfer (Only for MMC)</span></span><br><span class="line"><span class="comment">  *     @arg SDIO_BusWide_4b: 4-bit data transfer</span></span><br><span class="line"><span class="comment">  *     @arg SDIO_BusWide_1b: 1-bit data transfer</span></span><br><span class="line"><span class="comment">  * @retval SD_Error: SD Card Error code.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_GetCardStatus</span><span class="params">(SD_CardStatus *cardstatus)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line">    <span class="keyword">uint8_t</span> tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    errorstatus = SD_SendSDStatus((<span class="keyword">uint32_t</span> *)SDSTATUS_Tab);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus  != SD_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 0 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((SDSTATUS_Tab[<span class="number">0</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>);</span><br><span class="line">    cardstatus-&gt;DAT_BUS_WIDTH = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 0 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((SDSTATUS_Tab[<span class="number">0</span>] &amp; <span class="number">0x20</span>) &gt;&gt; <span class="number">5</span>);</span><br><span class="line">    cardstatus-&gt;SECURED_MODE = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 2 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((SDSTATUS_Tab[<span class="number">2</span>] &amp; <span class="number">0xFF</span>));</span><br><span class="line">    cardstatus-&gt;SD_CARD_TYPE = tmp &lt;&lt; <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 3 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((SDSTATUS_Tab[<span class="number">3</span>] &amp; <span class="number">0xFF</span>));</span><br><span class="line">    cardstatus-&gt;SD_CARD_TYPE |= tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 4 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)(SDSTATUS_Tab[<span class="number">4</span>] &amp; <span class="number">0xFF</span>);</span><br><span class="line">    cardstatus-&gt;SIZE_OF_PROTECTED_AREA = tmp &lt;&lt; <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 5 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)(SDSTATUS_Tab[<span class="number">5</span>] &amp; <span class="number">0xFF</span>);</span><br><span class="line">    cardstatus-&gt;SIZE_OF_PROTECTED_AREA |= tmp &lt;&lt; <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 6 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)(SDSTATUS_Tab[<span class="number">6</span>] &amp; <span class="number">0xFF</span>);</span><br><span class="line">    cardstatus-&gt;SIZE_OF_PROTECTED_AREA |= tmp &lt;&lt; <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 7 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)(SDSTATUS_Tab[<span class="number">7</span>] &amp; <span class="number">0xFF</span>);</span><br><span class="line">    cardstatus-&gt;SIZE_OF_PROTECTED_AREA |= tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 8 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((SDSTATUS_Tab[<span class="number">8</span>] &amp; <span class="number">0xFF</span>));</span><br><span class="line">    cardstatus-&gt;SPEED_CLASS = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 9 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((SDSTATUS_Tab[<span class="number">9</span>] &amp; <span class="number">0xFF</span>));</span><br><span class="line">    cardstatus-&gt;PERFORMANCE_MOVE = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 10 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((SDSTATUS_Tab[<span class="number">10</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">    cardstatus-&gt;AU_SIZE = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 11 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)(SDSTATUS_Tab[<span class="number">11</span>] &amp; <span class="number">0xFF</span>);</span><br><span class="line">    cardstatus-&gt;ERASE_SIZE = tmp &lt;&lt; <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 12 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)(SDSTATUS_Tab[<span class="number">12</span>] &amp; <span class="number">0xFF</span>);</span><br><span class="line">    cardstatus-&gt;ERASE_SIZE |= tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 13 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((SDSTATUS_Tab[<span class="number">13</span>] &amp; <span class="number">0xFC</span>) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">    cardstatus-&gt;ERASE_TIMEOUT = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Byte 13 */</span></span><br><span class="line">    tmp = (<span class="keyword">uint8_t</span>)((SDSTATUS_Tab[<span class="number">13</span>] &amp; <span class="number">0x3</span>));</span><br><span class="line">    cardstatus-&gt;ERASE_OFFSET = tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：SD_EnableWideBusOperation</span></span><br><span class="line"><span class="comment"> * 描述  ：配置卡的数据宽度(但得看卡是否支持)</span></span><br><span class="line"><span class="comment"> * 输入  ：-WideMode 指定SD卡的数据线宽</span></span><br><span class="line"><span class="comment"> *         具体可配置如下</span></span><br><span class="line"><span class="comment"> *         @arg SDIO_BusWide_8b: 8-bit data transfer (Only for MMC)</span></span><br><span class="line"><span class="comment"> *         @arg SDIO_BusWide_4b: 4-bit data transfer</span></span><br><span class="line"><span class="comment"> *         @arg SDIO_BusWide_1b: 1-bit data transfer (默认)</span></span><br><span class="line"><span class="comment"> * 输出  ：-SD_Error SD卡错误代码</span></span><br><span class="line"><span class="comment"> *         成功时则为 SD_OK</span></span><br><span class="line"><span class="comment"> * 调用  ：外部调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_EnableWideBusOperation</span><span class="params">(<span class="keyword">uint32_t</span> WideMode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; MMC Card doesn&#x27;t support this feature */</span></span><br><span class="line">    <span class="keyword">if</span> (SDIO_MULTIMEDIA_CARD == CardType) &#123;</span><br><span class="line">        errorstatus = SD_UNSUPPORTED_FEATURE;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) ||</span><br><span class="line">               (SDIO_HIGH_CAPACITY_SD_CARD == CardType)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (SDIO_BusWide_8b == WideMode) &#123; <span class="comment">//2.0 sd不支持8bits</span></span><br><span class="line">            errorstatus = SD_UNSUPPORTED_FEATURE;</span><br><span class="line">            <span class="keyword">return</span> (errorstatus);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SDIO_BusWide_4b == WideMode) &#123; <span class="comment">//4数据线模式</span></span><br><span class="line">            errorstatus = SDEnWideBus(ENABLE);<span class="comment">//使用acmd6设置总线宽度，设置卡的传输方式</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (SD_OK == errorstatus) &#123;</span><br><span class="line">                <span class="comment">/*!&lt; Configure the SDIO peripheral */</span></span><br><span class="line">                SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV;</span><br><span class="line">                SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;</span><br><span class="line">                SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;</span><br><span class="line">                SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;</span><br><span class="line">                SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_4b;  <span class="comment">//这个是设置stm32的sdio的传输方式 ，切换模式必须从卡和sdio都对应好</span></span><br><span class="line">                SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;</span><br><span class="line">                SDIO_Init(&amp;SDIO_InitStructure);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//单数据线模式</span></span><br><span class="line">            errorstatus = SDEnWideBus(DISABLE);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (SD_OK == errorstatus) &#123;</span><br><span class="line">                <span class="comment">/*!&lt; Configure the SDIO peripheral */</span></span><br><span class="line">                SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV;</span><br><span class="line">                SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;</span><br><span class="line">                SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;</span><br><span class="line">                SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;</span><br><span class="line">                SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;</span><br><span class="line">                SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;</span><br><span class="line">                SDIO_Init(&amp;SDIO_InitStructure);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数名：SD_SelectDeselect</span></span><br><span class="line"><span class="comment"> * 描述  ：利用cmd7，选择卡相对地址为addr的卡，取消选择其它卡</span></span><br><span class="line"><span class="comment"> *          如果addr = 0,则取消选择所有的卡</span></span><br><span class="line"><span class="comment"> * 输入  ：-addr 选择卡的地址</span></span><br><span class="line"><span class="comment"> * 输出  ：-SD_Error SD卡错误代码</span></span><br><span class="line"><span class="comment"> *         成功时则为 SD_OK</span></span><br><span class="line"><span class="comment"> * 调用  ：外部调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_SelectDeselect</span><span class="params">(<span class="keyword">uint32_t</span> addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Send CMD7 SDIO_SEL_DESEL_CARD */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument =  addr;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEL_DESEL_CARD;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_SEL_DESEL_CARD);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Allows to read one block from a specified address in a card. The Data</span></span><br><span class="line"><span class="comment">  *         transfer can be managed by DMA mode or Polling mode.</span></span><br><span class="line"><span class="comment">  * @note   This operation should be followed by two functions to check if the</span></span><br><span class="line"><span class="comment">  *         DMA Controller and SD Card status.</span></span><br><span class="line"><span class="comment">  *          - SD_ReadWaitOperation(): this function insure that the DMA</span></span><br><span class="line"><span class="comment">  *            controller has finished all data transfer.</span></span><br><span class="line"><span class="comment">  *          - SD_GetStatus(): to check that the SD Card has finished the</span></span><br><span class="line"><span class="comment">  *            data transfer and it is ready for data.</span></span><br><span class="line"><span class="comment">  * @param  readbuff: pointer to the buffer that will contain the received data</span></span><br><span class="line"><span class="comment">  * @param  ReadAddr: Address from where data are to be read.</span></span><br><span class="line"><span class="comment">  * @param  BlockSize: the SD card Data block size. The Block size should be 512.</span></span><br><span class="line"><span class="comment">  * @retval SD_Error: SD Card Error code.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_ReadBlock</span><span class="params">(<span class="keyword">uint8_t</span> *readbuff, <span class="keyword">uint64_t</span> ReadAddr, <span class="keyword">uint16_t</span> BlockSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (SD_POLLING_MODE)</span></span><br><span class="line">    <span class="keyword">uint32_t</span> count = <span class="number">0</span>, *tempbuff = (<span class="keyword">uint32_t</span> *)readbuff;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    TransferError = SD_OK;</span><br><span class="line">    TransferEnd = <span class="number">0</span>;     <span class="comment">//传输结束标置位，在中断服务置1</span></span><br><span class="line">    StopCondition = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    SDIO-&gt;DCTRL = <span class="number">0x0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CardType == SDIO_HIGH_CAPACITY_SD_CARD) &#123;</span><br><span class="line">        BlockSize = <span class="number">512</span>;</span><br><span class="line">        ReadAddr /= <span class="number">512</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*******************add，没有这一段容易卡死在DMA检测中*************************************/</span></span><br><span class="line">    <span class="comment">/* Set Block Size for Card，cmd16,</span></span><br><span class="line"><span class="comment">     * 若是sdsc卡，可以用来设置块大小，</span></span><br><span class="line"><span class="comment">     * 若是sdhc卡，块大小为512字节，不受cmd16影响</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = (<span class="keyword">uint32_t</span>) BlockSize;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;   <span class="comment">//r1</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SD_OK != errorstatus) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*********************************************************************************/</span></span><br><span class="line">    SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_DataLength = BlockSize;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_DataBlockSize = (<span class="keyword">uint32_t</span>) <span class="number">9</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;</span><br><span class="line">    SDIO_DataConfig(&amp;SDIO_DataInitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Send CMD17 READ_SINGLE_BLOCK */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = (<span class="keyword">uint32_t</span>)ReadAddr;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_SINGLE_BLOCK;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_READ_SINGLE_BLOCK);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (SD_POLLING_MODE)</span></span><br><span class="line">    <span class="comment">/*!&lt; In case of single block transfer, no need of stop transfer at all.*/</span></span><br><span class="line">    <span class="comment">/*!&lt; Polling mode */</span></span><br><span class="line">    <span class="keyword">while</span> (!(SDIO-&gt;STA &amp; (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND |</span><br><span class="line">                          SDIO_FLAG_STBITERR))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET) &#123;</span><br><span class="line">            <span class="keyword">for</span> (count = <span class="number">0</span>; count &lt; <span class="number">8</span>; count++) &#123;</span><br><span class="line">                *(tempbuff + count) = SDIO_ReadData();</span><br><span class="line">            &#125;</span><br><span class="line">            tempbuff += <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET) &#123;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);</span><br><span class="line">        errorstatus = SD_DATA_TIMEOUT;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET) &#123;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);</span><br><span class="line">        errorstatus = SD_DATA_CRC_FAIL;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET) &#123;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_RXOVERR);</span><br><span class="line">        errorstatus = SD_RX_OVERRUN;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET) &#123;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_STBITERR);</span><br><span class="line">        errorstatus = SD_START_BIT_ERR;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET) &#123;</span><br><span class="line">        *tempbuff = SDIO_ReadData();</span><br><span class="line">        tempbuff++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Clear all the static flags */</span></span><br><span class="line">    SDIO_ClearFlag(SDIO_STATIC_FLAGS);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined (SD_DMA_MODE)</span></span><br><span class="line">    SDIO_ITConfig(SDIO_IT_DATAEND, ENABLE);</span><br><span class="line">    SDIO_DMACmd(ENABLE);</span><br><span class="line">    SD_DMA_RxConfig((<span class="keyword">uint32_t</span> *)readbuff, BlockSize);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Allows to read blocks from a specified address  in a card.  The Data</span></span><br><span class="line"><span class="comment">  *         transfer can be managed by DMA mode or Polling mode. //分两个模式</span></span><br><span class="line"><span class="comment">  * @note   This operation should be followed by two functions to check if the</span></span><br><span class="line"><span class="comment">  *         DMA Controller and SD Card status.     //dma模式时要调用以下两个函数</span></span><br><span class="line"><span class="comment">  *          - SD_ReadWaitOperation(): this function insure that the DMA</span></span><br><span class="line"><span class="comment">  *            controller has finished all data transfer.</span></span><br><span class="line"><span class="comment">  *          - SD_GetStatus(): to check that the SD Card has finished the</span></span><br><span class="line"><span class="comment">  *            data transfer and it is ready for data.</span></span><br><span class="line"><span class="comment">  * @param  readbuff: pointer to the buffer that will contain the received data.</span></span><br><span class="line"><span class="comment">  * @param  ReadAddr: Address from where data are to be read.</span></span><br><span class="line"><span class="comment">  * @param  BlockSize: the SD card Data block size. The Block size should be 512.</span></span><br><span class="line"><span class="comment">  * @param  NumberOfBlocks: number of blocks to be read.</span></span><br><span class="line"><span class="comment">  * @retval SD_Error: SD Card Error code.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_ReadMultiBlocks</span><span class="params">(<span class="keyword">uint8_t</span> *readbuff, <span class="keyword">uint64_t</span> ReadAddr, <span class="keyword">uint16_t</span> BlockSize, <span class="keyword">uint32_t</span> NumberOfBlocks)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line">    TransferError = SD_OK;</span><br><span class="line">    TransferEnd = <span class="number">0</span>;</span><br><span class="line">    StopCondition = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    SDIO-&gt;DCTRL = <span class="number">0x0</span>;                              <span class="comment">// 复位数据控制寄存器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CardType == SDIO_HIGH_CAPACITY_SD_CARD) &#123;   <span class="comment">// sdhc卡的地址以块为单位，每块512字节</span></span><br><span class="line">        BlockSize = <span class="number">512</span>;</span><br><span class="line">        ReadAddr /= <span class="number">512</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Set Block Size for Card，cmd16,若是sdsc卡，可以用来设置块大小，若是sdhc卡，块大小为512字节，不受cmd16影响 */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = (<span class="keyword">uint32_t</span>) BlockSize;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;   <span class="comment">// r1</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SD_OK != errorstatus) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;    <span class="comment">//等待超时限制</span></span><br><span class="line">    SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks *</span><br><span class="line">            BlockSize;   <span class="comment">//对于块数据传输，数据长度寄存器中的数值必须是数据块长度(见SDIO_DCTRL)的倍数</span></span><br><span class="line">    SDIO_DataInitStructure.SDIO_DataBlockSize = (<span class="keyword">uint32_t</span>) <span class="number">9</span> &lt;&lt; <span class="number">4</span>; <span class="comment">//直接用参数多好。。。SDIO_DataBlockSize_512b</span></span><br><span class="line">    SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;<span class="comment">//传输方向</span></span><br><span class="line">    SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block; <span class="comment">//传输模式</span></span><br><span class="line">    SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;    <span class="comment">//开启数据状态机</span></span><br><span class="line">    SDIO_DataConfig(&amp;SDIO_DataInitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Send CMD18 READ_MULT_BLOCK with argument data address */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = (<span class="keyword">uint32_t</span>)ReadAddr;   <span class="comment">//起始地址</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_MULT_BLOCK;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short; <span class="comment">//r1</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_READ_MULT_BLOCK);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SDIO_ITConfig(SDIO_IT_DATAEND, ENABLE);     <span class="comment">// 开启数据传输结束中断 ，Data end (data counter, SDIDCOUNT, is zero) interrupt</span></span><br><span class="line">    SDIO_DMACmd(ENABLE);                        <span class="comment">// 使能dma方式</span></span><br><span class="line">    SD_DMA_RxConfig((<span class="keyword">uint32_t</span> *)readbuff, (NumberOfBlocks * BlockSize));<span class="comment">//配置DMA接收</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  This function waits until the SDIO DMA data transfer is finished.</span></span><br><span class="line"><span class="comment">  *         This function should be called after SDIO_ReadMultiBlocks() function</span></span><br><span class="line"><span class="comment">  *         to insure that all data sent by the card are already transferred by</span></span><br><span class="line"><span class="comment">  *         the DMA controller.</span></span><br><span class="line"><span class="comment">  * @param  None.</span></span><br><span class="line"><span class="comment">  * @retval SD_Error: SD Card Error code.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_WaitReadOperation</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line">    <span class="comment">//等待dma传输结束</span></span><br><span class="line">    <span class="keyword">while</span> ((SD_DMAEndOfTransferStatus() == RESET) &amp;&amp; (TransferEnd == <span class="number">0</span>) &amp;&amp; (TransferError == SD_OK))</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (TransferError != SD_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> (TransferError);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Allows to write one block starting from a specified address in a card.</span></span><br><span class="line"><span class="comment">  *         The Data transfer can be managed by DMA mode or Polling mode.</span></span><br><span class="line"><span class="comment">  * @note   This operation should be followed by two functions to check if the</span></span><br><span class="line"><span class="comment">  *         DMA Controller and SD Card status.</span></span><br><span class="line"><span class="comment">  *          - SD_ReadWaitOperation(): this function insure that the DMA</span></span><br><span class="line"><span class="comment">  *            controller has finished all data transfer.</span></span><br><span class="line"><span class="comment">  *          - SD_GetStatus(): to check that the SD Card has finished the</span></span><br><span class="line"><span class="comment">  *            data transfer and it is ready for data.</span></span><br><span class="line"><span class="comment">  * @param  writebuff: pointer to the buffer that contain the data to be transferred.</span></span><br><span class="line"><span class="comment">  * @param  WriteAddr: Address from where data are to be read.</span></span><br><span class="line"><span class="comment">  * @param  BlockSize: the SD card Data block size. The Block size should be 512.</span></span><br><span class="line"><span class="comment">  * @retval SD_Error: SD Card Error code.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_WriteBlock</span><span class="params">(<span class="keyword">uint8_t</span> *writebuff, <span class="keyword">uint64_t</span> WriteAddr, <span class="keyword">uint16_t</span> BlockSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (SD_POLLING_MODE)</span></span><br><span class="line">    <span class="keyword">uint32_t</span> bytestransferred = <span class="number">0</span>, count = <span class="number">0</span>, restwords = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> *tempbuff = (<span class="keyword">uint32_t</span> *)writebuff;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    TransferError = SD_OK;</span><br><span class="line">    TransferEnd = <span class="number">0</span>;</span><br><span class="line">    StopCondition = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    SDIO-&gt;DCTRL = <span class="number">0x0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CardType == SDIO_HIGH_CAPACITY_SD_CARD) &#123;</span><br><span class="line">        BlockSize = <span class="number">512</span>;</span><br><span class="line">        WriteAddr /= <span class="number">512</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*-------------- add , 没有这一段容易卡死在DMA检测中 -------------------*/</span></span><br><span class="line">    <span class="comment">/* Set Block Size for Card，cmd16,</span></span><br><span class="line"><span class="comment">     * 若是sdsc卡，可以用来设置块大小，</span></span><br><span class="line"><span class="comment">     * 若是sdhc卡，块大小为512字节，不受cmd16影响</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = (<span class="keyword">uint32_t</span>) BlockSize;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SD_OK != errorstatus) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*********************************************************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Send CMD24 WRITE_SINGLE_BLOCK */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = WriteAddr;      <span class="comment">//写入地址</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;   <span class="comment">//r1</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_WRITE_SINGLE_BLOCK);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置sdio的写数据寄存器</span></span><br><span class="line">    SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_DataLength = BlockSize;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_DataBlockSize = (<span class="keyword">uint32_t</span>) <span class="number">9</span> &lt;&lt; <span class="number">4</span>;  <span class="comment">//可用此参数代替SDIO_DataBlockSize_512b</span></span><br><span class="line">    SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;<span class="comment">//写数据，</span></span><br><span class="line">    SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;     <span class="comment">//开启数据通道状态机</span></span><br><span class="line">    SDIO_DataConfig(&amp;SDIO_DataInitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; In case of single data block transfer no need of stop command at all */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (SD_POLLING_MODE) <span class="comment">//普通模式</span></span></span><br><span class="line">    <span class="keyword">while</span> (!(SDIO-&gt;STA &amp; (SDIO_FLAG_DBCKEND | SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT |</span><br><span class="line">                          SDIO_FLAG_STBITERR))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="number">512</span> - bytestransferred) &lt; <span class="number">32</span>) &#123;</span><br><span class="line">                restwords = ((<span class="number">512</span> - bytestransferred) % <span class="number">4</span> == <span class="number">0</span>) ? ((<span class="number">512</span> - bytestransferred) / <span class="number">4</span>) : ((<span class="number">512</span> -  bytestransferred) / <span class="number">4</span> + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">for</span> (count = <span class="number">0</span>; count &lt; restwords; count++, tempbuff++, bytestransferred += <span class="number">4</span>) &#123;</span><br><span class="line">                    SDIO_WriteData(*tempbuff);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (count = <span class="number">0</span>; count &lt; <span class="number">8</span>; count++) &#123;</span><br><span class="line">                    SDIO_WriteData(*(tempbuff + count));</span><br><span class="line">                &#125;</span><br><span class="line">                tempbuff += <span class="number">8</span>;</span><br><span class="line">                bytestransferred += <span class="number">32</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET) &#123;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);</span><br><span class="line">        errorstatus = SD_DATA_TIMEOUT;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET) &#123;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);</span><br><span class="line">        errorstatus = SD_DATA_CRC_FAIL;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET) &#123;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);</span><br><span class="line">        errorstatus = SD_TX_UNDERRUN;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET) &#123;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_STBITERR);</span><br><span class="line">        errorstatus = SD_START_BIT_ERR;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined (SD_DMA_MODE) <span class="comment">//dma模式</span></span></span><br><span class="line">    SDIO_ITConfig(SDIO_IT_DATAEND, ENABLE);  <span class="comment">//数据传输结束中断</span></span><br><span class="line">    SD_DMA_TxConfig((<span class="keyword">uint32_t</span> *)writebuff, BlockSize); <span class="comment">//配置dma，跟rx类似</span></span><br><span class="line">    SDIO_DMACmd(ENABLE);     <span class="comment">// 使能sdio的dma请求</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Allows to write blocks starting from a specified address in a card.</span></span><br><span class="line"><span class="comment">  *         The Data transfer can be managed by DMA mode only.</span></span><br><span class="line"><span class="comment">  * @note   This operation should be followed by two functions to check if the</span></span><br><span class="line"><span class="comment">  *         DMA Controller and SD Card status.</span></span><br><span class="line"><span class="comment">  *          - SD_ReadWaitOperation(): this function insure that the DMA</span></span><br><span class="line"><span class="comment">  *            controller has finished all data transfer.</span></span><br><span class="line"><span class="comment">  *          - SD_GetStatus(): to check that the SD Card has finished the</span></span><br><span class="line"><span class="comment">  *            data transfer and it is ready for data.</span></span><br><span class="line"><span class="comment">  * @param  WriteAddr: Address from where data are to be read.</span></span><br><span class="line"><span class="comment">  * @param  writebuff: pointer to the buffer that contain the data to be transferred.</span></span><br><span class="line"><span class="comment">  * @param  BlockSize: the SD card Data block size. The Block size should be 512.</span></span><br><span class="line"><span class="comment">  * @param  NumberOfBlocks: number of blocks to be written.</span></span><br><span class="line"><span class="comment">  * @retval SD_Error: SD Card Error code.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 函数名：SD_WriteMultiBlocks</span></span><br><span class="line"><span class="comment">* 描述  ：从输入的起始地址开始，向卡写入多个数据块，</span></span><br><span class="line"><span class="comment">      只能在DMA模式下使用这个函数</span></span><br><span class="line"><span class="comment">注意：调用这个函数后一定要调用</span></span><br><span class="line"><span class="comment">        SD_WaitWriteOperation（）来等待DMA传输结束</span></span><br><span class="line"><span class="comment">        和 SD_GetStatus() 检测卡与SDIO的FIFO间是否已经完成传输</span></span><br><span class="line"><span class="comment">* 输入  ：</span></span><br><span class="line"><span class="comment">      * @param  WriteAddr: Address from where data are to be read.</span></span><br><span class="line"><span class="comment">      * @param  writebuff: pointer to the buffer that contain the data to be transferred.</span></span><br><span class="line"><span class="comment">      * @param  BlockSize: the SD card Data block size. The Block size should be 512.</span></span><br><span class="line"><span class="comment">      * @param  NumberOfBlocks: number of blocks to be written.</span></span><br><span class="line"><span class="comment">* 输出  ：SD错误类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_WriteMultiBlocks</span><span class="params">(<span class="keyword">uint8_t</span> *writebuff, <span class="keyword">uint64_t</span> WriteAddr, <span class="keyword">uint16_t</span> BlockSize, <span class="keyword">uint32_t</span> NumberOfBlocks)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line">    __IO <span class="keyword">uint32_t</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    TransferError = SD_OK;</span><br><span class="line">    TransferEnd = <span class="number">0</span>;</span><br><span class="line">    StopCondition = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    SDIO-&gt;DCTRL = <span class="number">0x0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CardType == SDIO_HIGH_CAPACITY_SD_CARD) &#123;</span><br><span class="line">        BlockSize = <span class="number">512</span>;</span><br><span class="line">        WriteAddr /= <span class="number">512</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*******************add，没有这一段容易卡死在DMA检测中*************************************/</span></span><br><span class="line">    <span class="comment">/*!&lt; Set Block Size for Card，cmd16,若是sdsc卡，可以用来设置块大小，若是sdhc卡，块大小为512字节，不受cmd16影响 */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = (<span class="keyword">uint32_t</span>) BlockSize;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;   <span class="comment">//r1</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SD_OK != errorstatus) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*********************************************************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; To improve performance  */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = (<span class="keyword">uint32_t</span>)(RCA &lt;&lt; <span class="number">16</span>);</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;   <span class="comment">// cmd55</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_APP_CMD);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*!&lt; To improve performance */</span><span class="comment">//  pre-erased，在多块写入时可发送此命令进行预擦除</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = (<span class="keyword">uint32_t</span>)NumberOfBlocks;  <span class="comment">//参数为将要写入的块数目</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCK_COUNT;    <span class="comment">//cmd23</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_SET_BLOCK_COUNT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Send CMD25 WRITE_MULT_BLOCK with argument data address */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = (<span class="keyword">uint32_t</span>)WriteAddr;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_MULT_BLOCK;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_WRITE_MULT_BLOCK);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SD_OK != errorstatus) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_DataBlockSize = (<span class="keyword">uint32_t</span>) <span class="number">9</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;</span><br><span class="line">    SDIO_DataConfig(&amp;SDIO_DataInitStructure);</span><br><span class="line"></span><br><span class="line">    SDIO_ITConfig(SDIO_IT_DATAEND, ENABLE);</span><br><span class="line">    SDIO_DMACmd(ENABLE);</span><br><span class="line">    SD_DMA_TxConfig((<span class="keyword">uint32_t</span> *)writebuff, (NumberOfBlocks * BlockSize));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  This function waits until the SDIO DMA data transfer is finished.</span></span><br><span class="line"><span class="comment">  *         This function should be called after SDIO_WriteBlock() and</span></span><br><span class="line"><span class="comment">  *         SDIO_WriteMultiBlocks() function to insure that all data sent by the</span></span><br><span class="line"><span class="comment">  *         card are already transferred by the DMA controller.</span></span><br><span class="line"><span class="comment">  * @param  None.</span></span><br><span class="line"><span class="comment">  * @retval SD_Error: SD Card Error code.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_WaitWriteOperation</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line">    <span class="comment">//等待dma是否传输结束</span></span><br><span class="line">    <span class="keyword">while</span> ((SD_DMAEndOfTransferStatus() == RESET) &amp;&amp; (TransferEnd == <span class="number">0</span>) &amp;&amp; (TransferError == SD_OK))</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (TransferError != SD_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> (TransferError);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Clear all the static flags */</span></span><br><span class="line">    SDIO_ClearFlag(SDIO_STATIC_FLAGS);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Gets the cuurent data transfer state.</span></span><br><span class="line"><span class="comment">  * @param  None</span></span><br><span class="line"><span class="comment">  * @retval SDTransferState: Data Transfer state.</span></span><br><span class="line"><span class="comment">  *   This value can be:</span></span><br><span class="line"><span class="comment">  *        - SD_TRANSFER_OK: No data transfer is acting</span></span><br><span class="line"><span class="comment">  *        - SD_TRANSFER_BUSY: Data transfer is acting</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">SDTransferState <span class="title">SD_GetTransferState</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (SDIO-&gt;STA &amp; (SDIO_FLAG_TXACT | SDIO_FLAG_RXACT)) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_TRANSFER_BUSY);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_TRANSFER_OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Aborts an ongoing data transfer.</span></span><br><span class="line"><span class="comment">  * @param  None</span></span><br><span class="line"><span class="comment">  * @retval SD_Error: SD Card Error code.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_StopTransfer</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Send CMD12 STOP_TRANSMISSION  */</span></span><br><span class="line">    SDIO-&gt;ARG = <span class="number">0x0</span>;</span><br><span class="line">    SDIO-&gt;CMD = <span class="number">0x44C</span>;</span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Allows to erase memory area specified for the given card.</span></span><br><span class="line"><span class="comment">  * @param  startaddr: the start address.</span></span><br><span class="line"><span class="comment">  * @param  endaddr: the end address.</span></span><br><span class="line"><span class="comment">  * @retval SD_Error: SD Card Error code.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_Erase</span><span class="params">(<span class="keyword">uint32_t</span> startaddr, <span class="keyword">uint32_t</span> endaddr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line">    <span class="keyword">uint32_t</span> delay = <span class="number">0</span>;</span><br><span class="line">    __IO <span class="keyword">uint32_t</span> maxdelay = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">uint8_t</span> cardstate = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Check if the card coomnd class supports erase command */</span></span><br><span class="line">    <span class="keyword">if</span> (((CSD_Tab[<span class="number">1</span>] &gt;&gt; <span class="number">20</span>) &amp; SD_CCCC_ERASE) == <span class="number">0</span>) &#123;</span><br><span class="line">        errorstatus = SD_REQUEST_NOT_APPLICABLE;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    maxdelay = <span class="number">120000</span> / ((SDIO-&gt;CLKCR &amp; <span class="number">0xFF</span>) + <span class="number">2</span>);             <span class="comment">// 延时，根据时钟分频设置来计算</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SDIO_GetResponse(SDIO_RESP1) &amp; SD_CARD_LOCKED) &#123;        <span class="comment">// 卡已上锁</span></span><br><span class="line">        errorstatus = SD_LOCK_UNLOCK_FAILED;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CardType == SDIO_HIGH_CAPACITY_SD_CARD) &#123;               <span class="comment">// sdhc卡，为什么要 /512？详见2.0协议page52</span></span><br><span class="line">        startaddr /= <span class="number">512</span>;                                       <span class="comment">// 在sdhc卡，地址参数为块地址，每块512字节，sdsc卡地址为字节地址</span></span><br><span class="line">        endaddr /= <span class="number">512</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; According to sd-card spec 1.0 ERASE_GROUP_START (CMD32) and erase_group_end(CMD33) */</span></span><br><span class="line">    <span class="keyword">if</span> ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) ||</span><br><span class="line">        (SDIO_HIGH_CAPACITY_SD_CARD == CardType)) &#123;</span><br><span class="line">        <span class="comment">/*!&lt; Send CMD32 SD_ERASE_GRP_START with argument as addr */</span></span><br><span class="line">        SDIO_CmdInitStructure.SDIO_Argument = startaddr;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_ERASE_GRP_START;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;      <span class="comment">// R1</span></span><br><span class="line">        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">        SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">        errorstatus = CmdResp1Error(SD_CMD_SD_ERASE_GRP_START);</span><br><span class="line">        <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> (errorstatus);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*!&lt; Send CMD33 SD_ERASE_GRP_END with argument as addr  */</span></span><br><span class="line">        SDIO_CmdInitStructure.SDIO_Argument = endaddr;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_ERASE_GRP_END;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">        SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">        errorstatus = CmdResp1Error(SD_CMD_SD_ERASE_GRP_END);</span><br><span class="line">        <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">            <span class="keyword">return</span> (errorstatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Send CMD38 ERASE */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = <span class="number">0</span>;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ERASE;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait     = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM     = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_ERASE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (delay = <span class="number">0</span>; delay &lt; maxdelay; delay++)</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Wait till the card is in programming state */</span></span><br><span class="line">    errorstatus = IsCardProgramming(&amp;cardstate);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((errorstatus == SD_OK) &amp;&amp; ((SD_CARD_PROGRAMMING == cardstate) || (SD_CARD_RECEIVING == cardstate))) &#123;</span><br><span class="line">        errorstatus = IsCardProgramming(&amp;cardstate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Returns the current card&#x27;s status.</span></span><br><span class="line"><span class="comment">  * @param  pcardstatus: pointer to the buffer that will contain the SD card</span></span><br><span class="line"><span class="comment">  *         status (Card Status register).</span></span><br><span class="line"><span class="comment">  * @retval SD_Error: SD Card Error code.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_SendStatus</span><span class="params">(<span class="keyword">uint32_t</span> *pcardstatus)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line"></span><br><span class="line">    SDIO-&gt;ARG = (<span class="keyword">uint32_t</span>) RCA &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    SDIO-&gt;CMD = <span class="number">0x44D</span>;</span><br><span class="line"></span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *pcardstatus = SDIO-&gt;RESP1;</span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Returns the current SD card&#x27;s status.</span></span><br><span class="line"><span class="comment">  * @param  psdstatus: pointer to the buffer that will contain the SD card status</span></span><br><span class="line"><span class="comment">  *         (SD Status register).</span></span><br><span class="line"><span class="comment">  * @retval SD_Error: SD Card Error code.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_SendSDStatus</span><span class="params">(<span class="keyword">uint32_t</span> *psdstatus)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line">    <span class="keyword">uint32_t</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SDIO_GetResponse(SDIO_RESP1) &amp; SD_CARD_LOCKED) &#123;</span><br><span class="line">        errorstatus = SD_LOCK_UNLOCK_FAILED;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Set block size for card if it is not equal to current block size for card. */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = <span class="number">64</span>;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; CMD55 */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = (<span class="keyword">uint32_t</span>) RCA &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_APP_CMD);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_DataLength = <span class="number">64</span>;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_64b;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;</span><br><span class="line">    SDIO_DataConfig(&amp;SDIO_DataInitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Send ACMD13 SD_APP_STAUS  with argument as card&#x27;s RCA.*/</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = <span class="number">0</span>;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_STAUS;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_SD_APP_STAUS);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!(SDIO-&gt;STA &amp; (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND |</span><br><span class="line">                          SDIO_FLAG_STBITERR))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET) &#123;</span><br><span class="line">            <span class="keyword">for</span> (count = <span class="number">0</span>; count &lt; <span class="number">8</span>; count++) &#123;</span><br><span class="line">                *(psdstatus + count) = SDIO_ReadData();</span><br><span class="line">            &#125;</span><br><span class="line">            psdstatus += <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET) &#123;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);</span><br><span class="line">        errorstatus = SD_DATA_TIMEOUT;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET) &#123;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);</span><br><span class="line">        errorstatus = SD_DATA_CRC_FAIL;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET) &#123;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_RXOVERR);</span><br><span class="line">        errorstatus = SD_RX_OVERRUN;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET) &#123;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_STBITERR);</span><br><span class="line">        errorstatus = SD_START_BIT_ERR;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET) &#123;</span><br><span class="line">        *psdstatus = SDIO_ReadData();</span><br><span class="line">        psdstatus++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Clear all the static status flags*/</span></span><br><span class="line">    SDIO_ClearFlag(SDIO_STATIC_FLAGS);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数名：SD_ProcessIRQSrc</span></span><br><span class="line"><span class="comment"> * 描述  ：数据传输结束中断</span></span><br><span class="line"><span class="comment"> * 输入  ：无</span></span><br><span class="line"><span class="comment"> * 输出  ：SD错误类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">SD_Error <span class="title">SD_ProcessIRQSrc</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StopCondition == <span class="number">1</span>) &#123;           <span class="comment">// 发送读取、多块读写命令时置1</span></span><br><span class="line">        SDIO-&gt;ARG = <span class="number">0x0</span>;                <span class="comment">// 命令参数寄存器</span></span><br><span class="line">        SDIO-&gt;CMD = <span class="number">0x44C</span>;              <span class="comment">// 命令寄存器： 0100    01      001100</span></span><br><span class="line">        <span class="comment">//                                                   [7:6]   [5:0]</span></span><br><span class="line">        <span class="comment">//              CPSMEN  WAITRESP CMDINDEX</span></span><br><span class="line">        <span class="comment">//      开启命令状态机   短响应   cmd12 STOP_ TRANSMISSION</span></span><br><span class="line">        TransferError = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        TransferError = SD_OK;</span><br><span class="line">    &#125;</span><br><span class="line">    SDIO_ClearITPendingBit(SDIO_IT_DATAEND);        <span class="comment">// 清中断</span></span><br><span class="line">    SDIO_ITConfig(SDIO_IT_DATAEND, DISABLE);        <span class="comment">// 关闭sdio中断使能</span></span><br><span class="line">    TransferEnd = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (TransferError);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief               对CMD0命令的检查</span></span><br><span class="line"><span class="comment"> * @return SD_Error     SD错误类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> SD_Error <span class="title">CmdError</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line">    <span class="keyword">uint32_t</span> timeout;</span><br><span class="line"></span><br><span class="line">    timeout = SDIO_CMD0TIMEOUT; <span class="comment">/*!&lt; 10000 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*检查命令是否已发送*/</span></span><br><span class="line">    <span class="keyword">while</span> ((timeout &gt; <span class="number">0</span>) &amp;&amp; (SDIO_GetFlagStatus(SDIO_FLAG_CMDSENT) == RESET)) &#123;</span><br><span class="line">        timeout--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timeout == <span class="number">0</span>) &#123;</span><br><span class="line">        errorstatus = SD_CMD_RSP_TIMEOUT;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Clear all the static flags */</span></span><br><span class="line">    SDIO_ClearFlag(SDIO_STATIC_FLAGS);<span class="comment">//清除静态标志位</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数名：CmdResp7Error</span></span><br><span class="line"><span class="comment"> * 描述  ：对响应类型为R7的命令进行检查</span></span><br><span class="line"><span class="comment"> * 输入  ：无</span></span><br><span class="line"><span class="comment"> * 输出  ：SD错误类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> SD_Error <span class="title">CmdResp7Error</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line">    <span class="keyword">uint32_t</span> status;</span><br><span class="line">    <span class="keyword">uint32_t</span> timeout = SDIO_CMD0TIMEOUT;</span><br><span class="line"></span><br><span class="line">    status = SDIO-&gt;STA; <span class="comment">//读取SDIO状态寄存器 ，此状态寄存器是stm32的寄存器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Command response received (CRC check failed) ：Command response received (CRC check passed)：Command response timeout */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!(status &amp; (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) &amp;&amp; (timeout &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">        timeout--;</span><br><span class="line">        status = SDIO-&gt;STA;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//卡不响应cmd8</span></span><br><span class="line">    <span class="keyword">if</span> ((timeout == <span class="number">0</span>) || (status &amp; SDIO_FLAG_CTIMEOUT)) &#123;</span><br><span class="line">        <span class="comment">/*!&lt; Card is not V2.0 complient or card does not support the set voltage range */</span></span><br><span class="line">        errorstatus = SD_CMD_RSP_TIMEOUT;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (status &amp; SDIO_FLAG_CMDREND) &#123;</span><br><span class="line">        <span class="comment">/*!&lt; Card is SD V2.0 compliant */</span></span><br><span class="line">        errorstatus = SD_OK;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_CMDREND);</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数名：CmdResp1Error</span></span><br><span class="line"><span class="comment"> * 描述  ：对响应类型为R1的命令进行检查</span></span><br><span class="line"><span class="comment"> * 输入  ：无</span></span><br><span class="line"><span class="comment"> * 输出  ：SD错误类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> SD_Error <span class="title">CmdResp1Error</span><span class="params">(<span class="keyword">uint8_t</span> cmd)</span> <span class="comment">//传入的参数有什么用？</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*不是这些状态就等待   */</span></span><br><span class="line">    <span class="keyword">while</span> (!(SDIO-&gt;STA &amp; (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SDIO-&gt;ICR = SDIO_STATIC_FLAGS;  <span class="comment">//清中断标志</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (SD_Error)(SDIO-&gt;RESP1 &amp;  SD_OCR_ERRORBITS);     <span class="comment">//判断是否在供电范围</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数名：CmdResp3Error</span></span><br><span class="line"><span class="comment"> * 描述  ：对响应类型为R3的命令进行检查</span></span><br><span class="line"><span class="comment"> * 输入  ：无</span></span><br><span class="line"><span class="comment"> * 输出  ：SD错误类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> SD_Error <span class="title">CmdResp3Error</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line">    <span class="keyword">uint32_t</span> status;</span><br><span class="line"></span><br><span class="line">    status = SDIO-&gt;STA;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!(status &amp; (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))) &#123;</span><br><span class="line">        status = SDIO-&gt;STA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (status &amp; SDIO_FLAG_CTIMEOUT) &#123;</span><br><span class="line">        errorstatus = SD_CMD_RSP_TIMEOUT;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*!&lt; Clear all the static flags */</span></span><br><span class="line">    SDIO_ClearFlag(SDIO_STATIC_FLAGS);</span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数名：CmdResp2Error</span></span><br><span class="line"><span class="comment"> * 描述  ：对响应类型为R2的命令进行检查</span></span><br><span class="line"><span class="comment"> * 输入  ：无</span></span><br><span class="line"><span class="comment"> * 输出  ：SD错误类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> SD_Error <span class="title">CmdResp2Error</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line">    <span class="keyword">uint32_t</span> status;</span><br><span class="line"></span><br><span class="line">    status = SDIO-&gt;STA;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!(status &amp; (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND))) &#123;</span><br><span class="line">        status = SDIO-&gt;STA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (status &amp; SDIO_FLAG_CTIMEOUT) &#123;</span><br><span class="line">        errorstatus = SD_CMD_RSP_TIMEOUT;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status &amp; SDIO_FLAG_CCRCFAIL) &#123;</span><br><span class="line">        errorstatus = SD_CMD_CRC_FAIL;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Clear all the static flags */</span></span><br><span class="line">    SDIO_ClearFlag(SDIO_STATIC_FLAGS);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数名：CmdResp6Error</span></span><br><span class="line"><span class="comment"> * 描述  ：对响应类型为R6的命令进行检查</span></span><br><span class="line"><span class="comment"> * 输入  ：cmd 命令索引号，</span></span><br><span class="line"><span class="comment"> *        prca 用来存储接收到的卡相对地址</span></span><br><span class="line"><span class="comment"> * 输出  ：SD错误类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> SD_Error <span class="title">CmdResp6Error</span><span class="params">(<span class="keyword">uint8_t</span> cmd, <span class="keyword">uint16_t</span> *prca)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line">    <span class="keyword">uint32_t</span> status;</span><br><span class="line">    <span class="keyword">uint32_t</span> response_r1;</span><br><span class="line"></span><br><span class="line">    status = SDIO-&gt;STA;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!(status &amp; (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND))) &#123;</span><br><span class="line">        status = SDIO-&gt;STA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (status &amp; SDIO_FLAG_CTIMEOUT) &#123;</span><br><span class="line">        errorstatus = SD_CMD_RSP_TIMEOUT;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status &amp; SDIO_FLAG_CCRCFAIL) &#123;</span><br><span class="line">        errorstatus = SD_CMD_CRC_FAIL;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Check response received is of desired command */</span></span><br><span class="line">    <span class="keyword">if</span> (SDIO_GetCommandResponse() != cmd) &#123;  <span class="comment">//检测是否接收到正常命令</span></span><br><span class="line">        errorstatus = SD_ILLEGAL_CMD;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Clear all the static flags */</span></span><br><span class="line">    SDIO_ClearFlag(SDIO_STATIC_FLAGS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; We have received response, retrieve it.  */</span></span><br><span class="line">    response_r1 = SDIO_GetResponse(SDIO_RESP1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*以下状态全为0表明成功接收到card返回的rca */</span></span><br><span class="line">    <span class="keyword">if</span> (SD_ALLZERO == (response_r1 &amp; (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED))) &#123;</span><br><span class="line">        *prca = (<span class="keyword">uint16_t</span>)(response_r1 &gt;&gt; <span class="number">16</span>); <span class="comment">//右移16位，就是接收到的返回rca</span></span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response_r1 &amp; SD_R6_GENERAL_UNKNOWN_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_GENERAL_UNKNOWN_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response_r1 &amp; SD_R6_ILLEGAL_CMD) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_ILLEGAL_CMD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response_r1 &amp; SD_R6_COM_CRC_FAILED) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_COM_CRC_FAILED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数名 ：SDEnWideBus</span></span><br><span class="line"><span class="comment"> * 描述  ：使能或关闭SDIO的4bit模式</span></span><br><span class="line"><span class="comment"> * 输入  ：新状态  ENABLE 或DISABLE</span></span><br><span class="line"><span class="comment"> * 输出  ：SD错误类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> SD_Error <span class="title">SDEnWideBus</span><span class="params">(FunctionalState NewState)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint32_t</span> scr[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SDIO_GetResponse(SDIO_RESP1) &amp; SD_CARD_LOCKED) &#123; <span class="comment">//检测卡是否已上锁</span></span><br><span class="line">        errorstatus = SD_LOCK_UNLOCK_FAILED;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Get SCR Register */</span></span><br><span class="line">    errorstatus = FindSCR(RCA, scr);<span class="comment">//获取scr寄存器内容到scr数组中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus != SD_OK) &#123;   <span class="comment">//degug,crc错误，scr读取不了数值</span></span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; If wide bus operation to be enabled */</span></span><br><span class="line">    <span class="keyword">if</span> (NewState == ENABLE) &#123;</span><br><span class="line">        <span class="comment">/*!&lt; If requested card supports wide bus operation */</span></span><br><span class="line">        <span class="keyword">if</span> ((scr[<span class="number">1</span>] &amp; SD_WIDE_BUS_SUPPORT) != SD_ALLZERO) &#123; <span class="comment">//判断卡是否支持4位方式</span></span><br><span class="line">            <span class="comment">/*!&lt; Send CMD55 APP_CMD with argument as card&#x27;s RCA.*/</span></span><br><span class="line">            SDIO_CmdInitStructure.SDIO_Argument = (<span class="keyword">uint32_t</span>) RCA &lt;&lt; <span class="number">16</span>;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">            SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">            errorstatus = CmdResp1Error(SD_CMD_APP_CMD);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">                <span class="keyword">return</span> (errorstatus);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*!&lt; Send ACMD6 APP_CMD with argument as 2 for wide bus mode */</span></span><br><span class="line">            <span class="comment">/*开启4bit模式的命令acmd6*/</span></span><br><span class="line">            SDIO_CmdInitStructure.SDIO_Argument = <span class="number">0x2</span>;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">            SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">            errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">                <span class="keyword">return</span> (errorstatus);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (errorstatus);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            errorstatus = SD_REQUEST_NOT_APPLICABLE;</span><br><span class="line">            <span class="keyword">return</span> (errorstatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   <span class="comment">/*!&lt; If wide bus operation to be disabled */</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/*!&lt; If requested card supports 1 bit mode operation */</span></span><br><span class="line">        <span class="keyword">if</span> ((scr[<span class="number">1</span>] &amp; SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO) &#123;</span><br><span class="line">            <span class="comment">/*!&lt; Send CMD55 APP_CMD with argument as card&#x27;s RCA.*/</span></span><br><span class="line">            SDIO_CmdInitStructure.SDIO_Argument = (<span class="keyword">uint32_t</span>) RCA &lt;&lt; <span class="number">16</span>;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">            SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            errorstatus = CmdResp1Error(SD_CMD_APP_CMD);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">                <span class="keyword">return</span> (errorstatus);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*!&lt; Send ACMD6 APP_CMD with argument as 0 for single bus mode */</span></span><br><span class="line">            SDIO_CmdInitStructure.SDIO_Argument = <span class="number">0x00</span>;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">            SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">            SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">            errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">                <span class="keyword">return</span> (errorstatus);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (errorstatus);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            errorstatus = SD_REQUEST_NOT_APPLICABLE;</span><br><span class="line">            <span class="keyword">return</span> (errorstatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数名：IsCardProgramming</span></span><br><span class="line"><span class="comment"> * 描述  ：检测SD卡是不是正在进行内部读写操作</span></span><br><span class="line"><span class="comment"> * 输入  ：用来装载SD state状态的指针</span></span><br><span class="line"><span class="comment"> * 输出  ：SD错误类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> SD_Error <span class="title">IsCardProgramming</span><span class="params">(<span class="keyword">uint8_t</span> *pstatus)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line">    __IO <span class="keyword">uint32_t</span> respR1 = <span class="number">0</span>, status = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*cmd13让卡发送卡状态寄存器，存储到m3的位置为sdio_sta寄存器*/</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = (<span class="keyword">uint32_t</span>) RCA &lt;&lt; <span class="number">16</span>; <span class="comment">//卡相对地址参数</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    status = SDIO-&gt;STA;</span><br><span class="line">    <span class="keyword">while</span> (!(status &amp; (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT))) &#123;</span><br><span class="line">        status = SDIO-&gt;STA;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*一系列的状态判断*/</span></span><br><span class="line">    <span class="keyword">if</span> (status &amp; SDIO_FLAG_CTIMEOUT) &#123;</span><br><span class="line">        errorstatus = SD_CMD_RSP_TIMEOUT;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status &amp; SDIO_FLAG_CCRCFAIL) &#123;</span><br><span class="line">        errorstatus = SD_CMD_CRC_FAIL;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    status = (<span class="keyword">uint32_t</span>)SDIO_GetCommandResponse();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Check response received is of desired command */</span></span><br><span class="line">    <span class="keyword">if</span> (status != SD_CMD_SEND_STATUS) &#123;</span><br><span class="line">        errorstatus = SD_ILLEGAL_CMD;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Clear all the static flags */</span></span><br><span class="line">    SDIO_ClearFlag(SDIO_STATIC_FLAGS);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; We have received response, retrieve it for analysis  */</span></span><br><span class="line">    respR1 = SDIO_GetResponse(SDIO_RESP1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Find out card status */</span></span><br><span class="line">    *pstatus = (<span class="keyword">uint8_t</span>)((respR1 &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0x0000000F</span>);    <span class="comment">//status[12:9] :cardstate</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((respR1 &amp; SD_OCR_ERRORBITS) == SD_ALLZERO) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_ADDR_OUT_OF_RANGE) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_ADDR_OUT_OF_RANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_ADDR_MISALIGNED) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_ADDR_MISALIGNED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_BLOCK_LEN_ERR) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_BLOCK_LEN_ERR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_ERASE_SEQ_ERR) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_ERASE_SEQ_ERR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_BAD_ERASE_PARAM) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_BAD_ERASE_PARAM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_WRITE_PROT_VIOLATION) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_WRITE_PROT_VIOLATION);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_LOCK_UNLOCK_FAILED) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_LOCK_UNLOCK_FAILED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_COM_CRC_FAILED) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_COM_CRC_FAILED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_ILLEGAL_CMD) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_ILLEGAL_CMD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_CARD_ECC_FAILED) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_CARD_ECC_FAILED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_CC_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_CC_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_GENERAL_UNKNOWN_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_GENERAL_UNKNOWN_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_STREAM_READ_UNDERRUN) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_STREAM_READ_UNDERRUN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_STREAM_WRITE_OVERRUN) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_STREAM_WRITE_OVERRUN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_CID_CSD_OVERWRIETE) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_CID_CSD_OVERWRITE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_WP_ERASE_SKIP) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_WP_ERASE_SKIP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_CARD_ECC_DISABLED) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_CARD_ECC_DISABLED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_ERASE_RESET) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_ERASE_RESET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (respR1 &amp; SD_OCR_AKE_SEQ_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> (SD_AKE_SEQ_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数名 ：FindSCR</span></span><br><span class="line"><span class="comment"> * 描述  ：读取SD卡的SCR寄存器的内容</span></span><br><span class="line"><span class="comment"> * 输入  ：RCA卡相对地址</span></span><br><span class="line"><span class="comment"> *        pscr 用来装载SCR内容的指针</span></span><br><span class="line"><span class="comment"> * 输出  ：SD错误类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> SD_Error <span class="title">FindSCR</span><span class="params">(<span class="keyword">uint16_t</span> rca, <span class="keyword">uint32_t</span> *pscr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint32_t</span> index = <span class="number">0</span>;</span><br><span class="line">    SD_Error errorstatus = SD_OK;</span><br><span class="line">    <span class="keyword">uint32_t</span> tempscr[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Set Block Size To 8 Bytes */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = (<span class="keyword">uint32_t</span>)<span class="number">8</span>;   <span class="comment">//块大小如果是sdhc卡是无法改变块大小的 //原参数8</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN; <span class="comment">//    cmd16</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;  <span class="comment">//r1</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Send CMD55 APP_CMD with argument as card&#x27;s RCA */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = (<span class="keyword">uint32_t</span>) RCA &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_APP_CMD);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*设置数据接收寄存器*/</span></span><br><span class="line">    SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_DataLength = <span class="number">8</span>;  <span class="comment">//8byte,64位</span></span><br><span class="line">    SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b  ;  <span class="comment">//块大小8byte</span></span><br><span class="line">    SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;</span><br><span class="line">    SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;</span><br><span class="line">    SDIO_DataConfig(&amp;SDIO_DataInitStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Send ACMD51 SD_APP_SEND_SCR with argument as 0 */</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Argument = <span class="number">0x0</span>;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_SEND_SCR;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;  <span class="comment">//r1</span></span><br><span class="line">    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;</span><br><span class="line">    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;</span><br><span class="line">    SDIO_SendCommand(&amp;SDIO_CmdInitStructure);</span><br><span class="line"></span><br><span class="line">    errorstatus = CmdResp1Error(SD_CMD_SD_APP_SEND_SCR);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorstatus != SD_OK) &#123;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*等待接收数据 */</span></span><br><span class="line">    <span class="comment">/*不是这些情况就循环*/</span></span><br><span class="line">    <span class="comment">/*上溢出错    //数据crc失败     //数据超时    //已接收数据块，crc检测成功    //没有在所有数据线上检测到起始信号*/</span></span><br><span class="line">    <span class="keyword">while</span> (!(SDIO-&gt;STA &amp; (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND |</span><br><span class="line">                          SDIO_FLAG_STBITERR))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET) &#123;    <span class="comment">//接收到的数据是否可用</span></span><br><span class="line">            *(tempscr + index) = SDIO_ReadData();</span><br><span class="line">            index++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*   //add。这段在官方源码没有加判断            */</span></span><br><span class="line">            <span class="keyword">if</span> (index &gt; <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET) &#123;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);</span><br><span class="line">        errorstatus = SD_DATA_TIMEOUT;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET) &#123;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);</span><br><span class="line">        errorstatus = SD_DATA_CRC_FAIL;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET) &#123;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_RXOVERR);</span><br><span class="line">        errorstatus = SD_RX_OVERRUN;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET) &#123;</span><br><span class="line">        SDIO_ClearFlag(SDIO_FLAG_STBITERR);</span><br><span class="line">        errorstatus = SD_START_BIT_ERR;</span><br><span class="line">        <span class="keyword">return</span> (errorstatus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*!&lt; Clear all the static flags */</span></span><br><span class="line">    SDIO_ClearFlag(SDIO_STATIC_FLAGS);</span><br><span class="line"></span><br><span class="line">    *(pscr + <span class="number">1</span>) = ((tempscr[<span class="number">0</span>] &amp; SD_0TO7BITS) &lt;&lt; <span class="number">24</span>) | ((tempscr[<span class="number">0</span>] &amp; SD_8TO15BITS) &lt;&lt; <span class="number">8</span>) | ((</span><br><span class="line">                      tempscr[<span class="number">0</span>] &amp; SD_16TO23BITS) &gt;&gt; <span class="number">8</span>) | ((tempscr[<span class="number">0</span>] &amp; SD_24TO31BITS) &gt;&gt; <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">    *(pscr) = ((tempscr[<span class="number">1</span>] &amp; SD_0TO7BITS) &lt;&lt; <span class="number">24</span>) | ((tempscr[<span class="number">1</span>] &amp; SD_8TO15BITS) &lt;&lt; <span class="number">8</span>) | ((</span><br><span class="line">                  tempscr[<span class="number">1</span>] &amp; SD_16TO23BITS) &gt;&gt; <span class="number">8</span>) | ((tempscr[<span class="number">1</span>] &amp; SD_24TO31BITS) &gt;&gt; <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (errorstatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Converts the number of bytes in power of two and returns the power.</span></span><br><span class="line"><span class="comment">  * @param  NumberOfBytes: number of bytes.</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">convert_from_bytes_to_power_of_two</span><span class="params">(<span class="keyword">uint16_t</span> NumberOfBytes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (NumberOfBytes != <span class="number">1</span>) &#123;</span><br><span class="line">        NumberOfBytes &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/</span></span><br></pre></td></tr></table></figure><h3 id="app_sdcard.h">3.3 app_sdcard.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __APP_SDCARD_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __APP_SDCARD_H__</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">app_sdcardTest</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="app_sdcard.c">3.4 app_sdcard.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;app_sdcard.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_sdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bsp_usart.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private typedef -----------------------------------------------------------*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    FAILED = <span class="number">0</span>,</span><br><span class="line">    PASSED = !FAILED</span><br><span class="line">&#125; TestStatus;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private define ------------------------------------------------------------*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLOCK_SIZE              512 <span class="comment">/* Block Size in Bytes */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUMBER_OF_BLOCKS        10  <span class="comment">/* For Multi Blocks operation (Read/Write) */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MULTI_BUFFER_SIZE       (BLOCK_SIZE * NUMBER_OF_BLOCKS)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private macro -------------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">/* Private variables ---------------------------------------------------------*/</span></span><br><span class="line"><span class="keyword">uint8_t</span> Buffer_Block_Tx[BLOCK_SIZE], Buffer_Block_Rx[BLOCK_SIZE];</span><br><span class="line"><span class="keyword">uint8_t</span> Buffer_MultiBlock_Tx[MULTI_BUFFER_SIZE], Buffer_MultiBlock_Rx[MULTI_BUFFER_SIZE];</span><br><span class="line"><span class="keyword">volatile</span> TestStatus EraseStatus = FAILED, TransferStatus1 = FAILED, TransferStatus2 = FAILED;</span><br><span class="line">SD_Error Status = SD_OK;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Private function prototypes -----------------------------------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SD_EraseTest</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SD_SingleBlockTest</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SD_MultiBlockTest</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Fill_Buffer</span><span class="params">(<span class="keyword">uint8_t</span> *pBuffer, <span class="keyword">uint32_t</span> BufferLength, <span class="keyword">uint32_t</span> Offset)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> TestStatus <span class="title">Buffercmp</span><span class="params">(<span class="keyword">uint8_t</span> *pBuffer1, <span class="keyword">uint8_t</span> *pBuffer2, <span class="keyword">uint32_t</span> BufferLength)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> TestStatus <span class="title">eBuffercmp</span><span class="params">(<span class="keyword">uint8_t</span> *pBuffer, <span class="keyword">uint32_t</span> BufferLength)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Show sd card information after successfully initialized</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">app_sdcardInfo</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (SDCardInfo.CardType) &#123;</span><br><span class="line">    <span class="keyword">case</span> SDIO_STD_CAPACITY_SD_CARD_V1_1:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Card Type           : SDSC V1.1\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SDIO_STD_CAPACITY_SD_CARD_V2_0:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Card Type           : SDSC V2.0\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SDIO_HIGH_CAPACITY_SD_CARD:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Card Type           : SDHC V2.0\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SDIO_MULTIMEDIA_CARD:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Card Type           : MMC Card\r\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Card ManufacturerID : %d \r\n&quot;</span>, SDCardInfo.SD_cid.ManufacturerID);              <span class="comment">// 制造商ID</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Card RCA            : %d \r\n&quot;</span>, SDCardInfo.RCA);                                <span class="comment">// 卡相对地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Card Capacity       : %d MB\r\n&quot;</span>, (u32)(SDCardInfo.CardCapacity &gt;&gt; <span class="number">20</span>));        <span class="comment">// 显示容量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Card BlockSize      : %d \r\n\r\n&quot;</span>, SDCardInfo.CardBlockSize);                  <span class="comment">// 显示块大小</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief   Initialize SDIO interface</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">app_sdcardInit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((Status = SD_Init()) != SD_OK) &#123;</span><br><span class="line">        LED1_ON;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;SD card initialized failed, please check if sd card insert correctly or change another card!\r\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        app_sdcardInfo();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;SD card initialized successfully!\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief   SD Card Erase and Write &amp; Read Test</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">app_sdcardTest</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*------------------------------ SD Init ---------------------------------- */</span></span><br><span class="line">    <span class="comment">/* SD卡使用SDIO中断及DMA中断接收数据，中断服务程序位于bsp_sdio_sd.c文件尾*/</span></span><br><span class="line">    app_sdcardInit();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Status == SD_OK) &#123;</span><br><span class="line">        LED2_ON;</span><br><span class="line">        <span class="comment">/* Erase test */</span></span><br><span class="line">        SD_EraseTest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* single block write read test */</span></span><br><span class="line">        SD_SingleBlockTest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 暂不支持直接多块读写，多块读写可用多个单块读写流程代替</span></span><br><span class="line">        <span class="comment">/* muti block write and read */</span></span><br><span class="line">        SD_MultiBlockTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Tests the SD card erase operation.</span></span><br><span class="line"><span class="comment">  * @param  None</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SD_EraseTest</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*------------------- Block Erase ------------------------------------------*/</span></span><br><span class="line">    <span class="keyword">if</span> (Status == SD_OK) &#123;</span><br><span class="line">        <span class="comment">/* Erase NumberOfBlocks Blocks of WRITE_BL_LEN(512 Bytes) */</span></span><br><span class="line">        Status = SD_Erase(<span class="number">0x00</span>, (BLOCK_SIZE * NUMBER_OF_BLOCKS));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Status == SD_OK) &#123;</span><br><span class="line">        Status = SD_ReadMultiBlocks(Buffer_MultiBlock_Rx, <span class="number">0x00</span>, BLOCK_SIZE, NUMBER_OF_BLOCKS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Check if the Transfer is finished */</span></span><br><span class="line">        Status = SD_WaitReadOperation();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Wait until end of DMA transfer */</span></span><br><span class="line">        <span class="keyword">while</span> (SD_GetStatus() != SD_TRANSFER_OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check the correctness of erased blocks */</span></span><br><span class="line">    <span class="keyword">if</span> (Status == SD_OK) &#123;</span><br><span class="line">        EraseStatus = eBuffercmp(Buffer_MultiBlock_Rx, MULTI_BUFFER_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (EraseStatus == PASSED) &#123;</span><br><span class="line">        LED1_ON;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;SD Card erase successfully!\r\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        LED1_OFF;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;SD Card erase failed!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Mark: Some SD Card can NOT be erased, it can be try to use single block write test!\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Tests the SD card Single Blocks operations.</span></span><br><span class="line"><span class="comment">  * @param  None</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SD_SingleBlockTest</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*------------------- Block Read/Write --------------------------*/</span></span><br><span class="line">    <span class="comment">/* Fill the buffer to send */</span></span><br><span class="line">    Fill_Buffer(Buffer_Block_Tx, BLOCK_SIZE, <span class="number">0x320F</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Status == SD_OK) &#123;</span><br><span class="line">        <span class="comment">/* Write block of 512 bytes on address 0 */</span></span><br><span class="line">        Status = SD_WriteBlock(Buffer_Block_Tx, <span class="number">0x00</span>, BLOCK_SIZE);</span><br><span class="line">        <span class="comment">/* Check if the Transfer is finished */</span></span><br><span class="line">        Status = SD_WaitWriteOperation();</span><br><span class="line">        <span class="keyword">while</span> (SD_GetStatus() != SD_TRANSFER_OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Status == SD_OK) &#123;</span><br><span class="line">        <span class="comment">/* Read block of 512 bytes from address 0 */</span></span><br><span class="line">        Status = SD_ReadBlock(Buffer_Block_Rx, <span class="number">0x00</span>, BLOCK_SIZE);</span><br><span class="line">        <span class="comment">/* Check if the Transfer is finished */</span></span><br><span class="line">        Status = SD_WaitReadOperation();</span><br><span class="line">        <span class="keyword">while</span> (SD_GetStatus() != SD_TRANSFER_OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check the correctness of written data */</span></span><br><span class="line">    <span class="keyword">if</span> (Status == SD_OK) &#123;</span><br><span class="line">        TransferStatus1 = Buffercmp(Buffer_Block_Tx, Buffer_Block_Rx, BLOCK_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (TransferStatus1 == PASSED) &#123;</span><br><span class="line">        LED2_ON;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Single block test successfully!\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        LED2_OFF;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Single block test failed! please check if sd card insert correctly or change another one!\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Tests the SD card Multiple Blocks operations.</span></span><br><span class="line"><span class="comment">  * @param  None</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SD_MultiBlockTest</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*--------------- Multiple Block Read/Write ---------------------*/</span></span><br><span class="line">    <span class="comment">/* Fill the buffer to send */</span></span><br><span class="line">    Fill_Buffer(Buffer_MultiBlock_Tx, MULTI_BUFFER_SIZE, <span class="number">0x0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Status == SD_OK) &#123;</span><br><span class="line">        <span class="comment">/* Write multiple block of many bytes on address 0 */</span></span><br><span class="line">        Status = SD_WriteMultiBlocks(Buffer_MultiBlock_Tx, <span class="number">0x00</span>, BLOCK_SIZE, NUMBER_OF_BLOCKS);</span><br><span class="line">        <span class="comment">/* Check if the Transfer is finished */</span></span><br><span class="line">        Status = SD_WaitWriteOperation();</span><br><span class="line">        <span class="keyword">while</span> (SD_GetStatus() != SD_TRANSFER_OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Status == SD_OK) &#123;</span><br><span class="line">        <span class="comment">/* Read block of many bytes from address 0 */</span></span><br><span class="line">        Status = SD_ReadMultiBlocks(Buffer_MultiBlock_Rx, <span class="number">0x00</span>, BLOCK_SIZE, NUMBER_OF_BLOCKS);</span><br><span class="line">        <span class="comment">/* Check if the Transfer is finished */</span></span><br><span class="line">        Status = SD_WaitReadOperation();</span><br><span class="line">        <span class="keyword">while</span> (SD_GetStatus() != SD_TRANSFER_OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check the correctness of written data */</span></span><br><span class="line">    <span class="keyword">if</span> (Status == SD_OK) &#123;</span><br><span class="line">        TransferStatus2 = Buffercmp(Buffer_MultiBlock_Tx, Buffer_MultiBlock_Rx, MULTI_BUFFER_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (TransferStatus2 == PASSED) &#123;</span><br><span class="line">        LED1_ON;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Multi block test successfully!\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        LED1_OFF;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Multi block test failed, please check if sd card insert correctly or change another one!\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Compares two buffers.</span></span><br><span class="line"><span class="comment">  * @param  pBuffer1, pBuffer2: buffers to be compared.</span></span><br><span class="line"><span class="comment">  * @param  BufferLength: buffer&#x27;s length</span></span><br><span class="line"><span class="comment">  * @retval PASSED: pBuffer1 identical to pBuffer2</span></span><br><span class="line"><span class="comment">  *         FAILED: pBuffer1 differs from pBuffer2</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">TestStatus <span class="title">Buffercmp</span><span class="params">(<span class="keyword">uint8_t</span> *pBuffer1, <span class="keyword">uint8_t</span> *pBuffer2, <span class="keyword">uint32_t</span> BufferLength)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (BufferLength--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*pBuffer1 != *pBuffer2) &#123;</span><br><span class="line">            <span class="keyword">return</span> FAILED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pBuffer1++;</span><br><span class="line">        pBuffer2++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> PASSED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Fills buffer with user predefined data.</span></span><br><span class="line"><span class="comment">  * @param  pBuffer: pointer on the Buffer to fill</span></span><br><span class="line"><span class="comment">  * @param  BufferLength: size of the buffer to fill</span></span><br><span class="line"><span class="comment">  * @param  Offset: first value to fill on the Buffer</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fill_Buffer</span><span class="params">(<span class="keyword">uint8_t</span> *pBuffer, <span class="keyword">uint32_t</span> BufferLength, <span class="keyword">uint32_t</span> Offset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint16_t</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Put in global buffer same values */</span></span><br><span class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; BufferLength; index++) &#123;</span><br><span class="line">        pBuffer[index] = index + Offset;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  Checks if a buffer has all its values are equal to zero.</span></span><br><span class="line"><span class="comment">  * @param  pBuffer: buffer to be compared.</span></span><br><span class="line"><span class="comment">  * @param  BufferLength: buffer&#x27;s length</span></span><br><span class="line"><span class="comment">  * @retval PASSED: pBuffer values are zero</span></span><br><span class="line"><span class="comment">  *         FAILED: At least one value from pBuffer buffer is different from zero.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">TestStatus <span class="title">eBuffercmp</span><span class="params">(<span class="keyword">uint8_t</span> *pBuffer, <span class="keyword">uint32_t</span> BufferLength)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (BufferLength--) &#123;</span><br><span class="line">        <span class="comment">/* In some SD Cards the erased state is 0xFF, in others it&#x27;s 0x00 */</span></span><br><span class="line">        <span class="keyword">if</span> ((*pBuffer != <span class="number">0xFF</span>) &amp;&amp; (*pBuffer != <span class="number">0x00</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> FAILED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pBuffer++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> PASSED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sdio-sdio-接口&quot;&gt;[sdio] SDIO 接口&lt;/h1&gt;
&lt;p&gt;&lt;img
src=&quot;https://raw.githubusercontent.com/Tresordie/PicBed/master/img/SDIO.jpg&quot;
alt=&quot;SDIO&quot;</summary>
      
    
    
    
    <category term="协议" scheme="https://tresordie.github.io/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="sdio" scheme="https://tresordie.github.io/tags/sdio/"/>
    
  </entry>
  
  <entry>
    <title>文件系统存在的意义</title>
    <link href="https://tresordie.github.io/2022/03/22/[fs]%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AD%98%E5%9C%A8%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>https://tresordie.github.io/2022/03/22/[fs]%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AD%98%E5%9C%A8%E7%9A%84%E6%84%8F%E4%B9%89/</id>
    <published>2022-03-22T11:00:00.000Z</published>
    <updated>2022-09-01T12:14:35.806Z</updated>
    
    <content type="html"><![CDATA[<p>##[FS]文件系统存在的意义</p><h2 id="为什么需要文件系统">1. 为什么需要文件系统</h2><h3 id="没有文件系统时">1.1 没有文件系统时</h3><blockquote><ol type="1"><li>没有文件系统时，如何在存储介质上读写数据？<ul><li>单字节读写</li><li>页面读写</li><li>扇区读写</li></ul></li><li><font color='brown'>没有文件系统时，之前存储在存储介质中的大量数据，需要读出来，怎么知道之前存在哪个具体的字节地址，页面地址或者扇区地址；现在该从哪里读出来</font></li></ol></blockquote><h3 id="有文件系统时">1.2 有文件系统时</h3><blockquote><ol type="1"><li>使用文件系统时，数据都以文件的形式存储</li><li>写入新文件时，先在目录中创建一个文件索引，它指示了文件存放的物理地址，再把数据存储到该地址中</li><li>读取数据时，可以从目录中找到该文件的索引，进而在相应的地址中读取出数据</li><li>文件系统是为了存储和管理数据，而在存储介质建立的一种组织结构，这些结构包括操作系统引导区、目录和文件；</li><li>在使用文件系统前，要先对存储介质进行格式化。格式化先擦除原来内容，在存储介质上新建一个文件分配表和目录。这样文件系统就可以记录数据存放的物理地址，剩余空间等</li></ol></blockquote><h2 id="文件系统">2. 文件系统</h2><h3 id="嵌入式文件系统">2.1 嵌入式文件系统</h3><blockquote><ol type="1"><li>FATFS</li><li>znFAT</li><li>Little FS</li></ol></blockquote><h3 id="pc-文件系统">2.2 PC 文件系统</h3><blockquote><ol type="1"><li>FAT32</li><li>NTFS</li><li>exFAT</li><li>ext4</li></ol></blockquote><h2 id="file-system-中需要考虑的问题">3. File System中需要考虑的问题</h2><blockquote><p><font color='red'>1. 读取文件时，如何快速定位文件位置并完整读取出来</font></p><p><font color='red'>2. 存储文件时，存储到哪个位置才能充分利用空间</font></p><p><font color='red'>3.  文件删除时，如何对空间进行管理</font></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;##[FS]文件系统存在的意义&lt;/p&gt;
&lt;h2 id=&quot;为什么需要文件系统&quot;&gt;1. 为什么需要文件系统&lt;/h2&gt;
&lt;h3 id=&quot;没有文件系统时&quot;&gt;1.1 没有文件系统时&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;没有文件系统时，如何</summary>
      
    
    
    
    <category term="协议" scheme="https://tresordie.github.io/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
    <category term="file system" scheme="https://tresordie.github.io/tags/file-system/"/>
    
  </entry>
  
  <entry>
    <title>结构体内存对齐</title>
    <link href="https://tresordie.github.io/2022/03/21/[C]%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"/>
    <id>https://tresordie.github.io/2022/03/21/[C]%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</id>
    <published>2022-03-21T12:00:00.000Z</published>
    <updated>2022-09-01T12:14:35.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="c结构体内存对齐">[C]结构体内存对齐</h1><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220321201812346.png"alt="image-20220321201812346" /></p><h2 id="c-语言中结构体内存对齐原则">1. C 语言中结构体内存对齐原则</h2><blockquote><ol type="1"><li>结构体变量的<strong>起始地址</strong>能够被其最宽的成员大小整除</li><li>结构体每个成员相对于<strong>起始地址的偏移</strong>能够被其<strong>自身大小整除</strong>，如果不能则在<strong>前一个成员后面</strong>补充字节</li><li>结构体总体大小能够<strong>被最宽的成员的大小</strong>整除，如不能则在<strong>后面</strong>补充字节</li></ol></blockquote><h2 id="代码测试-1">2. 代码测试 1</h2><blockquote><ol type="1"><li>首先 unsigned char a 被放入内存中，占用一个字节</li><li>其次由于 b 为字符数组，也是一个一个字符，被放进 a 后面的内存，所以 b的起始地址为 a 后面的一个字节地址处(<font color='brown'>b的相对于起始地址的偏移为 1，能被其每一个字符大小整除</font>)，成员 b总共占用 8 个字节</li><li>成员 c 放在 b 的后面，由于 c 自身大小为4，故其相对于起始地址的偏移为 4 的整数，由于前面的 a 和 b 的总大小为9，不能被 4 整除，需要填充为 12 个字节，故 c的起始地址相对于结构体的起始地址偏移为 12</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHAR_NUMBERS    8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">memory_align_t</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> b[CHAR_NUMBERS];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  c;</span><br><span class="line">&#125;<span class="keyword">memory_align_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">memory_align_t</span> memory_align_test;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;structure memory size test!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    memory_align_test.a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; CHAR_NUMBERS; i++)&#123;</span><br><span class="line">        memory_align_test.b[i] = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    memory_align_test.c = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size of structure memory_align_t is %d\r\n&quot;</span>, <span class="keyword">sizeof</span>(memory_align_test));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a&#x27;s address of memory_align_test is %p\r\n&quot;</span>, &amp;memory_align_test.a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b&#x27;s address of memory_align_test is %p\r\n&quot;</span>, &amp;memory_align_test.b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c&#x27;s address of memory_align_test is %p\r\n&quot;</span>, &amp;memory_align_test.c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220321152829111.png"alt="image-20220321152829111" /></p><h2 id="代码测试-2">3. 代码测试 2</h2><blockquote><ol type="1"><li>首先 unsigned char a 被放入内存中，占用一个字节</li><li>其次由于 b 占用 4 个字节，故 b的起始地址相对于结构体的起始地址要能被 4 整除，故偏移为 4</li><li>成员 c 放在 b 的后面，由于 c 自身大小为4，故其相对于起始地址的偏移为 4 的整数，前面 a + b 占用了 8个字节，故结构体共占用 12 个字节</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHAR_NUMBERS    8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">memory_align_t</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> b;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  c;</span><br><span class="line">&#125;<span class="keyword">memory_align_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">memory_align_t</span> memory_align_test;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;structure memory size test!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    memory_align_test.a = <span class="number">10</span>;</span><br><span class="line">    memory_align_test.b = <span class="number">2</span>;</span><br><span class="line">    memory_align_test.c = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size of structure memory_align_t is %d\r\n&quot;</span>, <span class="keyword">sizeof</span>(memory_align_test));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a&#x27;s address of memory_align_test is %p\r\n&quot;</span>, &amp;memory_align_test.a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b&#x27;s address of memory_align_test is %p\r\n&quot;</span>, &amp;memory_align_test.b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c&#x27;s address of memory_align_test is %p\r\n&quot;</span>, &amp;memory_align_test.c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220321161005323.png" /></p><h2 id="结构体内存按字节对齐">4. 结构体内存按字节对齐</h2><blockquote><ol type="1"><li><p>使用代码对来让结构体按照字节对齐</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(n)<span class="comment">/* n字节对齐 */</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">xxxx</span>&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">xxx_t</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()</span></span><br></pre></td></tr></table></figure></li><li><p>重新测试上面的两份代码</p><ul><li><strong>测试代码 1 的结构体占用字节数由之前的 16 变成了13</strong></li><li><strong>测试代码 2 的结构体占用字节数由之前的 12 变成了9</strong></li></ul></li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHAR_NUMBERS    8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(1)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">memory_align_t</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> b[CHAR_NUMBERS];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  c;</span><br><span class="line">&#125;<span class="keyword">memory_align_t</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">memory_align_t</span> memory_align_test;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;structure memory size test!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    memory_align_test.a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; CHAR_NUMBERS; i++)&#123;</span><br><span class="line">        memory_align_test.b[i] = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    memory_align_test.c = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size of structure memory_align_t is %d\r\n&quot;</span>, <span class="keyword">sizeof</span>(memory_align_test));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a&#x27;s address of memory_align_test is %p\r\n&quot;</span>, &amp;memory_align_test.a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b&#x27;s address of memory_align_test is %p\r\n&quot;</span>, &amp;memory_align_test.b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c&#x27;s address of memory_align_test is %p\r\n&quot;</span>, &amp;memory_align_test.c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220321201337288.png"alt="image-20220321201337288" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHAR_NUMBERS    8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(1)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">memory_align_t</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> b;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  c;</span><br><span class="line">&#125;<span class="keyword">memory_align_t</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">memory_align_t</span> memory_align_test;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;structure memory size test!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    memory_align_test.a = <span class="number">10</span>;</span><br><span class="line">    memory_align_test.b = <span class="number">2</span>;</span><br><span class="line">    memory_align_test.c = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size of structure memory_align_t is %d\r\n&quot;</span>, <span class="keyword">sizeof</span>(memory_align_test));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a&#x27;s address of memory_align_test is %p\r\n&quot;</span>, &amp;memory_align_test.a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b&#x27;s address of memory_align_test is %p\r\n&quot;</span>, &amp;memory_align_test.b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c&#x27;s address of memory_align_test is %p\r\n&quot;</span>, &amp;memory_align_test.c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220321201628184.png"alt="image-20220321201628184" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;c结构体内存对齐&quot;&gt;[C]结构体内存对齐&lt;/h1&gt;
&lt;p&gt;&lt;img
src=&quot;https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220321201812346.png&quot;</summary>
      
    
    
    
    <category term="Programming Language" scheme="https://tresordie.github.io/categories/Programming-Language/"/>
    
    
    <category term="C" scheme="https://tresordie.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>BLDC串级PID(位置式PID)控制</title>
    <link href="https://tresordie.github.io/2022/03/20/BLDC%E4%B8%B2%E7%BA%A7PID(%E4%BD%8D%E7%BD%AE%E5%BC%8FPID)%E6%8E%A7%E5%88%B6/"/>
    <id>https://tresordie.github.io/2022/03/20/BLDC%E4%B8%B2%E7%BA%A7PID(%E4%BD%8D%E7%BD%AE%E5%BC%8FPID)%E6%8E%A7%E5%88%B6/</id>
    <published>2022-03-20T07:00:00.000Z</published>
    <updated>2023-01-08T03:02:57.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pidbldc-串级-pid位置式-pid控制">[PID]BLDC 串级 PID(位置式PID)控制</h1><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220320135949113.png"alt="image-20220320135949113" /></p><h2 id="串级-pid-整定">1. 串级 PID 整定</h2><h3 id="串级-pid-整定方法">1.1 串级 PID 整定方法</h3><blockquote><ol type="1"><li>以上图中的内速度环+外位置环为例，先整定内环，再整定外环</li><li>整定内环时，将外环设定的目标固定，即设定一个固定的目标速度来对内环的速度环进行整定</li><li>内环整定可使用一般调节法或者临界比例法，内环的参数确定后，在对外环进行整定</li><li>外环整定完成后，再可以对参数进行微调</li></ol></blockquote><h3 id="串级-pid-整定过程">1.2 串级 PID 整定过程</h3><h4id="a-将目标速度确定在-2000对内环的速度环进行整定pid-周期为-20ms当设置-kp0.25-时不振荡此时设定速度环的-kp0.250.70.175">(a)将目标速度确定在 2000，对内环的速度环进行整定(pid 周期为 20ms)，当设置Kp=0.25 时，不振荡，此时设定速度环的 Kp=0.25*0.7=0.175</h4><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220320223112351.png"alt="image-20220320223112351" /></p><h4id="b内环速度环-ki0.1-时系统不振荡设定速度环的-ki0.10.670.067不对-kd-进行调节">(b)内环速度环Ki=0.1 时系统不振荡，设定速度环的 Ki=0.1*0.67=0.067，不对 Kd进行调节</h4><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220320225026993.png"alt="image-20220320225026993" /></p><h4id="c-对外环位置环进行调节设定-p-参数当设定-kp10-时存在过冲到-2750目标-2400增加-kp-到-35-后基本可以实现无振荡">(c)对外环位置环进行调节，设定 P 参数，当设定 Kp=10 时，存在过冲到 2750(目标2400)，增加 Kp 到 35 后，基本可以实现无振荡</h4><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220320220947314.png"alt="image-20220320220947314" /></p><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220321005207981.png"alt="image-20220321005207981" /></p><h3 id="串级位置式-pid-实现位置环及速度环">2.1 串级位置式 PID实现位置环及速度环</h3><h4 id="a.-串级-pid-的工作原理">a. 串级 PID 的工作原理</h4><blockquote><ol type="1"><li>串级 PID的最外环控制是基于系统级要求来确定，例如：系统需要实现的是位置控制，那么串级PID 的最外围是基于位置环，内部基于速度环</li><li>PID 调节时，首先是通过位置 PID的计算，输出的操作值作为速度环的目标值，其次通过 PID速度环实现电机的电压的控制</li></ol></blockquote><h4 id="b.-串级-pid-的工作过程">b. 串级 PID 的工作过程</h4><blockquote><ol type="1"><li>开始时电机静止，系统的位置及速度都为 0</li><li>在 PID 的调节周期到达时，进行 PID调节且此时的位置误差最大，计算出来的速度目标值也为最大，PWM占空比调节到最大，电机全速转动</li><li>有感电机的霍尔传感器在检测到电机转速及方向后实时更新位置值及速度值作为系统的反馈输入到串级PID</li><li>电机转动后实时位置值在增加，相对于目标位置误差在逐渐减小，下一级的速度目标值也会减小，PWM调节后，速度也会逐渐降低</li><li>当 PID 的位置环输出为 0 且做为下级速度环 PID的目标值时，速度环控制的速度已经变得非常低速了</li><li>最终当 PID 位置环输出某一操作值，输出到下一级速度环做为速度环 PID的目标值时，速度环 PID 输出的操作值为 0，此时 PWM 占空比为0，电机停转</li></ol></blockquote><h3 id="串级位置式-pid-在第一次调好位置后再次实行调节">2.2 串级位置式PID 在第一次调好位置后再次实行调节</h3><blockquote><ol type="1"><li>在第一次串级 PID 调节完成后，在此基础上再次执行串级 PID 调节</li><li>前一次串级 PID调节后，位置目标值和实际值之间还会存在很小的差值，此时位置环 PID输出的操作值会使速度环 PID 调节电机转动方向及目标速度值. 例如：上次串级PID 调节完成后的位置实际值为 2480，目标值为 2400; 再次进行串级 PID调节时，电机会以反向速度旋转</li><li>由于速度值实际值没有在短时间内降低，所以反方向转动时，逐渐离目标位置越来越远，及实际位置与目标位置的差值越来越大，导致速度也越来越大</li><li>最终当串级 PID 控制的速度 PID 输出操作值为 0 时，电机停止(此时串级PID 调节是否达到目标不可知)</li></ol></blockquote><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220317134203352.png"alt="image-20220317134203352" /></p><h3id="为什么串级-pid-在一次可以很好的调节实现目标但在此基础上进行第二次串级调节就不行">2.3为什么串级 PID在一次可以很好的调节实现目标，但在此基础上进行第二次串级调节就不行</h3><blockquote><ol type="1"><li>第一次串级 PID 调节<ul><li>初始位置为 0，在位置环 PID 调节过程中，位置环 PID的输出操作值作为速度环 PID 的速度目标值</li><li>随着电机的转动，位置差值减小，速度值也会相应由大变小，最终在位置环输出操作值给速度环作为速度目标，如果在速度环计算出当前的输出操作值为0 时，电机停止</li><li>这个过程有一个缓冲时间的(即调节过程)，最终达到平衡而实际值接近目标值</li></ul></li><li>第一次串级 PID 调节基础上进行第二次串级调节<ul><li>经历第一次串级 PID 调节后，实际位置值与目标值接近，差值很小</li><li>如果位置环 PID 的 PID参数较大时，无论电机旋转方向如何，其起始的速度环目标值会很大</li><li>电机在这个旋转过程中，会离目标位置值越来越远，即差值越来越大，如果在某个时间点速度环PID 输出的操作量到了 0，则出现电机停止，此时有可能没有达到目标值</li></ul></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pidbldc-串级-pid位置式-pid控制&quot;&gt;[PID]BLDC 串级 PID(位置式
PID)控制&lt;/h1&gt;
&lt;p&gt;&lt;img
src=&quot;https://raw.githubusercontent.com/Tresordie/PicBed/master/</summary>
      
    
    
    
    <category term="BLDC" scheme="https://tresordie.github.io/categories/BLDC/"/>
    
    
    <category term="PID" scheme="https://tresordie.github.io/tags/PID/"/>
    
  </entry>
  
  <entry>
    <title>BLDC位置环(增量式)PID控制</title>
    <link href="https://tresordie.github.io/2022/03/20/[PID]BLDC%E4%BD%8D%E7%BD%AE%E7%8E%AFPID(%E5%A2%9E%E9%87%8F%E5%BC%8F)%E6%8E%A7%E5%88%B6/"/>
    <id>https://tresordie.github.io/2022/03/20/[PID]BLDC%E4%BD%8D%E7%BD%AE%E7%8E%AFPID(%E5%A2%9E%E9%87%8F%E5%BC%8F)%E6%8E%A7%E5%88%B6/</id>
    <published>2022-03-20T04:00:00.000Z</published>
    <updated>2023-01-08T02:59:14.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pidbldc-位置环增量式pid-控制">[PID]BLDC 位置环(增量式)PID控制</h1><h2 id="连续控制的-pid-公式">1. 连续控制的 PID 公式</h2><p><span class="math display">\[\begin{align}&amp; u(t) = K_p[err(t) + \frac1 T_t \int_{0}^{t} err(t)dt + T_d\frac{derr(t)}{dt}] \\&amp; K_p ： 比例增益，与比例度为倒数关系 \\&amp; T_t ： 积分时间常数 \\&amp; u(t)： PID控制器的输出信号，为PID控制的操作量 \\&amp; err(t)： 目标值target与测量值之间的差值\end{align}\]</span></p><h2 id="离散增量式-pid-公式">2. 离散增量式 PID 公式</h2><p><span class="math display">\[\begin{align}\Delta u(k) = K_p(err(k) - err(k-1)) + K_ierr(k) + K_d(err(k) -2err(k-1) + err(k-2))\end{align}\]</span></p><h2 id="增量式-pid-实现速度环">3. 增量式 PID 实现速度环</h2><h3 id="实现过程">3.1 实现过程</h3><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/1211.png"alt="1211" /></p><blockquote><ol type="1"><li>位置式 PID 的目标值为需要设定的速度</li><li>测量值由霍尔传感器来测实时速度进行反馈</li><li>PID 计算输出为系统操作量(即控制电机的 PWM)</li></ol></blockquote><h3 id="代码实现">3.2 代码实现</h3><h4 id="a-电机相应的数据结构">(a) 电机相应的数据结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int32_t</span> timeout;                  <span class="comment">// 定时器更新计数</span></span><br><span class="line">    <span class="keyword">float</span>   speed;                    <span class="comment">// 电机速度 rps（转/分钟）</span></span><br><span class="line">    <span class="keyword">int32_t</span> enable_flag;              <span class="comment">// 电机使能标志</span></span><br><span class="line">    <span class="keyword">int32_t</span> speed_group[SPEED_FILTER_NUM];</span><br><span class="line">    <span class="keyword">int32_t</span> location;</span><br><span class="line">&#125; <span class="keyword">motor_rotate_t</span>;</span><br></pre></td></tr></table></figure><h4 id="b-电机旋转方向的判断">(b) 电机旋转方向的判断</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  更新电机实际速度方向</span></span><br><span class="line"><span class="comment">  * @param  dir_in：霍尔值</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update_speed_dir</span><span class="params">(<span class="keyword">uint8_t</span> dir_in)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> step[<span class="number">6</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">// Couter Clock Wise(CCW)逆时针方向旋转时，三相加电步骤</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">uint8_t</span> num_old = <span class="number">0</span>;          <span class="comment">// hall sensor state location of last time</span></span><br><span class="line">    <span class="keyword">uint8_t</span> step_loc = <span class="number">0</span>;                <span class="comment">// 记录当前霍尔位置</span></span><br><span class="line">    <span class="keyword">int8_t</span> dir = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (step_loc = <span class="number">0</span>; step_loc &lt; <span class="number">6</span>; step_loc++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (step[step_loc] == dir_in) &#123;  <span class="comment">// 找到当前霍尔的位置</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 端点处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (step_loc == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num_old == <span class="number">1</span>) &#123;</span><br><span class="line">            dir = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num_old == <span class="number">5</span>) &#123;</span><br><span class="line">            dir = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 端点处理 */</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (step_loc == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num_old == <span class="number">0</span>) &#123;</span><br><span class="line">            dir = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num_old == <span class="number">4</span>) &#123;</span><br><span class="line">            dir = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (step_loc &gt; num_old) &#123;</span><br><span class="line">        dir = <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (step_loc &lt; num_old) &#123;</span><br><span class="line">        dir = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    num_old = step_loc;</span><br><span class="line">    motor_drive.speed_group[count - <span class="number">1</span>] *= dir;</span><br><span class="line">    motor_drive.location += dir;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="c-电机速度检测">(c) 电机速度检测</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update_motor_speed</span><span class="params">(<span class="keyword">uint8_t</span> dir_in, <span class="keyword">uint32_t</span> time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> speed_temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算速度：</span></span><br><span class="line"><span class="comment">       电机每转一圈共用12个脉冲，(1.0/(72000000.0/128.0)为计数器的周期，(1.0/(72000000.0/128.0) * time)为时间长。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (time == <span class="number">0</span>)</span><br><span class="line">        motor_drive.speed_group[count++] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        f = (<span class="number">1.0f</span> / (<span class="number">72000000.0f</span> / HALL_PRESCALER_COUNT) * time);</span><br><span class="line">        f = (<span class="number">1.0f</span> / <span class="number">12.0f</span>) / (f  / <span class="number">60.0f</span>);</span><br><span class="line">        motor_drive.speed_group[count++] = f;</span><br><span class="line">    &#125;</span><br><span class="line">    update_speed_dir(dir_in);</span><br><span class="line">    <span class="comment">//  motor_drive.speed = motor_drive.speed_group[count-1];</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= SPEED_FILTER_NUM) &#123;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  return ;</span></span><br><span class="line">    speed_temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算近 SPEED_FILTER_NUM 次的速度平均值（滤波） */</span></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">uint8_t</span> c = <span class="number">0</span>; c &lt; SPEED_FILTER_NUM; c++) &#123;</span><br><span class="line">            speed_temp += motor_drive.speed_group[c];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        motor_drive.speed = speed_temp / SPEED_FILTER_NUM;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">uint8_t</span> c = <span class="number">0</span>; c &lt; count; c++) &#123;</span><br><span class="line">            speed_temp += motor_drive.speed_group[c];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        motor_drive.speed = speed_temp / count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="d-pid-的调节周期实现">(d) PID 的调节周期实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BasicTIM_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* preep priority and sub-priority configuration */</span></span><br><span class="line">    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* enbale nvic interrupt */</span></span><br><span class="line">    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);</span><br><span class="line">    <span class="comment">// 开启TIMx_CLK,x[6,7]</span></span><br><span class="line">    __HAL_RCC_TIM6_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">    TIM_TimeBaseStructure.Instance    = TIM6;</span><br><span class="line">    TIM_TimeBaseStructure.Init.Period = BASIC_PERIOD_COUNT - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TIM clock source:     TIMxCLK = 2 * PCLK1</span></span><br><span class="line">    <span class="comment">//                      PCLK1 = HCLK / 2</span></span><br><span class="line">    <span class="comment">//                      =&gt; TIMxCLK=HCLK/2=SystemCoreClock/2=72MHz</span></span><br><span class="line">    <span class="comment">// TIM&#x27;s frequency      =&gt; TIMxCLK/BASIC_PRESCALER_COUNT</span></span><br><span class="line">    TIM_TimeBaseStructure.Init.Prescaler     = BASIC_PRESCALER_COUNT - <span class="number">1</span>;       <span class="comment">// 100kHz</span></span><br><span class="line">    TIM_TimeBaseStructure.Init.CounterMode   = TIM_COUNTERMODE_UP;              <span class="comment">// 向上计数</span></span><br><span class="line">    TIM_TimeBaseStructure.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;          <span class="comment">// 时钟分频</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TIMx, x[2,3,4,5] time base initialize</span></span><br><span class="line">    HAL_TIM_Base_Init(&amp;TIM_TimeBaseStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// enable TIM&#x27;s update interrupt</span></span><br><span class="line">    HAL_TIM_Base_Start_IT(&amp;TIM_TimeBaseStructure);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="e-pid-周期性调节实现速度环">(e) PID 周期性调节实现速度环</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief  pid control motor speed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bldcm_pid_control</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int32_t</span> speed_actual = get_motor_speed();                          <span class="comment">// 电机旋转的当前速度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bldcm_data.is_enable) &#123;</span><br><span class="line">        <span class="keyword">float</span> cont_val = <span class="number">0</span>;                                            <span class="comment">// 当前控制值</span></span><br><span class="line">        cont_val = PID_realize(speed_actual);</span><br><span class="line">        <span class="keyword">if</span> (cont_val &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            cont_val = -cont_val;</span><br><span class="line">            bldcm_data.direction = MOTOR_REV;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bldcm_data.direction = MOTOR_FWD;</span><br><span class="line">        &#125;</span><br><span class="line">        cont_val = (cont_val &gt; PWM_PERIOD_COUNT) ? PWM_PERIOD_COUNT : cont_val;  <span class="comment">// 上限处理</span></span><br><span class="line">        set_bldcm_speed(cont_val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="f增量式-pid-实现">(f)增量式 PID 实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">float</span> target_val;               <span class="comment">// 目标值</span></span><br><span class="line">    <span class="keyword">float</span> actual_val;               <span class="comment">// 实际值</span></span><br><span class="line">    <span class="keyword">float</span> err;                      <span class="comment">// 定义偏差值</span></span><br><span class="line">    <span class="keyword">float</span> err_prev;                 <span class="comment">// 定义上一个偏差值</span></span><br><span class="line">    <span class="keyword">float</span> err_preprev;              <span class="comment">// 定义上上一个偏差值</span></span><br><span class="line">    <span class="keyword">float</span> Kp, Ki, Kd;               <span class="comment">// 定义比例、积分、微分系数</span></span><br><span class="line">&#125; _pid;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PID_param_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 初始化参数 */</span></span><br><span class="line">    pid.target_val  = <span class="number">0.0</span>;</span><br><span class="line">    pid.actual_val  = <span class="number">0.0</span>;</span><br><span class="line">    pid.err         = <span class="number">0.0</span>;</span><br><span class="line">    pid.err_prev    = <span class="number">0.0</span>;</span><br><span class="line">    pid.err_preprev = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 速度环，增量式pid demo参数</span></span><br><span class="line">    pid.Kp = <span class="number">0.1</span>;</span><br><span class="line">    pid.Ki = <span class="number">0.035</span>;</span><br><span class="line">    pid.Kd = <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  PID算法实现</span></span><br><span class="line"><span class="comment">  * @param  actual_val:实际值</span></span><br><span class="line"><span class="comment">    *   @note   无</span></span><br><span class="line"><span class="comment">  * @retval 通过PID计算后的输出</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">PID_realize</span><span class="params">(<span class="keyword">float</span> actual_val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*计算目标值与实际值的误差*/</span></span><br><span class="line">    pid.err        = pid.target_val - actual_val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 增量PID算法实现 */</span></span><br><span class="line">    pid.actual_val += pid.Kp * (pid.err - pid.err_prev)</span><br><span class="line">                      +  pid.Ki *  pid.err</span><br><span class="line">                      +  pid.Kd * (pid.err - <span class="number">2</span> * pid.err_prev + pid.err_preprev);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*误差传递*/</span></span><br><span class="line">    pid.err_preprev = pid.err_prev;</span><br><span class="line">    pid.err_prev = pid.err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*返回当前实际值*/</span></span><br><span class="line">    <span class="keyword">return</span> pid.actual_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pid-整定方法">4. PID 整定方法</h2><h3 id="一般调节法">4.1 一般调节法</h3><h4 id="调节步骤">4.1.1 调节步骤</h4><blockquote><ol type="1"><li>首先只调节 Kp, 将 Ki, Kd 置 0</li><li>从小到大增加 Kp，直到系统出现振荡，再反过来，逐渐将 Kp减小，直至系统振荡小时，此时的比例增益的 60%-70%设置为比例增益 P参数，此时 P 参数调试完成</li><li>从大到小调节积分时间常数 Ti 直至系统出现振荡，再反过来，逐渐增加 Ti直至系统振荡消失，设定 PID 系统的积分时间常数 Ti 为当前值的 1.5~1.8倍</li><li>确定积分时间常数 Ti 后，Td 一般不用设定，可以为0；也可以设定，可以从小到大增加 Td 直至系统出现振荡，再反过来逐渐减小Td，直到系统振荡消失，取此时不震荡的 30%作为 PID 系统的微分时间常数</li><li><font color = 'red'>系统空载，带载联调，再对 PID参数进行微调</font></li></ol></blockquote><h3 id="临界比例法ziegler-nichols-工程整定法">4.2临界比例法(Ziegler-Nichols 工程整定法)</h3><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220320103729875.png"alt="image-20220320103729875" /></p><h4 id="调节步骤-1">4.2.1 调节步骤</h4><blockquote><ol type="1"><li>切除 PID 控制器中的积分与微分作用，取较小的比例增益 Kp值，并投入闭环运行</li><li>将 Kp 由小变大，直至阶跃响应产生等幅振荡</li><li>记录下等幅时的临界比例系数和两个波峰的时间间隔</li><li>采用经验公式，计算调节器的参数</li></ol></blockquote><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220320103902484.png"alt="image-20220320103902484" /></p><p><span class="math display">\[\begin{align}&amp; \delta K：产生等幅振荡时的Kp值 \\&amp; TK：等幅振荡时，两个波峰之间的时间间隔\end{align}\]</span></p><h4 id="调节过程">4.2.2 调节过程</h4><blockquote><ol type="1"><li>由于调节过程没有上位机软件工具可以测量等幅振荡时，相邻波峰之间的时间间隔，暂时无法使用此法调节</li></ol></blockquote><h2 id="pid-整定质量">5. PID 整定质量</h2><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/29879819_2.jpg" /></p><blockquote><ol type="1"><li><font color = 'red'><strong>PID参数整定的好不好，有一个简单的量化标准：理想曲线两个波，前高后低4:1，其反应的是当外部环境发生变化或者干扰因素存在打破之前的平衡后，系统自动调整达到新平衡的一个动态过程的速度快慢</strong></font></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pidbldc-位置环增量式pid-控制&quot;&gt;[PID]BLDC 位置环(增量式)PID
控制&lt;/h1&gt;
&lt;h2 id=&quot;连续控制的-pid-公式&quot;&gt;1. 连续控制的 PID 公式&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
</summary>
      
    
    
    
    <category term="BLDC" scheme="https://tresordie.github.io/categories/BLDC/"/>
    
    
    <category term="PID" scheme="https://tresordie.github.io/tags/PID/"/>
    
  </entry>
  
  <entry>
    <title>BLDC位置环PID(位置式)控制</title>
    <link href="https://tresordie.github.io/2022/03/20/[PID]BLDC%E4%BD%8D%E7%BD%AE%E7%8E%AFPID(%E4%BD%8D%E7%BD%AE%E5%BC%8F)%E6%8E%A7%E5%88%B6/"/>
    <id>https://tresordie.github.io/2022/03/20/[PID]BLDC%E4%BD%8D%E7%BD%AE%E7%8E%AFPID(%E4%BD%8D%E7%BD%AE%E5%BC%8F)%E6%8E%A7%E5%88%B6/</id>
    <published>2022-03-20T03:00:00.000Z</published>
    <updated>2023-01-08T02:58:52.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pidbldc-位置环-pid位置式控制">[PID]BLDC 位置环PID(位置式)控制</h1><h2 id="连续控制的-pid-公式">1. 连续控制的 PID 公式</h2><p><span class="math display">\[\begin{align}&amp; u(t) = K_p[err(t) + \frac1 T_t \int_{0}^{t} err(t)dt + T_d\frac{derr(t)}{dt}] \\&amp; K_p ： 比例增益，与比例度为倒数关系 \\&amp; T_t ： 积分时间常数 \\&amp; u(t)： PID控制器的输出信号，为PID控制的操作量 \\&amp; err(t)： 目标值target与测量值之间的差值\end{align}\]</span></p><h2 id="离散位置式-pid-公式">2. 离散位置式 PID 公式</h2><p><span class="math display">\[\begin{align}&amp; u(k) = K_p[err(k) + K_i\sum_{j=0}^{k}err(j) + K_d(err(k) -err(k-1))] \\&amp; k：采样的序号 \\&amp; err(k)：第k次的误差 \\&amp; u(k)：PID的输出操作量 \\&amp; K_p：比例增益 \\&amp; K_i = K_p * \frac {T}{T_i} \\&amp; K_d = K_p * \frac {T_d}{T}\end{align}\]</span></p><h2 id="位置式-pid-实现速度环">3. 位置式 PID 实现速度环</h2><h3 id="实现过程">3.1 实现过程</h3><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/1211.png"alt="1211" /></p><blockquote><ol type="1"><li>位置式 PID 的目标值为需要设定的速度</li><li>测量值由霍尔传感器来测实时速度进行反馈</li><li>PID 计算输出为系统操作量(即控制电机的 PWM)</li></ol></blockquote><h3 id="代码实现">3.2 代码实现</h3><h4 id="a-电机相应的数据结构">(a) 电机相应的数据结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int32_t</span> timeout;                  <span class="comment">// 定时器更新计数</span></span><br><span class="line">    <span class="keyword">float</span>   speed;                    <span class="comment">// 电机速度 rps（转/分钟）</span></span><br><span class="line">    <span class="keyword">int32_t</span> enable_flag;              <span class="comment">// 电机使能标志</span></span><br><span class="line">    <span class="keyword">int32_t</span> speed_group[SPEED_FILTER_NUM];</span><br><span class="line">    <span class="keyword">int32_t</span> location;</span><br><span class="line">&#125; <span class="keyword">motor_rotate_t</span>;</span><br></pre></td></tr></table></figure><h4 id="b-电机旋转方向的判断">(b) 电机旋转方向的判断</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  更新电机实际速度方向</span></span><br><span class="line"><span class="comment">  * @param  dir_in：霍尔值</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update_speed_dir</span><span class="params">(<span class="keyword">uint8_t</span> dir_in)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> step[<span class="number">6</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">// Couter Clock Wise(CCW)逆时针方向旋转时，三相加电步骤</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">uint8_t</span> num_old = <span class="number">0</span>;          <span class="comment">// hall sensor state location of last time</span></span><br><span class="line">    <span class="keyword">uint8_t</span> step_loc = <span class="number">0</span>;                <span class="comment">// 记录当前霍尔位置</span></span><br><span class="line">    <span class="keyword">int8_t</span> dir = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (step_loc = <span class="number">0</span>; step_loc &lt; <span class="number">6</span>; step_loc++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (step[step_loc] == dir_in) &#123;  <span class="comment">// 找到当前霍尔的位置</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 端点处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (step_loc == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num_old == <span class="number">1</span>) &#123;</span><br><span class="line">            dir = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num_old == <span class="number">5</span>) &#123;</span><br><span class="line">            dir = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 端点处理 */</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (step_loc == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num_old == <span class="number">0</span>) &#123;</span><br><span class="line">            dir = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num_old == <span class="number">4</span>) &#123;</span><br><span class="line">            dir = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (step_loc &gt; num_old) &#123;</span><br><span class="line">        dir = <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (step_loc &lt; num_old) &#123;</span><br><span class="line">        dir = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    num_old = step_loc;</span><br><span class="line">    motor_drive.speed_group[count - <span class="number">1</span>] *= dir;</span><br><span class="line">    motor_drive.location += dir;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="c-电机速度检测">(c) 电机速度检测</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update_motor_speed</span><span class="params">(<span class="keyword">uint8_t</span> dir_in, <span class="keyword">uint32_t</span> time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> speed_temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算速度：</span></span><br><span class="line"><span class="comment">       电机每转一圈共用12个脉冲，(1.0/(72000000.0/128.0)为计数器的周期，(1.0/(72000000.0/128.0) * time)为时间长。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (time == <span class="number">0</span>)</span><br><span class="line">        motor_drive.speed_group[count++] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        f = (<span class="number">1.0f</span> / (<span class="number">72000000.0f</span> / HALL_PRESCALER_COUNT) * time);</span><br><span class="line">        f = (<span class="number">1.0f</span> / <span class="number">12.0f</span>) / (f  / <span class="number">60.0f</span>);</span><br><span class="line">        motor_drive.speed_group[count++] = f;</span><br><span class="line">    &#125;</span><br><span class="line">    update_speed_dir(dir_in);</span><br><span class="line">    <span class="comment">//  motor_drive.speed = motor_drive.speed_group[count-1];</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= SPEED_FILTER_NUM) &#123;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  return ;</span></span><br><span class="line">    speed_temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算近 SPEED_FILTER_NUM 次的速度平均值（滤波） */</span></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">uint8_t</span> c = <span class="number">0</span>; c &lt; SPEED_FILTER_NUM; c++) &#123;</span><br><span class="line">            speed_temp += motor_drive.speed_group[c];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        motor_drive.speed = speed_temp / SPEED_FILTER_NUM;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">uint8_t</span> c = <span class="number">0</span>; c &lt; count; c++) &#123;</span><br><span class="line">            speed_temp += motor_drive.speed_group[c];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        motor_drive.speed = speed_temp / count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="d-pid-的调节周期实现">(d) PID 的调节周期实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BasicTIM_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* preep priority and sub-priority configuration */</span></span><br><span class="line">    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* enbale nvic interrupt */</span></span><br><span class="line">    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);</span><br><span class="line">    <span class="comment">// 开启TIMx_CLK,x[6,7]</span></span><br><span class="line">    __HAL_RCC_TIM6_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">    TIM_TimeBaseStructure.Instance    = TIM6;</span><br><span class="line">    TIM_TimeBaseStructure.Init.Period = BASIC_PERIOD_COUNT - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TIM clock source:     TIMxCLK = 2 * PCLK1</span></span><br><span class="line">    <span class="comment">//                      PCLK1 = HCLK / 2</span></span><br><span class="line">    <span class="comment">//                      =&gt; TIMxCLK=HCLK/2=SystemCoreClock/2=72MHz</span></span><br><span class="line">    <span class="comment">// TIM&#x27;s frequency      =&gt; TIMxCLK/BASIC_PRESCALER_COUNT</span></span><br><span class="line">    TIM_TimeBaseStructure.Init.Prescaler     = BASIC_PRESCALER_COUNT - <span class="number">1</span>;       <span class="comment">// 100kHz</span></span><br><span class="line">    TIM_TimeBaseStructure.Init.CounterMode   = TIM_COUNTERMODE_UP;              <span class="comment">// 向上计数</span></span><br><span class="line">    TIM_TimeBaseStructure.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;          <span class="comment">// 时钟分频</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TIMx, x[2,3,4,5] time base initialize</span></span><br><span class="line">    HAL_TIM_Base_Init(&amp;TIM_TimeBaseStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// enable TIM&#x27;s update interrupt</span></span><br><span class="line">    HAL_TIM_Base_Start_IT(&amp;TIM_TimeBaseStructure);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="e-pid-周期性调节实现速度环">(e) PID 周期性调节实现速度环</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief  pid control motor speed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bldcm_pid_control</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int32_t</span> speed_actual = get_motor_speed();                          <span class="comment">// 电机旋转的当前速度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bldcm_data.is_enable) &#123;</span><br><span class="line">        <span class="keyword">float</span> cont_val = <span class="number">0</span>;                                            <span class="comment">// 当前控制值</span></span><br><span class="line">        cont_val = PID_realize(speed_actual);</span><br><span class="line">        <span class="keyword">if</span> (cont_val &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            cont_val = -cont_val;</span><br><span class="line">            bldcm_data.direction = MOTOR_REV;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bldcm_data.direction = MOTOR_FWD;</span><br><span class="line">        &#125;</span><br><span class="line">        cont_val = (cont_val &gt; PWM_PERIOD_COUNT) ? PWM_PERIOD_COUNT : cont_val;  <span class="comment">// 上限处理</span></span><br><span class="line">        set_bldcm_speed(cont_val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="f-位置式-pid-实现">(f) 位置式 PID 实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">float</span> target_val;               <span class="comment">// 目标值</span></span><br><span class="line">    <span class="keyword">float</span> actual_val;               <span class="comment">// 实际值</span></span><br><span class="line">    <span class="keyword">float</span> err;                      <span class="comment">// 定义偏差值</span></span><br><span class="line">    <span class="keyword">float</span> err_last;                 <span class="comment">// 定义上一个偏差值</span></span><br><span class="line">    <span class="keyword">float</span> Kp, Ki, Kd;               <span class="comment">// 定义比例、积分、微分系数</span></span><br><span class="line">    <span class="keyword">float</span> integral;                 <span class="comment">// 定义积分值</span></span><br><span class="line">&#125; _pid;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PID_param_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 初始化参数 */</span></span><br><span class="line">    pid.target_val = <span class="number">0.0</span>;</span><br><span class="line">    pid.actual_val = <span class="number">0.0</span>;</span><br><span class="line">    pid.err        = <span class="number">0.0</span>;</span><br><span class="line">    pid.err_last   = <span class="number">0.0</span>;</span><br><span class="line">    pid.integral   = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    pid.Kp         = <span class="number">0.12</span>;      <span class="comment">// 一般调节法，单纯Kp = 0.2时，此时不振荡</span></span><br><span class="line">    pid.Ki         = <span class="number">0.07</span>;      <span class="comment">// 一般调节法，单纯Ki = 0.05时，此时不振荡</span></span><br><span class="line">    pid.Kd         = <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  PID算法实现</span></span><br><span class="line"><span class="comment">  * @param  actual_val:实际值</span></span><br><span class="line"><span class="comment">  * @note   无</span></span><br><span class="line"><span class="comment">  * @retval 通过PID计算后的输出</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">PID_realize</span><span class="params">(<span class="keyword">float</span> actual_val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*计算目标值与实际值的误差*/</span></span><br><span class="line">    pid.err        = pid.target_val - actual_val;</span><br><span class="line">    pid.integral   += pid.err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*PID算法实现*/</span></span><br><span class="line">    pid.actual_val = pid.Kp * pid.err +</span><br><span class="line">                     pid.Ki * pid.integral +</span><br><span class="line">                     pid.Kd * (pid.err - pid.err_last);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*误差传递*/</span></span><br><span class="line">    pid.err_last   = pid.err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*返回当前实际值*/</span></span><br><span class="line">    <span class="keyword">return</span> pid.actual_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pid-整定方法">4. PID 整定方法</h2><h3 id="一般调节法">4.1 一般调节法</h3><h4 id="调节步骤">4.1.1 调节步骤</h4><blockquote><ol type="1"><li>首先只调节 Kp, 将 Ki, Kd 置 0</li><li>从小到大增加 Kp，直到系统出现振荡，再反过来，逐渐将 Kp减小，直至系统振荡小时，此时的比例增益的 60%-70%设置为比例增益 P参数，此时 P 参数调试完成</li><li>从大到小调节积分时间常数 Ti 直至系统出现振荡，再反过来，逐渐增加 Ti直至系统振荡消失，设定 PID 系统的积分时间常数 Ti 为当前值的 1.5~1.8倍</li><li>确定积分时间常数 Ti 后，Td 一般不用设定，可以为0；也可以设定，可以从小到大增加 Td 直至系统出现振荡，再反过来逐渐减小Td，直到系统振荡消失，取此时不震荡的 30%作为 PID 系统的微分时间常数</li><li><font color = 'red'>系统空载，带载联调，再对 PID参数进行微调</font></li></ol></blockquote><h3 id="临界比例法ziegler-nichols-工程整定法">4.2临界比例法(Ziegler-Nichols 工程整定法)</h3><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220320103729875.png"alt="image-20220320103729875" /></p><h4 id="调节步骤-1">4.2.1 调节步骤</h4><blockquote><ol type="1"><li>切除 PID 控制器中的积分与微分作用，取较小的比例增益 Kp值，并投入闭环运行</li><li>将 Kp 由小变大，直至阶跃响应产生等幅振荡</li><li>记录下等幅时的临界比例系数和两个波峰的时间间隔</li><li>采用经验公式，计算调节器的参数</li></ol></blockquote><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220320103902484.png"alt="image-20220320103902484" /></p><p><span class="math display">\[\begin{align}&amp; \delta K：产生等幅振荡时的Kp值 \\&amp; TK：等幅振荡时，两个波峰之间的时间间隔\end{align}\]</span></p><h4 id="调节过程">4.2.2 调节过程</h4><blockquote><ol type="1"><li>由于调节过程没有上位机软件工具可以测量等幅振荡时，相邻波峰之间的时间间隔，暂时无法使用此法调节</li></ol></blockquote><h2 id="pid-整定质量">5. PID 整定质量</h2><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/29879819_2.jpg" /></p><blockquote><ol type="1"><li><font color = 'red'><strong>PID参数整定的好不好，有一个简单的量化标准：理想曲线两个波，前高后低4:1，其反应的是当外部环境发生变化或者干扰因素存在打破之前的平衡后，系统自动调整达到新平衡的一个动态过程的速度快慢</strong></font></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pidbldc-位置环-pid位置式控制&quot;&gt;[PID]BLDC 位置环
PID(位置式)控制&lt;/h1&gt;
&lt;h2 id=&quot;连续控制的-pid-公式&quot;&gt;1. 连续控制的 PID 公式&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
</summary>
      
    
    
    
    <category term="BLDC" scheme="https://tresordie.github.io/categories/BLDC/"/>
    
    
    <category term="PID" scheme="https://tresordie.github.io/tags/PID/"/>
    
  </entry>
  
  <entry>
    <title>BLDC速度环PID(增量式)控制</title>
    <link href="https://tresordie.github.io/2022/03/20/[PID]BLDC%E9%80%9F%E5%BA%A6%E7%8E%AFPID(%E5%A2%9E%E9%87%8F%E5%BC%8F)%E6%8E%A7%E5%88%B6/"/>
    <id>https://tresordie.github.io/2022/03/20/[PID]BLDC%E9%80%9F%E5%BA%A6%E7%8E%AFPID(%E5%A2%9E%E9%87%8F%E5%BC%8F)%E6%8E%A7%E5%88%B6/</id>
    <published>2022-03-20T02:00:00.000Z</published>
    <updated>2023-01-08T02:58:48.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pidbldc-速度环-pid增量式控制">[PID]BLDC 速度环PID(增量式)控制</h1><h2 id="连续控制的-pid-公式">1. 连续控制的 PID 公式</h2><p><span class="math display">\[\begin{align}&amp; u(t) = K_p[err(t) + \frac1 T_t \int_{0}^{t} err(t)dt + T_d\frac{derr(t)}{dt}] \\&amp; K_p ： 比例增益，与比例度为倒数关系 \\&amp; T_t ： 积分时间常数 \\&amp; u(t)： PID控制器的输出信号，为PID控制的操作量 \\&amp; err(t)： 目标值target与测量值之间的差值\end{align}\]</span></p><h2 id="离散增量式-pid-公式">2. 离散增量式 PID 公式</h2><p><span class="math display">\[\begin{align}\Delta u(k) = K_p(err(k) - err(k-1)) + K_ierr(k) + K_d(err(k) -2err(k-1) + err(k-2))\end{align}\]</span></p><h2 id="增量式-pid-实现速度环">3. 增量式 PID 实现速度环</h2><h3 id="实现过程">3.1 实现过程</h3><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/1211.png"alt="1211" /></p><blockquote><ol type="1"><li>位置式 PID 的目标值为需要设定的速度</li><li>测量值由霍尔传感器来测实时速度进行反馈</li><li>PID 计算输出为系统操作量(即控制电机的 PWM)</li></ol></blockquote><h3 id="代码实现">3.2 代码实现</h3><h4 id="a-电机相应的数据结构">(a) 电机相应的数据结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int32_t</span> timeout;                  <span class="comment">// 定时器更新计数</span></span><br><span class="line">  <span class="keyword">float</span>   speed;                    <span class="comment">// 电机速度 rps（转/分钟）</span></span><br><span class="line">  <span class="keyword">int32_t</span> enable_flag;              <span class="comment">// 电机使能标志</span></span><br><span class="line">  <span class="keyword">int32_t</span> speed_group[SPEED_FILTER_NUM];</span><br><span class="line">&#125;<span class="keyword">motor_rotate_t</span>;</span><br></pre></td></tr></table></figure><h4 id="b-电机旋转方向的判断">(b) 电机旋转方向的判断</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  更新电机实际速度方向</span></span><br><span class="line"><span class="comment">  * @param  dir_in：霍尔值</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update_speed_dir</span><span class="params">(<span class="keyword">uint8_t</span> dir_in)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> step[<span class="number">6</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;        <span class="comment">// Couter Clock Wise(CCW)逆时针方向旋转时，三相加电步骤</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">uint8_t</span> num_old = <span class="number">0</span>;                 <span class="comment">// hall sensor state location of last time</span></span><br><span class="line">    <span class="keyword">uint8_t</span> step_loc = <span class="number">0</span>;                       <span class="comment">// 记录当前霍尔位置</span></span><br><span class="line">    <span class="keyword">int8_t</span> dir = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (step_loc = <span class="number">0</span>; step_loc &lt; <span class="number">6</span>; step_loc++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (step[step_loc] == dir_in) &#123;         <span class="comment">// 找到当前霍尔的位置</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 端点处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (step_loc == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num_old == <span class="number">1</span>) &#123;</span><br><span class="line">            dir = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num_old == <span class="number">5</span>) &#123;</span><br><span class="line">            dir = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 端点处理 */</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (step_loc == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num_old == <span class="number">0</span>) &#123;</span><br><span class="line">            dir = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num_old == <span class="number">4</span>) &#123;</span><br><span class="line">            dir = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (step_loc &gt; num_old) &#123;</span><br><span class="line">        dir = <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (step_loc &lt; num_old) &#123;</span><br><span class="line">        dir = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    num_old = step_loc;</span><br><span class="line">    motor_drive.speed_group[count - <span class="number">1</span>] *= dir;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="c-电机速度检测">(c) 电机速度检测</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update_motor_speed</span><span class="params">(<span class="keyword">uint8_t</span> dir_in, <span class="keyword">uint32_t</span> time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> speed_temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算速度：</span></span><br><span class="line"><span class="comment">       电机每转一圈共用12个脉冲，(1.0/(72000000.0/128.0)为计数器的周期，(1.0/(72000000.0/128.0) * time)为时间长。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (time == <span class="number">0</span>)</span><br><span class="line">        motor_drive.speed_group[count++] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        f = (<span class="number">1.0f</span> / (<span class="number">72000000.0f</span> / HALL_PRESCALER_COUNT) * time);</span><br><span class="line">        f = (<span class="number">1.0f</span> / <span class="number">12.0f</span>) / (f  / <span class="number">60.0f</span>);</span><br><span class="line">        motor_drive.speed_group[count++] = f;</span><br><span class="line">    &#125;</span><br><span class="line">    update_speed_dir(dir_in);</span><br><span class="line">    <span class="comment">//  motor_drive.speed = motor_drive.speed_group[count-1];</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= SPEED_FILTER_NUM) &#123;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  return ;</span></span><br><span class="line">    speed_temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算近 SPEED_FILTER_NUM 次的速度平均值（滤波） */</span></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">uint8_t</span> c = <span class="number">0</span>; c &lt; SPEED_FILTER_NUM; c++) &#123;</span><br><span class="line">            speed_temp += motor_drive.speed_group[c];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        motor_drive.speed = speed_temp / SPEED_FILTER_NUM;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">uint8_t</span> c = <span class="number">0</span>; c &lt; count; c++) &#123;</span><br><span class="line">            speed_temp += motor_drive.speed_group[c];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        motor_drive.speed = speed_temp / count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="d-pid-的调节周期实现">(d) PID 的调节周期实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BasicTIM_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* preep priority and sub-priority configuration */</span></span><br><span class="line">    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* enbale nvic interrupt */</span></span><br><span class="line">    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);</span><br><span class="line">    <span class="comment">// 开启TIMx_CLK,x[6,7]</span></span><br><span class="line">    __HAL_RCC_TIM6_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">    TIM_TimeBaseStructure.Instance    = TIM6;</span><br><span class="line">    TIM_TimeBaseStructure.Init.Period = BASIC_PERIOD_COUNT - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TIM clock source:     TIMxCLK = 2 * PCLK1</span></span><br><span class="line">    <span class="comment">//                      PCLK1 = HCLK / 2</span></span><br><span class="line">    <span class="comment">//                      =&gt; TIMxCLK=HCLK/2=SystemCoreClock/2=72MHz</span></span><br><span class="line">    <span class="comment">// TIM&#x27;s frequency      =&gt; TIMxCLK/BASIC_PRESCALER_COUNT</span></span><br><span class="line">    TIM_TimeBaseStructure.Init.Prescaler     = BASIC_PRESCALER_COUNT - <span class="number">1</span>;       <span class="comment">// 100kHz</span></span><br><span class="line">    TIM_TimeBaseStructure.Init.CounterMode   = TIM_COUNTERMODE_UP;              <span class="comment">// 向上计数</span></span><br><span class="line">    TIM_TimeBaseStructure.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;          <span class="comment">// 时钟分频</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TIMx, x[2,3,4,5] time base initialize</span></span><br><span class="line">    HAL_TIM_Base_Init(&amp;TIM_TimeBaseStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// enable TIM&#x27;s update interrupt</span></span><br><span class="line">    HAL_TIM_Base_Start_IT(&amp;TIM_TimeBaseStructure);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="e-pid-周期性调节实现速度环">(e) PID 周期性调节实现速度环</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief  pid control motor speed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bldcm_pid_control</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int32_t</span> speed_actual = get_motor_speed();                          <span class="comment">// 电机旋转的当前速度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bldcm_data.is_enable) &#123;</span><br><span class="line">        <span class="keyword">float</span> cont_val = <span class="number">0</span>;                                            <span class="comment">// 当前控制值</span></span><br><span class="line">        cont_val = PID_realize(speed_actual);</span><br><span class="line">        <span class="keyword">if</span> (cont_val &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            cont_val = -cont_val;</span><br><span class="line">            bldcm_data.direction = MOTOR_REV;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bldcm_data.direction = MOTOR_FWD;</span><br><span class="line">        &#125;</span><br><span class="line">        cont_val = (cont_val &gt; PWM_PERIOD_COUNT) ? PWM_PERIOD_COUNT : cont_val;  <span class="comment">// 上限处理</span></span><br><span class="line">        set_bldcm_speed(cont_val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="f-增量式-pid-实现">(f) 增量式 PID 实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">float</span> target_val;               <span class="comment">// 目标值</span></span><br><span class="line">    <span class="keyword">float</span> actual_val;               <span class="comment">// 实际值</span></span><br><span class="line">    <span class="keyword">float</span> err;                      <span class="comment">// 定义偏差值</span></span><br><span class="line">    <span class="keyword">float</span> err_prev;                 <span class="comment">// 定义上一个偏差值</span></span><br><span class="line">    <span class="keyword">float</span> err_preprev;              <span class="comment">// 定义上上一个偏差值</span></span><br><span class="line">    <span class="keyword">float</span> Kp, Ki, Kd;               <span class="comment">// 定义比例、积分、微分系数</span></span><br><span class="line">&#125; _pid;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PID_param_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 初始化参数 */</span></span><br><span class="line">    pid.target_val  = <span class="number">0.0</span>;</span><br><span class="line">    pid.actual_val  = <span class="number">0.0</span>;</span><br><span class="line">    pid.err         = <span class="number">0.0</span>;</span><br><span class="line">    pid.err_prev    = <span class="number">0.0</span>;</span><br><span class="line">    pid.err_preprev = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 速度环，增量式pid demo参数</span></span><br><span class="line">    pid.Kp = <span class="number">0.1</span>;</span><br><span class="line">    pid.Ki = <span class="number">0.035</span>;</span><br><span class="line">    pid.Kd = <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  PID算法实现</span></span><br><span class="line"><span class="comment">  * @param  actual_val:实际值</span></span><br><span class="line"><span class="comment">    *   @note   无</span></span><br><span class="line"><span class="comment">  * @retval 通过PID计算后的输出</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">PID_realize</span><span class="params">(<span class="keyword">float</span> actual_val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*计算目标值与实际值的误差*/</span></span><br><span class="line">    pid.err        = pid.target_val - actual_val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 增量PID算法实现 */</span></span><br><span class="line">    pid.actual_val += pid.Kp * (pid.err - pid.err_prev)</span><br><span class="line">                      +  pid.Ki *  pid.err</span><br><span class="line">                      +  pid.Kd * (pid.err - <span class="number">2</span> * pid.err_prev + pid.err_preprev);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*误差传递*/</span></span><br><span class="line">    pid.err_preprev = pid.err_prev;</span><br><span class="line">    pid.err_prev = pid.err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*返回当前实际值*/</span></span><br><span class="line">    <span class="keyword">return</span> pid.actual_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pid-整定方法">4. PID 整定方法</h2><h3 id="一般调节法">4.1 一般调节法</h3><h4 id="调节步骤">4.1.1 调节步骤</h4><blockquote><ol type="1"><li>首先只调节 Kp, 将 Ki, Kd 置 0</li><li>从小到大增加 Kp，直到系统出现振荡，再反过来，逐渐将 Kp减小，直至系统振荡小时，此时的比例增益的 60%-70%设置为比例增益 P参数，此时 P 参数调试完成</li><li>从大到小调节积分时间常数 Ti 直至系统出现振荡，再反过来，逐渐增加 Ti直至系统振荡消失，设定 PID 系统的积分时间常数 Ti 为当前值的 1.5~1.8倍</li><li>确定积分时间常数 Ti 后，Td 一般不用设定，可以为0；也可以设定，可以从小到大增加 Td 直至系统出现振荡，再反过来逐渐减小Td，直到系统振荡消失，取此时不震荡的 30%作为 PID 系统的微分时间常数</li><li><font color = 'red'>系统空载，带载联调，再对 PID参数进行微调</font></li></ol></blockquote><h3 id="临界比例法ziegler-nichols-工程整定法">4.2临界比例法(Ziegler-Nichols 工程整定法)</h3><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220320103729875.png"alt="image-20220320103729875" /></p><h4 id="调节步骤-1">4.2.1 调节步骤</h4><blockquote><ol type="1"><li>切除 PID 控制器中的积分与微分作用，取较小的比例增益 Kp值，并投入闭环运行</li><li>将 Kp 由小变大，直至阶跃响应产生等幅振荡</li><li>记录下等幅时的临界比例系数和两个波峰的时间间隔</li><li>采用经验公式，计算调节器的参数</li></ol></blockquote><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220320103902484.png"alt="image-20220320103902484" /></p><p><span class="math display">\[\begin{align}&amp; \delta K：产生等幅振荡时的Kp值 \\&amp; TK：等幅振荡时，两个波峰之间的时间间隔\end{align}\]</span></p><h4 id="调节过程">4.2.2 调节过程</h4><blockquote><ol type="1"><li>由于调节过程没有上位机软件工具可以测量等幅振荡时，相邻波峰之间的时间间隔，暂时无法使用此法调节</li></ol></blockquote><h2 id="pid-整定质量">5. PID 整定质量</h2><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/29879819_2.jpg" /></p><blockquote><ol type="1"><li><font color = 'red'><strong>PID参数整定的好不好，有一个简单的量化标准：理想曲线两个波，前高后低4:1，其反应的是当外部环境发生变化或者干扰因素存在打破之前的平衡后，系统自动调整达到新平衡的一个动态过程的速度快慢</strong></font></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pidbldc-速度环-pid增量式控制&quot;&gt;[PID]BLDC 速度环
PID(增量式)控制&lt;/h1&gt;
&lt;h2 id=&quot;连续控制的-pid-公式&quot;&gt;1. 连续控制的 PID 公式&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
</summary>
      
    
    
    
    <category term="BLDC" scheme="https://tresordie.github.io/categories/BLDC/"/>
    
    
    <category term="PID" scheme="https://tresordie.github.io/tags/PID/"/>
    
  </entry>
  
  <entry>
    <title>BLDC速度环PID(位置式)控制</title>
    <link href="https://tresordie.github.io/2022/03/19/[PID]BLDC%E9%80%9F%E5%BA%A6%E7%8E%AFPID(%E4%BD%8D%E7%BD%AE%E5%BC%8F)%E6%8E%A7%E5%88%B6/"/>
    <id>https://tresordie.github.io/2022/03/19/[PID]BLDC%E9%80%9F%E5%BA%A6%E7%8E%AFPID(%E4%BD%8D%E7%BD%AE%E5%BC%8F)%E6%8E%A7%E5%88%B6/</id>
    <published>2022-03-19T02:00:00.000Z</published>
    <updated>2023-01-08T02:58:43.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pidbldc-速度环-pid位置式控制">[PID]BLDC 速度环PID(位置式)控制</h1><h2 id="连续控制的-pid-公式">1. 连续控制的 PID 公式</h2><p><span class="math display">\[\begin{align}&amp; u(t) = K_p[err(t) + \frac{1}{T_t} \int_{0}^{t} err(t)dt + T_d\frac{derr(t)}{dt}] \\&amp; K_p ： 比例增益，与比例度为倒数关系 \\&amp; T_t ： 积分时间常数 \\&amp; u(t)： PID控制器的输出信号，为PID控制的操作量 \\&amp; err(t)： 目标值target与测量值之间的差值\end{align}\]</span></p><h2 id="离散位置式-pid-公式">2. 离散位置式 PID 公式</h2><p><span class="math display">\[\begin{align}&amp; u(k) = K_perr(k) + K_i\sum_{j=0}^{k}err(j) + K_d(err(k) -err(k-1)) \\&amp; k：采样的序号 \\&amp; err(k)：第k次的误差 \\&amp; u(k)：PID的输出操作量 \\&amp; K_p：比例增益 \\&amp; K_i = K_p * \frac {T}{T_i} \\&amp; K_d = K_p * \frac {T_d}{T}\end{align}\]</span></p><h2 id="位置式-pid-实现速度环">3. 位置式 PID 实现速度环</h2><h3 id="实现过程">3.1 实现过程</h3><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/1211.png"alt="1211" /></p><blockquote><ol type="1"><li>位置式 PID 的目标值为需要设定的速度</li><li>测量值由霍尔传感器来测实时速度进行反馈</li><li>PID 计算输出为系统操作量(即控制电机的 PWM)</li></ol></blockquote><h3 id="代码实现">3.2 代码实现</h3><h4 id="a-电机相应的数据结构">(a) 电机相应的数据结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int32_t</span> timeout;                  <span class="comment">// 定时器更新计数</span></span><br><span class="line">  <span class="keyword">float</span>   speed;                    <span class="comment">// 电机速度 rps（转/分钟）</span></span><br><span class="line">  <span class="keyword">int32_t</span> enable_flag;              <span class="comment">// 电机使能标志</span></span><br><span class="line">  <span class="keyword">int32_t</span> speed_group[SPEED_FILTER_NUM];</span><br><span class="line">&#125;<span class="keyword">motor_rotate_t</span>;</span><br></pre></td></tr></table></figure><h4 id="b-电机旋转方向的判断">(b) 电机旋转方向的判断</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  更新电机实际速度方向</span></span><br><span class="line"><span class="comment">  * @param  dir_in：霍尔值</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update_speed_dir</span><span class="params">(<span class="keyword">uint8_t</span> dir_in)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> step[<span class="number">6</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;        <span class="comment">// Couter Clock Wise(CCW)逆时针方向旋转时，三相加电步骤</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">uint8_t</span> num_old = <span class="number">0</span>;                 <span class="comment">// hall sensor state location of last time</span></span><br><span class="line">    <span class="keyword">uint8_t</span> step_loc = <span class="number">0</span>;                       <span class="comment">// 记录当前霍尔位置</span></span><br><span class="line">    <span class="keyword">int8_t</span> dir = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (step_loc = <span class="number">0</span>; step_loc &lt; <span class="number">6</span>; step_loc++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (step[step_loc] == dir_in) &#123;         <span class="comment">// 找到当前霍尔的位置</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 端点处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (step_loc == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num_old == <span class="number">1</span>) &#123;</span><br><span class="line">            dir = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num_old == <span class="number">5</span>) &#123;</span><br><span class="line">            dir = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 端点处理 */</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (step_loc == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num_old == <span class="number">0</span>) &#123;</span><br><span class="line">            dir = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num_old == <span class="number">4</span>) &#123;</span><br><span class="line">            dir = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (step_loc &gt; num_old) &#123;</span><br><span class="line">        dir = <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (step_loc &lt; num_old) &#123;</span><br><span class="line">        dir = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    num_old = step_loc;</span><br><span class="line">    motor_drive.speed_group[count - <span class="number">1</span>] *= dir;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="c-电机速度检测">(c) 电机速度检测</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update_motor_speed</span><span class="params">(<span class="keyword">uint8_t</span> dir_in, <span class="keyword">uint32_t</span> time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> speed_temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算速度：</span></span><br><span class="line"><span class="comment">       电机每转一圈共用12个脉冲，(1.0/(72000000.0/128.0)为计数器的周期，(1.0/(72000000.0/128.0) * time)为时间长。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (time == <span class="number">0</span>)</span><br><span class="line">        motor_drive.speed_group[count++] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        f = (<span class="number">1.0f</span> / (<span class="number">72000000.0f</span> / HALL_PRESCALER_COUNT) * time);</span><br><span class="line">        f = (<span class="number">1.0f</span> / <span class="number">12.0f</span>) / (f  / <span class="number">60.0f</span>);</span><br><span class="line">        motor_drive.speed_group[count++] = f;</span><br><span class="line">    &#125;</span><br><span class="line">    update_speed_dir(dir_in);</span><br><span class="line">    <span class="comment">//  motor_drive.speed = motor_drive.speed_group[count-1];</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= SPEED_FILTER_NUM) &#123;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  return ;</span></span><br><span class="line">    speed_temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算近 SPEED_FILTER_NUM 次的速度平均值（滤波） */</span></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">uint8_t</span> c = <span class="number">0</span>; c &lt; SPEED_FILTER_NUM; c++) &#123;</span><br><span class="line">            speed_temp += motor_drive.speed_group[c];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        motor_drive.speed = speed_temp / SPEED_FILTER_NUM;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">uint8_t</span> c = <span class="number">0</span>; c &lt; count; c++) &#123;</span><br><span class="line">            speed_temp += motor_drive.speed_group[c];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        motor_drive.speed = speed_temp / count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="d-pid-的调节周期实现">(d) PID 的调节周期实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BasicTIM_Configuration</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* preep priority and sub-priority configuration */</span></span><br><span class="line">    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* enbale nvic interrupt */</span></span><br><span class="line">    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);</span><br><span class="line">    <span class="comment">// 开启TIMx_CLK,x[6,7]</span></span><br><span class="line">    __HAL_RCC_TIM6_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">    TIM_TimeBaseStructure.Instance    = TIM6;</span><br><span class="line">    TIM_TimeBaseStructure.Init.Period = BASIC_PERIOD_COUNT - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TIM clock source:     TIMxCLK = 2 * PCLK1</span></span><br><span class="line">    <span class="comment">//                      PCLK1 = HCLK / 2</span></span><br><span class="line">    <span class="comment">//                      =&gt; TIMxCLK=HCLK/2=SystemCoreClock/2=72MHz</span></span><br><span class="line">    <span class="comment">// TIM&#x27;s frequency      =&gt; TIMxCLK/BASIC_PRESCALER_COUNT</span></span><br><span class="line">    TIM_TimeBaseStructure.Init.Prescaler     = BASIC_PRESCALER_COUNT - <span class="number">1</span>;       <span class="comment">// 100kHz</span></span><br><span class="line">    TIM_TimeBaseStructure.Init.CounterMode   = TIM_COUNTERMODE_UP;              <span class="comment">// 向上计数</span></span><br><span class="line">    TIM_TimeBaseStructure.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;          <span class="comment">// 时钟分频</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TIMx, x[2,3,4,5] time base initialize</span></span><br><span class="line">    HAL_TIM_Base_Init(&amp;TIM_TimeBaseStructure);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// enable TIM&#x27;s update interrupt</span></span><br><span class="line">    HAL_TIM_Base_Start_IT(&amp;TIM_TimeBaseStructure);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="e-pid-周期性调节实现速度环">(e) PID 周期性调节实现速度环</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief  pid control motor speed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bldcm_pid_control</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int32_t</span> speed_actual = get_motor_speed();                          <span class="comment">// 电机旋转的当前速度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bldcm_data.is_enable) &#123;</span><br><span class="line">        <span class="keyword">float</span> cont_val = <span class="number">0</span>;                                            <span class="comment">// 当前控制值</span></span><br><span class="line">        cont_val = PID_realize(speed_actual);</span><br><span class="line">        <span class="keyword">if</span> (cont_val &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            cont_val = -cont_val;</span><br><span class="line">            bldcm_data.direction = MOTOR_REV;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bldcm_data.direction = MOTOR_FWD;</span><br><span class="line">        &#125;</span><br><span class="line">        cont_val = (cont_val &gt; PWM_PERIOD_COUNT) ? PWM_PERIOD_COUNT : cont_val;  <span class="comment">// 上限处理</span></span><br><span class="line">        set_bldcm_speed(cont_val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="f-位置式-pid-实现">(f) 位置式 PID 实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">float</span> target_val;               <span class="comment">// 目标值</span></span><br><span class="line">    <span class="keyword">float</span> actual_val;               <span class="comment">// 实际值</span></span><br><span class="line">    <span class="keyword">float</span> err;                      <span class="comment">// 定义偏差值</span></span><br><span class="line">    <span class="keyword">float</span> err_last;                 <span class="comment">// 定义上一个偏差值</span></span><br><span class="line">    <span class="keyword">float</span> Kp, Ki, Kd;               <span class="comment">// 定义比例、积分、微分系数</span></span><br><span class="line">    <span class="keyword">float</span> integral;                 <span class="comment">// 定义积分值</span></span><br><span class="line">&#125; _pid;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PID_param_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 初始化参数 */</span></span><br><span class="line">    pid.target_val = <span class="number">0.0</span>;</span><br><span class="line">    pid.actual_val = <span class="number">0.0</span>;</span><br><span class="line">    pid.err        = <span class="number">0.0</span>;</span><br><span class="line">    pid.err_last   = <span class="number">0.0</span>;</span><br><span class="line">    pid.integral   = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    pid.Kp         = <span class="number">0.12</span>;      <span class="comment">// 一般调节法，单纯Kp = 0.2时，此时不振荡</span></span><br><span class="line">    pid.Ki         = <span class="number">0.07</span>;      <span class="comment">// 一般调节法，单纯Ki = 0.05时，此时不振荡</span></span><br><span class="line">    pid.Kd         = <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  PID算法实现</span></span><br><span class="line"><span class="comment">  * @param  actual_val:实际值</span></span><br><span class="line"><span class="comment">  * @note   无</span></span><br><span class="line"><span class="comment">  * @retval 通过PID计算后的输出</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">PID_realize</span><span class="params">(<span class="keyword">float</span> actual_val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*计算目标值与实际值的误差*/</span></span><br><span class="line">    pid.err        = pid.target_val - actual_val;</span><br><span class="line">    pid.integral   += pid.err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*PID算法实现*/</span></span><br><span class="line">    pid.actual_val = pid.Kp * pid.err +</span><br><span class="line">                     pid.Ki * pid.integral +</span><br><span class="line">                     pid.Kd * (pid.err - pid.err_last);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*误差传递*/</span></span><br><span class="line">    pid.err_last   = pid.err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*返回当前实际值*/</span></span><br><span class="line">    <span class="keyword">return</span> pid.actual_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pid-整定方法">4. PID 整定方法</h2><h3 id="一般调节法">4.1 一般调节法</h3><h4 id="调节步骤">4.1.1 调节步骤</h4><blockquote><ol type="1"><li>首先只调节 Kp, 将 Ki, Kd 置 0</li><li>从小到大增加 Kp，直到系统出现振荡，再反过来，逐渐将 Kp减小，直至系统振荡小时，此时的比例增益的 60%-70%设置为比例增益 P参数，此时 P 参数调试完成</li><li>从大到小调节积分时间常数 Ti 直至系统出现振荡，再反过来，逐渐增加 Ti直至系统振荡消失，设定 PID 系统的积分时间常数 Ti 为当前值的 1.5~1.8倍</li><li>确定积分时间常数 Ti 后，Td 一般不用设定，可以为0；也可以设定，可以从小到大增加 Td 直至系统出现振荡，再反过来逐渐减小Td，直到系统振荡消失，取此时不震荡的 30%作为 PID 系统的微分时间常数</li><li><font color = 'red'>系统空载，带载联调，再对 PID参数进行微调</font></li></ol></blockquote><h4 id="调节过程">4.2 调节过程</h4><h5 id="a-kp-调节">(a) Kp 调节</h5><blockquote><ol type="1"><li>速度环目标为 2000rpm</li><li>纯 Kp 设置为 1， 出现振荡，需要调小 Kp，Kp 调节到 0.5仍有振荡产生，Kp 调节到 0.25，振荡一次</li><li>Kp 调节到 0.2，基本没有振荡，取 0.2*0.7=0.14</li></ol></blockquote><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220319180348882.png"alt="image-20220319180348882" /></p><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220319181748274.png"alt="image-20220319181748274" /></p><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220319190626319.png"alt="image-20220319190626319" /></p><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220319190907829.png"alt="image-20220319190907829" /></p><h5 id="b-ki-调节">(b) Ki 调节</h5><blockquote><ol type="1"><li>Kp = 0.14 基础上调节 Ki</li><li>Ki = 0.5 时系统振荡，继续降低 Ki，Ki = 0.2 仍振荡，Ki 为 0.1时不振荡</li><li>最终取 Ki 为 0.1/1.5=0.067</li></ol></blockquote><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220319224959331.png"alt="image-20220319224959331" /></p><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220319225530491.png"alt="image-20220319225530491" /></p><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220320013033628.png"alt="image-20220320013033628" /></p><h5 id="c-kd-调节">(c) Kd 调节</h5><blockquote><ol type="1"><li>Kd 不进行调节，设置为 0</li></ol></blockquote><h3 id="临界比例法ziegler-nichols-工程整定法">4.2临界比例法(Ziegler-Nichols 工程整定法)</h3><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220320103729875.png"alt="image-20220320103729875" /></p><p><span class="math display">\[\begin{align}&amp; u(k) = K_perr(k) + K_i\sum_{j=0}^{k}err(j) + K_d(err(k) -err(k-1)) \\&amp; k：采样的序号 \\&amp; err(k)：第k次的误差 \\&amp; u(k)：PID的输出操作量 \\&amp; K_p：比例增益 \\&amp; K_i = K_p * \frac {T}{T_i} \\&amp; K_d = K_p * \frac {T_d}{T}\end{align}\]</span></p><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/2019112717412235.png"alt="2019112717412235" /></p><p><span class="math display">\[\begin{align}&amp; PID_{out} = K_p*[err + \frac {T}{T_i}\sum_{j=0}^{k}err(j)+\frac{T_d}{T}(err-err_{last})]\\&amp; 对上式展开得到：\\&amp; PID_{out} = K_p*err + \frac {K_p*T}{T_i}\sum_{j=0}^{k}err(j)+\frac{K_p*T_d}{T}(err-err_{last})\\&amp;当调整Kp参数获取到临界振荡周期Tr及K_{pr}后计算PID控制的其它参数：\\&amp; (a)当单独P控制时：Kp = 0.5Kpr\\&amp; (b)当PI控制时：\\&amp; \ \ \ \ \ \ \ \ \ \ \ \ \ \ Kp = 0.45Kpr \\&amp; \ \ \ \ \ \ \ \ \ \ \ \ \ \ K_i = K_p * \frac {T}{T_i} = \frac{0.45K_{pr}*T}{T_i} = \frac {0.45K_{pr}*T}{0.83T_r}  \\&amp; (c)当PID控制时：\\&amp; \ \ \ \ \ \ \ \ \ \ \ \ \ \ Kp = 0.6Kpr\\&amp; \ \ \ \ \ \ \ \ \ \ \ \ \ \ K_i = K_p * \frac {T}{T_i} = \frac{0.6K_{pr}*T}{T_i} = \frac {0.6K_{pr}*T}{0.5T_r} \\&amp; \ \ \ \ \ \ \ \ \ \ \ \ \ \ K_d = \frac {Kp*T_d}{T} = \frac{0.6K_{pr}*T_d}{T} = \frac {0.6K_{pr}*0.12T_r}{T}\end{align}\]</span></p><h4 id="调节步骤-1">4.2.1 调节步骤</h4><blockquote><ol type="1"><li>切除 PID 控制器中的积分与微分作用，取较小的比例增益 Kp值，并投入闭环运行</li><li>将 Kp 由小变大，直至阶跃响应产生等幅振荡</li><li>记录下等幅时的临界比例系数和两个波峰的时间间隔</li><li>采用经验公式，计算调节器的参数</li></ol></blockquote><h4 id="使用-pi-模型调节">4.2.2 使用 PI 模型调节</h4><blockquote><ol type="1"><li><p>纯 Kp 调节，当 Kp 调节到 1.35时，系统出现了等幅振荡，且等幅振荡时两个相邻波峰间隔 640ms，当前系统 PID调节周期为 20ms</p><p><span class="math display">\[\begin{align}&amp; Kpr = 1.35 \\&amp; Tr\ \ \  = 640ms \\&amp; T \ \ \ \ \ = 20ms\end{align}\]</span></p></li><li><p>计算相应的 PI 参数：</p><p><span class="math display">\[\begin{align}&amp; \ \ \ \  Kp = 0.45Kpr= 0.607 \\&amp; \ \ \ \  K_i = K_p * \frac {T}{T_i} = \frac {0.45K_{pr}*T}{T_i} =\frac {0.45K_{pr}*T}{0.83T_r} = \frac{0.45*1.35*20}{0.83*640} = 0.023\end{align}\]</span></p></li><li><p>从系统调节及最终稳态数据来看，效果很好</p></li></ol></blockquote><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220321112003032.png"alt="image-20220321112003032" /></p><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220321131908257.png"alt="image-20220321131908257" /></p><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/image-20220321132148188.png"alt="image-20220321132148188" /></p><h4 id="使用-pid-模型调节">4.2.4 使用 PID 模型调节</h4><blockquote><ol type="1"><li><p>计算 PID 各参数</p><p><span class="math display">\[\begin{align}&amp; Kp = 0.6Kpr = 0.6*1.35 = 0.81\\&amp; K_i = K_p * \frac {T}{T_i} = \frac {0.6K_{pr}*T}{T_i} = \frac{0.6K_{pr}*T}{0.5T_r}=\frac{0.6*1.35*20}{0.5*640}=0.051\\&amp; K_d = \frac {Kp*T_d}{T} = \frac {0.6K_{pr}*T_d}{T} = \frac{0.6K_{pr}*0.12T_r}{T}=\frac{0.6*1.35*0.12*640}{20}=3.11\end{align}\]</span></p></li><li><p>使用 PID 调速时，如果添加了D，在速度改变过程中会造成系统振荡频率高，所以需要降低，在这里不太适应，所以最好不使用D 参数，直接使用 PI 模型</p></li></ol></blockquote><h2 id="pid-整定质量">5. PID 整定质量</h2><p><imgsrc="https://raw.githubusercontent.com/Tresordie/PicBed/master/img/29879819_2.jpg" /></p><blockquote><ol type="1"><li><font color = 'red'><strong>PID参数整定的好不好，有一个简单的量化标准：理想曲线两个波，前高后低4:1，其反应的是当外部环境发生变化或者干扰因素存在打破之前的平衡后，系统自动调整达到新平衡的一个动态过程的速度快慢</strong></font></li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pidbldc-速度环-pid位置式控制&quot;&gt;[PID]BLDC 速度环
PID(位置式)控制&lt;/h1&gt;
&lt;h2 id=&quot;连续控制的-pid-公式&quot;&gt;1. 连续控制的 PID 公式&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
</summary>
      
    
    
    
    <category term="BLDC" scheme="https://tresordie.github.io/categories/BLDC/"/>
    
    
    <category term="PID" scheme="https://tresordie.github.io/tags/PID/"/>
    
  </entry>
  
  <entry>
    <title>BLDC位置式PID</title>
    <link href="https://tresordie.github.io/2022/03/18/[PID]BLDC%E4%BD%8D%E7%BD%AE%E5%BC%8FPID/"/>
    <id>https://tresordie.github.io/2022/03/18/[PID]BLDC%E4%BD%8D%E7%BD%AE%E5%BC%8FPID/</id>
    <published>2022-03-18T11:00:00.000Z</published>
    <updated>2023-01-08T02:59:19.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pidbldc-位置式-pid">[PID]BLDC 位置式 PID</h1><h2 id="连续控制的-pid-公式">1. 连续控制的 PID 公式</h2><p><span class="math display">\[\begin{align}&amp; u(t) = K_p[err(t) + \frac1 T_t \int_{0}^{t} err(t)dt + T_d\frac{derr(t)}{dt}] \\&amp; K_p ： 比例增益，与比例度为倒数关系 \\&amp; T_t ： 积分时间常数 \\&amp; u(t)： PID控制器的输出信号，为PID控制的操作量 \\&amp; err(t)： 目标值target与测量值之间的差值\end{align}\]</span></p><h2 id="离散位置式-pid-公式">2. 离散位置式 PID 公式</h2><p><span class="math display">\[\begin{align}&amp; u(k) = K_p[err(k) + K_i\sum_{j=0}^{k}err(j) + K_d(err(k) -err(k-1))] \\&amp; k：采样的序号 \\&amp; err(k)：第k次的误差 \\&amp; u(k)：PID的输出操作量 \\&amp; K_p：比例增益 \\&amp; K_i = K_p * \frac {T}{T_i} \\&amp; K_d = K_p * \frac {T_d}{T}\end{align}\]</span></p><h2 id="位置式-pid-代码实现">3. 位置式 PID 代码实现</h2><h3 id="位置式-pid-数据结构">3.1 位置式 PID 数据结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">float</span> target_val;               <span class="comment">// 目标值</span></span><br><span class="line">    <span class="keyword">float</span> actual_val;               <span class="comment">// 实际值</span></span><br><span class="line">    <span class="keyword">float</span> err;                      <span class="comment">// 定义偏差值</span></span><br><span class="line">    <span class="keyword">float</span> err_last;                 <span class="comment">// 定义上一个偏差值</span></span><br><span class="line">    <span class="keyword">float</span> Kp, Ki, Kd;               <span class="comment">// 定义比例、积分、微分系数</span></span><br><span class="line">    <span class="keyword">float</span> integral;                 <span class="comment">// 定义积分值</span></span><br><span class="line">&#125; _pid;</span><br></pre></td></tr></table></figure><h3 id="位置式-pid-代码">3.2 位置式 PID 代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PID_param_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 初始化参数 */</span></span><br><span class="line">    pid.target_val = <span class="number">0.0</span>;</span><br><span class="line">    pid.actual_val = <span class="number">0.0</span>;</span><br><span class="line">    pid.err        = <span class="number">0.0</span>;</span><br><span class="line">    pid.err_last   = <span class="number">0.0</span>;</span><br><span class="line">    pid.integral   = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    pid.Kp         = <span class="number">0.12</span>;      <span class="comment">// 一般调节法，单纯Kp = 0.2时，此时不振荡</span></span><br><span class="line">    pid.Ki         = <span class="number">0.07</span>;      <span class="comment">// 一般调节法，单纯Ki = 0.05时，此时不振荡</span></span><br><span class="line">    pid.Kd         = <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  PID算法实现</span></span><br><span class="line"><span class="comment">  * @param  actual_val:实际值</span></span><br><span class="line"><span class="comment">  * @note   无</span></span><br><span class="line"><span class="comment">  * @retval 通过PID计算后的输出</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">PID_realize</span><span class="params">(<span class="keyword">float</span> actual_val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*计算目标值与实际值的误差*/</span></span><br><span class="line">    pid.err        = pid.target_val - actual_val;</span><br><span class="line">    pid.integral   += pid.err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*PID算法实现*/</span></span><br><span class="line">    pid.actual_val = pid.Kp * pid.err +</span><br><span class="line">                     pid.Ki * pid.integral +</span><br><span class="line">                     pid.Kd * (pid.err - pid.err_last);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*误差传递*/</span></span><br><span class="line">    pid.err_last   = pid.err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*返回当前实际值*/</span></span><br><span class="line">    <span class="keyword">return</span> pid.actual_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pidbldc-位置式-pid&quot;&gt;[PID]BLDC 位置式 PID&lt;/h1&gt;
&lt;h2 id=&quot;连续控制的-pid-公式&quot;&gt;1. 连续控制的 PID 公式&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
\begin{align}</summary>
      
    
    
    
    <category term="BLDC" scheme="https://tresordie.github.io/categories/BLDC/"/>
    
    
    <category term="PID" scheme="https://tresordie.github.io/tags/PID/"/>
    
  </entry>
  
  <entry>
    <title>BLDC增量式PID</title>
    <link href="https://tresordie.github.io/2022/03/18/[PID]BLDC%E5%A2%9E%E9%87%8F%E5%BC%8FPID/"/>
    <id>https://tresordie.github.io/2022/03/18/[PID]BLDC%E5%A2%9E%E9%87%8F%E5%BC%8FPID/</id>
    <published>2022-03-18T11:00:00.000Z</published>
    <updated>2023-01-08T02:59:23.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pidbldc-增量式-pid">[PID]BLDC 增量式 PID</h1><h2 id="连续控制的-pid-公式">1. 连续控制的 PID 公式</h2><p><span class="math display">\[\begin{align}&amp; u(t) = K_p[err(t) + \frac1 T_t \int_{0}^{t} err(t)dt + T_d\frac{derr(t)}{dt}] \\&amp; K_p ： 比例增益，与比例度为倒数关系 \\&amp; T_t ： 积分时间常数 \\&amp; u(t)： PID控制器的输出信号，为PID控制的操作量 \\&amp; err(t)： 目标值target与测量值之间的差值\end{align}\]</span></p><h2 id="离散增量式-pid-公式">2. 离散增量式 PID 公式</h2><h3 id="第-k-个序列的位置式-pid">2.1 第 k 个序列的位置式 PID</h3><p><span class="math display">\[\begin{align}&amp; u(k) = K_p[err(k) + K_i\sum_{j=0}^{k}err(j) + K_d(err(k) -err(k-1))] \\&amp; k：采样的序号 \\&amp; err(k)：第k次的误差 \\&amp; u(k)：PID的输出操作量 \\&amp; K_p：比例增益 \\&amp; K_i = K_p * \frac {T}{T_i} \\&amp; K_d = K_p * \frac {T_d}{T}\end{align}\]</span></p><h3 id="第-k-1-个序列的位置式-pid">2.2 第 k-1 个序列的位置式 PID</h3><p><span class="math display">\[\begin{align}&amp; u(k-1) = K_p[err(k-1) + K_i\sum_{j=0}^{k-1}err(j) + K_d(err(k-1) -err(k-2))] \\&amp; k-1：采样的序号 \\&amp; err(k-1)：第k-1次的误差 \\&amp; u(k-1)：PID的输出操作量 \\&amp; K_p：比例增益 \\&amp; K_i = K_p * \frac {T}{T_i} \\&amp; K_d = K_p * \frac {T_d}{T}\end{align}\]</span></p><h3 id="计算增量式-pid">2.3 计算增量式 PID</h3><p><span class="math display">\[\Delta u(k) = K_p(err(k) - err(k-1)) + K_ierr(k) + K_d(err(k) -2err(k-1) + err(k-2))\]</span></p><h2 id="增量式-pid-代码实现">3. 增量式 PID 代码实现</h2><h3 id="位置式-pid-数据结构">3.1 位置式 PID 数据结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">float</span> target_val;               <span class="comment">// 目标值</span></span><br><span class="line">    <span class="keyword">float</span> actual_val;               <span class="comment">// 实际值</span></span><br><span class="line">    <span class="keyword">float</span> err;                      <span class="comment">// 定义偏差值</span></span><br><span class="line">    <span class="keyword">float</span> err_prev;                 <span class="comment">// 定义上一个偏差值</span></span><br><span class="line">    <span class="keyword">float</span> err_preprev;              <span class="comment">// 定义上上一个偏差值</span></span><br><span class="line">    <span class="keyword">float</span> Kp, Ki, Kd;               <span class="comment">// 定义比例、积分、微分系数</span></span><br><span class="line">&#125; _pid;</span><br></pre></td></tr></table></figure><h3 id="位置式-pid-代码">3.2 位置式 PID 代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PID_param_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* 初始化参数 */</span></span><br><span class="line">    pid.target_val  = <span class="number">0.0</span>;</span><br><span class="line">    pid.actual_val  = <span class="number">0.0</span>;</span><br><span class="line">    pid.err         = <span class="number">0.0</span>;</span><br><span class="line">    pid.err_prev    = <span class="number">0.0</span>;</span><br><span class="line">    pid.err_preprev = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 速度环，增量式pid demo参数</span></span><br><span class="line">    pid.Kp = <span class="number">0.1</span>;</span><br><span class="line">    pid.Ki = <span class="number">0.035</span>;</span><br><span class="line">    pid.Kd = <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  PID算法实现</span></span><br><span class="line"><span class="comment">  * @param  actual_val:实际值</span></span><br><span class="line"><span class="comment">    *   @note   无</span></span><br><span class="line"><span class="comment">  * @retval 通过PID计算后的输出</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">PID_realize</span><span class="params">(<span class="keyword">float</span> actual_val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*计算目标值与实际值的误差*/</span></span><br><span class="line">    pid.err        = pid.target_val - actual_val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 增量PID算法实现 */</span></span><br><span class="line">    pid.actual_val += pid.Kp * (pid.err - pid.err_prev)</span><br><span class="line">                      +  pid.Ki *  pid.err</span><br><span class="line">                      +  pid.Kd * (pid.err - <span class="number">2</span> * pid.err_prev + pid.err_preprev);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*误差传递*/</span></span><br><span class="line">    pid.err_preprev = pid.err_prev;</span><br><span class="line">    pid.err_prev = pid.err;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*返回当前实际值*/</span></span><br><span class="line">    <span class="keyword">return</span> pid.actual_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pidbldc-增量式-pid&quot;&gt;[PID]BLDC 增量式 PID&lt;/h1&gt;
&lt;h2 id=&quot;连续控制的-pid-公式&quot;&gt;1. 连续控制的 PID 公式&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
\begin{align}</summary>
      
    
    
    
    <category term="BLDC" scheme="https://tresordie.github.io/categories/BLDC/"/>
    
    
    <category term="PID" scheme="https://tresordie.github.io/tags/PID/"/>
    
  </entry>
  
</feed>
